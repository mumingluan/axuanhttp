// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: cmd/cmd_activity.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RogueCellState int32

const (
	RogueCellState_ROGUE_CELL_NONE        RogueCellState = 0
	RogueCellState_ROGUE_CELL_BATTLE      RogueCellState = 1
	RogueCellState_ROGUE_CELL_SUCCESS     RogueCellState = 2
	RogueCellState_ROGUE_CELL_FINISH      RogueCellState = 3
	RogueCellState_ROGUE_CELL_TAKEN_CHEST RogueCellState = 4
)

// Enum value maps for RogueCellState.
var (
	RogueCellState_name = map[int32]string{
		0: "ROGUE_CELL_NONE",
		1: "ROGUE_CELL_BATTLE",
		2: "ROGUE_CELL_SUCCESS",
		3: "ROGUE_CELL_FINISH",
		4: "ROGUE_CELL_TAKEN_CHEST",
	}
	RogueCellState_value = map[string]int32{
		"ROGUE_CELL_NONE":        0,
		"ROGUE_CELL_BATTLE":      1,
		"ROGUE_CELL_SUCCESS":     2,
		"ROGUE_CELL_FINISH":      3,
		"ROGUE_CELL_TAKEN_CHEST": 4,
	}
)

func (x RogueCellState) Enum() *RogueCellState {
	p := new(RogueCellState)
	*p = x
	return p
}

func (x RogueCellState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RogueCellState) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_activity_proto_enumTypes[0].Descriptor()
}

func (RogueCellState) Type() protoreflect.EnumType {
	return &file_cmd_cmd_activity_proto_enumTypes[0]
}

func (x RogueCellState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RogueCellState.Descriptor instead.
func (RogueCellState) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{0}
}

type RogueEliteCellDifficultyType int32

const (
	RogueEliteCellDifficultyType_ROGUE_ELITE_NORMAL RogueEliteCellDifficultyType = 0
	RogueEliteCellDifficultyType_ROGUE_ELITE_HARD   RogueEliteCellDifficultyType = 1
)

// Enum value maps for RogueEliteCellDifficultyType.
var (
	RogueEliteCellDifficultyType_name = map[int32]string{
		0: "ROGUE_ELITE_NORMAL",
		1: "ROGUE_ELITE_HARD",
	}
	RogueEliteCellDifficultyType_value = map[string]int32{
		"ROGUE_ELITE_NORMAL": 0,
		"ROGUE_ELITE_HARD":   1,
	}
)

func (x RogueEliteCellDifficultyType) Enum() *RogueEliteCellDifficultyType {
	p := new(RogueEliteCellDifficultyType)
	*p = x
	return p
}

func (x RogueEliteCellDifficultyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RogueEliteCellDifficultyType) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_activity_proto_enumTypes[1].Descriptor()
}

func (RogueEliteCellDifficultyType) Type() protoreflect.EnumType {
	return &file_cmd_cmd_activity_proto_enumTypes[1]
}

func (x RogueEliteCellDifficultyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RogueEliteCellDifficultyType.Descriptor instead.
func (RogueEliteCellDifficultyType) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{1}
}

type RogueDiaryAvatarDisableStatus int32

const (
	RogueDiaryAvatarDisableStatus_ROGUE_DIARY_AVATAR_DISABLE_NONE       RogueDiaryAvatarDisableStatus = 0
	RogueDiaryAvatarDisableStatus_ROGUE_DIARY_AVATAR_DISABLE_DEATH      RogueDiaryAvatarDisableStatus = 1
	RogueDiaryAvatarDisableStatus_ROGUE_DIARY_AVATAR_DISABLE_TIRED      RogueDiaryAvatarDisableStatus = 2
	RogueDiaryAvatarDisableStatus_ROGUE_DIARY_AVATAR_DISABLE_DUPLICATED RogueDiaryAvatarDisableStatus = 3
)

// Enum value maps for RogueDiaryAvatarDisableStatus.
var (
	RogueDiaryAvatarDisableStatus_name = map[int32]string{
		0: "ROGUE_DIARY_AVATAR_DISABLE_NONE",
		1: "ROGUE_DIARY_AVATAR_DISABLE_DEATH",
		2: "ROGUE_DIARY_AVATAR_DISABLE_TIRED",
		3: "ROGUE_DIARY_AVATAR_DISABLE_DUPLICATED",
	}
	RogueDiaryAvatarDisableStatus_value = map[string]int32{
		"ROGUE_DIARY_AVATAR_DISABLE_NONE":       0,
		"ROGUE_DIARY_AVATAR_DISABLE_DEATH":      1,
		"ROGUE_DIARY_AVATAR_DISABLE_TIRED":      2,
		"ROGUE_DIARY_AVATAR_DISABLE_DUPLICATED": 3,
	}
)

func (x RogueDiaryAvatarDisableStatus) Enum() *RogueDiaryAvatarDisableStatus {
	p := new(RogueDiaryAvatarDisableStatus)
	*p = x
	return p
}

func (x RogueDiaryAvatarDisableStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RogueDiaryAvatarDisableStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_activity_proto_enumTypes[2].Descriptor()
}

func (RogueDiaryAvatarDisableStatus) Type() protoreflect.EnumType {
	return &file_cmd_cmd_activity_proto_enumTypes[2]
}

func (x RogueDiaryAvatarDisableStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RogueDiaryAvatarDisableStatus.Descriptor instead.
func (RogueDiaryAvatarDisableStatus) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{2}
}

type ActivityPushTipsState int32

const (
	ActivityPushTipsState_ACTIVITY_PUSH_TIPS_STATE_NONE  ActivityPushTipsState = 0
	ActivityPushTipsState_ACTIVITY_PUSH_TIPS_STATE_START ActivityPushTipsState = 1
	ActivityPushTipsState_ACTIVITY_PUSH_TIPS_STATE_READ  ActivityPushTipsState = 2
)

// Enum value maps for ActivityPushTipsState.
var (
	ActivityPushTipsState_name = map[int32]string{
		0: "ACTIVITY_PUSH_TIPS_STATE_NONE",
		1: "ACTIVITY_PUSH_TIPS_STATE_START",
		2: "ACTIVITY_PUSH_TIPS_STATE_READ",
	}
	ActivityPushTipsState_value = map[string]int32{
		"ACTIVITY_PUSH_TIPS_STATE_NONE":  0,
		"ACTIVITY_PUSH_TIPS_STATE_START": 1,
		"ACTIVITY_PUSH_TIPS_STATE_READ":  2,
	}
)

func (x ActivityPushTipsState) Enum() *ActivityPushTipsState {
	p := new(ActivityPushTipsState)
	*p = x
	return p
}

func (x ActivityPushTipsState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityPushTipsState) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_activity_proto_enumTypes[3].Descriptor()
}

func (ActivityPushTipsState) Type() protoreflect.EnumType {
	return &file_cmd_cmd_activity_proto_enumTypes[3]
}

func (x ActivityPushTipsState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityPushTipsState.Descriptor instead.
func (ActivityPushTipsState) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{3}
}

type BrickBreakerSettleNotify_SettleReason int32

const (
	BrickBreakerSettleNotify_SETTLE_REASON_TIME_OUT BrickBreakerSettleNotify_SettleReason = 0
	BrickBreakerSettleNotify_SETTLE_PLAY_END        BrickBreakerSettleNotify_SettleReason = 1
	BrickBreakerSettleNotify_SETTLE_PLAYER_QUIT     BrickBreakerSettleNotify_SettleReason = 2
	BrickBreakerSettleNotify_SETTLE_LIFE_COUNT      BrickBreakerSettleNotify_SettleReason = 3
)

// Enum value maps for BrickBreakerSettleNotify_SettleReason.
var (
	BrickBreakerSettleNotify_SettleReason_name = map[int32]string{
		0: "SETTLE_REASON_TIME_OUT",
		1: "SETTLE_PLAY_END",
		2: "SETTLE_PLAYER_QUIT",
		3: "SETTLE_LIFE_COUNT",
	}
	BrickBreakerSettleNotify_SettleReason_value = map[string]int32{
		"SETTLE_REASON_TIME_OUT": 0,
		"SETTLE_PLAY_END":        1,
		"SETTLE_PLAYER_QUIT":     2,
		"SETTLE_LIFE_COUNT":      3,
	}
)

func (x BrickBreakerSettleNotify_SettleReason) Enum() *BrickBreakerSettleNotify_SettleReason {
	p := new(BrickBreakerSettleNotify_SettleReason)
	*p = x
	return p
}

func (x BrickBreakerSettleNotify_SettleReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrickBreakerSettleNotify_SettleReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cmd_cmd_activity_proto_enumTypes[4].Descriptor()
}

func (BrickBreakerSettleNotify_SettleReason) Type() protoreflect.EnumType {
	return &file_cmd_cmd_activity_proto_enumTypes[4]
}

func (x BrickBreakerSettleNotify_SettleReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrickBreakerSettleNotify_SettleReason.Descriptor instead.
func (BrickBreakerSettleNotify_SettleReason) EnumDescriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{809, 0}
}

type GetActivityScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetActivityScheduleReq) Reset() {
	*x = GetActivityScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityScheduleReq) ProtoMessage() {}

func (x *GetActivityScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityScheduleReq.ProtoReflect.Descriptor instead.
func (*GetActivityScheduleReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{0}
}

type ActivityScheduleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,13,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	IsOpen     bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	ActivityId uint32 `protobuf:"varint,14,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	EndTime    uint32 `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	BeginTime  uint32 `protobuf:"varint,10,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
}

func (x *ActivityScheduleInfo) Reset() {
	*x = ActivityScheduleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityScheduleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityScheduleInfo) ProtoMessage() {}

func (x *ActivityScheduleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityScheduleInfo.ProtoReflect.Descriptor instead.
func (*ActivityScheduleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{1}
}

func (x *ActivityScheduleInfo) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityScheduleInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *ActivityScheduleInfo) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityScheduleInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ActivityScheduleInfo) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

type GetActivityScheduleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityScheduleList []*ActivityScheduleInfo `protobuf:"bytes,9,rep,name=activity_schedule_list,json=activityScheduleList,proto3" json:"activity_schedule_list,omitempty"`
	Retcode              int32                   `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RemainFlySeaLampNum  uint32                  `protobuf:"varint,4,opt,name=remain_fly_sea_lamp_num,json=remainFlySeaLampNum,proto3" json:"remain_fly_sea_lamp_num,omitempty"`
}

func (x *GetActivityScheduleRsp) Reset() {
	*x = GetActivityScheduleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityScheduleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityScheduleRsp) ProtoMessage() {}

func (x *GetActivityScheduleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityScheduleRsp.ProtoReflect.Descriptor instead.
func (*GetActivityScheduleRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{2}
}

func (x *GetActivityScheduleRsp) GetActivityScheduleList() []*ActivityScheduleInfo {
	if x != nil {
		return x.ActivityScheduleList
	}
	return nil
}

func (x *GetActivityScheduleRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GetActivityScheduleRsp) GetRemainFlySeaLampNum() uint32 {
	if x != nil {
		return x.RemainFlySeaLampNum
	}
	return 0
}

type GetActivityInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityIdList []uint32 `protobuf:"varint,4,rep,packed,name=activity_id_list,json=activityIdList,proto3" json:"activity_id_list,omitempty"`
}

func (x *GetActivityInfoReq) Reset() {
	*x = GetActivityInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityInfoReq) ProtoMessage() {}

func (x *GetActivityInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityInfoReq.ProtoReflect.Descriptor instead.
func (*GetActivityInfoReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{3}
}

func (x *GetActivityInfoReq) GetActivityIdList() []uint32 {
	if x != nil {
		return x.ActivityIdList
	}
	return nil
}

type ActivityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished               bool                    `protobuf:"varint,6,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	ActivityType             uint32                  `protobuf:"varint,4,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	BeginTime                uint32                  `protobuf:"varint,8,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	TakenRewardList          []uint32                `protobuf:"varint,329,rep,packed,name=taken_reward_list,json=takenRewardList,proto3" json:"taken_reward_list,omitempty"`
	IsHidden                 bool                    `protobuf:"varint,919,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	IsQuickOpen              bool                    `protobuf:"varint,1449,opt,name=is_quick_open,json=isQuickOpen,proto3" json:"is_quick_open,omitempty"`
	MeetCondList             []uint32                `protobuf:"varint,10,rep,packed,name=meet_cond_list,json=meetCondList,proto3" json:"meet_cond_list,omitempty"`
	ActivityCoinMap          map[uint32]uint32       `protobuf:"bytes,682,rep,name=activity_coin_map,json=activityCoinMap,proto3" json:"activity_coin_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsBannerCleared          bool                    `protobuf:"varint,102,opt,name=is_banner_cleared,json=isBannerCleared,proto3" json:"is_banner_cleared,omitempty"`
	CurScore                 uint32                  `protobuf:"varint,1906,opt,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`
	FirstDayStartTime        uint32                  `protobuf:"varint,592,opt,name=first_day_start_time,json=firstDayStartTime,proto3" json:"first_day_start_time,omitempty"`
	ActivityId               uint32                  `protobuf:"varint,12,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	IsPlayOpenAnim           bool                    `protobuf:"varint,13,opt,name=is_play_open_anim,json=isPlayOpenAnim,proto3" json:"is_play_open_anim,omitempty"`
	EndTime                  uint32                  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ScoreLimit               uint32                  `protobuf:"varint,1958,opt,name=score_limit,json=scoreLimit,proto3" json:"score_limit,omitempty"`
	WishGiftNumMap           map[uint32]uint32       `protobuf:"bytes,1399,rep,name=wish_gift_num_map,json=wishGiftNumMap,proto3" json:"wish_gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SelectedAvatarRewardId   uint32                  `protobuf:"varint,1290,opt,name=selected_avatar_reward_id,json=selectedAvatarRewardId,proto3" json:"selected_avatar_reward_id,omitempty"`
	IsCommonContentClosed    bool                    `protobuf:"varint,1963,opt,name=is_common_content_closed,json=isCommonContentClosed,proto3" json:"is_common_content_closed,omitempty"`
	ExpireCondList           []uint32                `protobuf:"varint,3,rep,packed,name=expire_cond_list,json=expireCondList,proto3" json:"expire_cond_list,omitempty"`
	ActivityPushTipsDataList []*ActivityPushTipsData `protobuf:"bytes,864,rep,name=activity_push_tips_data_list,json=activityPushTipsDataList,proto3" json:"activity_push_tips_data_list,omitempty"`
	WatcherInfoList          []*ActivityWatcherInfo  `protobuf:"bytes,2,rep,name=watcher_info_list,json=watcherInfoList,proto3" json:"watcher_info_list,omitempty"`
	ScheduleId               uint32                  `protobuf:"varint,15,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	IsStarting               bool                    `protobuf:"varint,9,opt,name=is_starting,json=isStarting,proto3" json:"is_starting,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*ActivityInfo_SamLampInfo
	//	*ActivityInfo_CrucibleInfo
	//	*ActivityInfo_SalesmanInfo
	//	*ActivityInfo_TrialAvatarInfo
	//	*ActivityInfo_DeliveryInfo
	//	*ActivityInfo_AsterInfo
	//	*ActivityInfo_FlightInfo
	//	*ActivityInfo_DragonSpineInfo
	//	*ActivityInfo_EffigyInfo
	//	*ActivityInfo_TreasureMapInfo
	//	*ActivityInfo_BlessingInfo
	//	*ActivityInfo_SeaLampInfo
	//	*ActivityInfo_ExpeditionInfo
	//	*ActivityInfo_ArenaChallengeInfo
	//	*ActivityInfo_FleurFairInfo
	//	*ActivityInfo_WaterSpiritInfo
	//	*ActivityInfo_ChallnelerSlabInfo
	//	*ActivityInfo_MistTrialActivityInfo
	//	*ActivityInfo_HideAndSeekInfo
	//	*ActivityInfo_FindHilichurlInfo
	//	*ActivityInfo_SummerTimeInfo
	//	*ActivityInfo_BuoyantCombatInfo
	//	*ActivityInfo_EchoShellInfo
	//	*ActivityInfo_BounceConjuringInfo
	//	*ActivityInfo_BlitzRushInfo
	//	*ActivityInfo_ChessInfo
	//	*ActivityInfo_SumoInfo
	//	*ActivityInfo_MoonfinTrialInfo
	//	*ActivityInfo_LunaRiteInfo
	//	*ActivityInfo_PlantFlowerInfo
	//	*ActivityInfo_MusicGameInfo
	//	*ActivityInfo_RoguelikeDungoenInfo
	//	*ActivityInfo_DigInfo
	//	*ActivityInfo_HachiInfo
	//	*ActivityInfo_WinterCampInfo
	//	*ActivityInfo_PotionInfo
	//	*ActivityInfo_TanukiTravelActivityInfo
	//	*ActivityInfo_LanternRiteActivityInfo
	//	*ActivityInfo_MichiaeMatsuriInfo
	//	*ActivityInfo_BartenderInfo
	//	*ActivityInfo_UgcInfo
	//	*ActivityInfo_CrystalLinkInfo
	//	*ActivityInfo_IrodoriInfo
	//	*ActivityInfo_PhotoInfo
	//	*ActivityInfo_SpiceInfo
	//	*ActivityInfo_GachaInfo
	//	*ActivityInfo_LuminanceStoneChallengeInfo
	//	*ActivityInfo_RogueDiaryInfo
	//	*ActivityInfo_SummerTimeV2Info
	//	*ActivityInfo_IslandPartyInfo
	//	*ActivityInfo_GearInfo
	//	*ActivityInfo_GravenInnocenceInfo
	//	*ActivityInfo_InstableSprayInfo
	//	*ActivityInfo_MuqadasPotionInfo
	//	*ActivityInfo_TreasureSeelieInfo
	//	*ActivityInfo_RockBoardExploreInfo
	//	*ActivityInfo_VintageInfo
	//	*ActivityInfo_WindFieldInfo
	//	*ActivityInfo_FungusFighterInfo
	//	*ActivityInfo_CharAmusementInfo
	//	*ActivityInfo_EffigyChallengeInfo
	//	*ActivityInfo_CoinCollectInfo
	//	*ActivityInfo_BrickBreakerInfo
	//	*ActivityInfo_DuelHeartInfo
	//	*ActivityInfo_SeaLampV3Info
	//	*ActivityInfo_TeamChainInfo
	//	*ActivityInfo_ElectroherculesBattleInfo
	Detail isActivityInfo_Detail `protobuf_oneof:"detail"`
}

func (x *ActivityInfo) Reset() {
	*x = ActivityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityInfo) ProtoMessage() {}

func (x *ActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityInfo.ProtoReflect.Descriptor instead.
func (*ActivityInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{4}
}

func (x *ActivityInfo) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *ActivityInfo) GetActivityType() uint32 {
	if x != nil {
		return x.ActivityType
	}
	return 0
}

func (x *ActivityInfo) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *ActivityInfo) GetTakenRewardList() []uint32 {
	if x != nil {
		return x.TakenRewardList
	}
	return nil
}

func (x *ActivityInfo) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *ActivityInfo) GetIsQuickOpen() bool {
	if x != nil {
		return x.IsQuickOpen
	}
	return false
}

func (x *ActivityInfo) GetMeetCondList() []uint32 {
	if x != nil {
		return x.MeetCondList
	}
	return nil
}

func (x *ActivityInfo) GetActivityCoinMap() map[uint32]uint32 {
	if x != nil {
		return x.ActivityCoinMap
	}
	return nil
}

func (x *ActivityInfo) GetIsBannerCleared() bool {
	if x != nil {
		return x.IsBannerCleared
	}
	return false
}

func (x *ActivityInfo) GetCurScore() uint32 {
	if x != nil {
		return x.CurScore
	}
	return 0
}

func (x *ActivityInfo) GetFirstDayStartTime() uint32 {
	if x != nil {
		return x.FirstDayStartTime
	}
	return 0
}

func (x *ActivityInfo) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityInfo) GetIsPlayOpenAnim() bool {
	if x != nil {
		return x.IsPlayOpenAnim
	}
	return false
}

func (x *ActivityInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ActivityInfo) GetScoreLimit() uint32 {
	if x != nil {
		return x.ScoreLimit
	}
	return 0
}

func (x *ActivityInfo) GetWishGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.WishGiftNumMap
	}
	return nil
}

func (x *ActivityInfo) GetSelectedAvatarRewardId() uint32 {
	if x != nil {
		return x.SelectedAvatarRewardId
	}
	return 0
}

func (x *ActivityInfo) GetIsCommonContentClosed() bool {
	if x != nil {
		return x.IsCommonContentClosed
	}
	return false
}

func (x *ActivityInfo) GetExpireCondList() []uint32 {
	if x != nil {
		return x.ExpireCondList
	}
	return nil
}

func (x *ActivityInfo) GetActivityPushTipsDataList() []*ActivityPushTipsData {
	if x != nil {
		return x.ActivityPushTipsDataList
	}
	return nil
}

func (x *ActivityInfo) GetWatcherInfoList() []*ActivityWatcherInfo {
	if x != nil {
		return x.WatcherInfoList
	}
	return nil
}

func (x *ActivityInfo) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityInfo) GetIsStarting() bool {
	if x != nil {
		return x.IsStarting
	}
	return false
}

func (m *ActivityInfo) GetDetail() isActivityInfo_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *ActivityInfo) GetSamLampInfo() *SeaLampActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_SamLampInfo); ok {
		return x.SamLampInfo
	}
	return nil
}

func (x *ActivityInfo) GetCrucibleInfo() *CrucibleActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_CrucibleInfo); ok {
		return x.CrucibleInfo
	}
	return nil
}

func (x *ActivityInfo) GetSalesmanInfo() *SalesmanActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_SalesmanInfo); ok {
		return x.SalesmanInfo
	}
	return nil
}

func (x *ActivityInfo) GetTrialAvatarInfo() *TrialAvatarActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_TrialAvatarInfo); ok {
		return x.TrialAvatarInfo
	}
	return nil
}

func (x *ActivityInfo) GetDeliveryInfo() *DeliveryActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_DeliveryInfo); ok {
		return x.DeliveryInfo
	}
	return nil
}

func (x *ActivityInfo) GetAsterInfo() *AsterActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_AsterInfo); ok {
		return x.AsterInfo
	}
	return nil
}

func (x *ActivityInfo) GetFlightInfo() *FlightActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_FlightInfo); ok {
		return x.FlightInfo
	}
	return nil
}

func (x *ActivityInfo) GetDragonSpineInfo() *DragonSpineActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_DragonSpineInfo); ok {
		return x.DragonSpineInfo
	}
	return nil
}

func (x *ActivityInfo) GetEffigyInfo() *EffigyActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_EffigyInfo); ok {
		return x.EffigyInfo
	}
	return nil
}

func (x *ActivityInfo) GetTreasureMapInfo() *TreasureMapActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_TreasureMapInfo); ok {
		return x.TreasureMapInfo
	}
	return nil
}

func (x *ActivityInfo) GetBlessingInfo() *BlessingActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_BlessingInfo); ok {
		return x.BlessingInfo
	}
	return nil
}

func (x *ActivityInfo) GetSeaLampInfo() *SeaLampActivityInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_SeaLampInfo); ok {
		return x.SeaLampInfo
	}
	return nil
}

func (x *ActivityInfo) GetExpeditionInfo() *ExpeditionActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_ExpeditionInfo); ok {
		return x.ExpeditionInfo
	}
	return nil
}

func (x *ActivityInfo) GetArenaChallengeInfo() *ArenaChallengeActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_ArenaChallengeInfo); ok {
		return x.ArenaChallengeInfo
	}
	return nil
}

func (x *ActivityInfo) GetFleurFairInfo() *FleurFairActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_FleurFairInfo); ok {
		return x.FleurFairInfo
	}
	return nil
}

func (x *ActivityInfo) GetWaterSpiritInfo() *WaterSpiritActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_WaterSpiritInfo); ok {
		return x.WaterSpiritInfo
	}
	return nil
}

func (x *ActivityInfo) GetChallnelerSlabInfo() *ChannelerSlabActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_ChallnelerSlabInfo); ok {
		return x.ChallnelerSlabInfo
	}
	return nil
}

func (x *ActivityInfo) GetMistTrialActivityInfo() *MistTrialActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_MistTrialActivityInfo); ok {
		return x.MistTrialActivityInfo
	}
	return nil
}

func (x *ActivityInfo) GetHideAndSeekInfo() *HideAndSeekActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_HideAndSeekInfo); ok {
		return x.HideAndSeekInfo
	}
	return nil
}

func (x *ActivityInfo) GetFindHilichurlInfo() *FindHilichurlDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_FindHilichurlInfo); ok {
		return x.FindHilichurlInfo
	}
	return nil
}

func (x *ActivityInfo) GetSummerTimeInfo() *SummerTimeDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_SummerTimeInfo); ok {
		return x.SummerTimeInfo
	}
	return nil
}

func (x *ActivityInfo) GetBuoyantCombatInfo() *BuoyantCombatDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_BuoyantCombatInfo); ok {
		return x.BuoyantCombatInfo
	}
	return nil
}

func (x *ActivityInfo) GetEchoShellInfo() *EchoShellDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_EchoShellInfo); ok {
		return x.EchoShellInfo
	}
	return nil
}

func (x *ActivityInfo) GetBounceConjuringInfo() *BounceConjuringActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_BounceConjuringInfo); ok {
		return x.BounceConjuringInfo
	}
	return nil
}

func (x *ActivityInfo) GetBlitzRushInfo() *BlitzRushActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_BlitzRushInfo); ok {
		return x.BlitzRushInfo
	}
	return nil
}

func (x *ActivityInfo) GetChessInfo() *ChessActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_ChessInfo); ok {
		return x.ChessInfo
	}
	return nil
}

func (x *ActivityInfo) GetSumoInfo() *SumoActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_SumoInfo); ok {
		return x.SumoInfo
	}
	return nil
}

func (x *ActivityInfo) GetMoonfinTrialInfo() *MoonfinTrialActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_MoonfinTrialInfo); ok {
		return x.MoonfinTrialInfo
	}
	return nil
}

func (x *ActivityInfo) GetLunaRiteInfo() *LunaRiteDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_LunaRiteInfo); ok {
		return x.LunaRiteInfo
	}
	return nil
}

func (x *ActivityInfo) GetPlantFlowerInfo() *PlantFlowerActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_PlantFlowerInfo); ok {
		return x.PlantFlowerInfo
	}
	return nil
}

func (x *ActivityInfo) GetMusicGameInfo() *MusicGameActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_MusicGameInfo); ok {
		return x.MusicGameInfo
	}
	return nil
}

func (x *ActivityInfo) GetRoguelikeDungoenInfo() *RoguelikeDungeonActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_RoguelikeDungoenInfo); ok {
		return x.RoguelikeDungoenInfo
	}
	return nil
}

func (x *ActivityInfo) GetDigInfo() *DigActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_DigInfo); ok {
		return x.DigInfo
	}
	return nil
}

func (x *ActivityInfo) GetHachiInfo() *HachiActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_HachiInfo); ok {
		return x.HachiInfo
	}
	return nil
}

func (x *ActivityInfo) GetWinterCampInfo() *WinterCampActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_WinterCampInfo); ok {
		return x.WinterCampInfo
	}
	return nil
}

func (x *ActivityInfo) GetPotionInfo() *PotionActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_PotionInfo); ok {
		return x.PotionInfo
	}
	return nil
}

func (x *ActivityInfo) GetTanukiTravelActivityInfo() *TanukiTravelActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_TanukiTravelActivityInfo); ok {
		return x.TanukiTravelActivityInfo
	}
	return nil
}

func (x *ActivityInfo) GetLanternRiteActivityInfo() *LanternRiteActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_LanternRiteActivityInfo); ok {
		return x.LanternRiteActivityInfo
	}
	return nil
}

func (x *ActivityInfo) GetMichiaeMatsuriInfo() *MichiaeMatsuriActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_MichiaeMatsuriInfo); ok {
		return x.MichiaeMatsuriInfo
	}
	return nil
}

func (x *ActivityInfo) GetBartenderInfo() *BartenderActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_BartenderInfo); ok {
		return x.BartenderInfo
	}
	return nil
}

func (x *ActivityInfo) GetUgcInfo() *UgcActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_UgcInfo); ok {
		return x.UgcInfo
	}
	return nil
}

func (x *ActivityInfo) GetCrystalLinkInfo() *CrystalLinkActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_CrystalLinkInfo); ok {
		return x.CrystalLinkInfo
	}
	return nil
}

func (x *ActivityInfo) GetIrodoriInfo() *IrodoriActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_IrodoriInfo); ok {
		return x.IrodoriInfo
	}
	return nil
}

func (x *ActivityInfo) GetPhotoInfo() *PhotoActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_PhotoInfo); ok {
		return x.PhotoInfo
	}
	return nil
}

func (x *ActivityInfo) GetSpiceInfo() *SpiceActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_SpiceInfo); ok {
		return x.SpiceInfo
	}
	return nil
}

func (x *ActivityInfo) GetGachaInfo() *GachaActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_GachaInfo); ok {
		return x.GachaInfo
	}
	return nil
}

func (x *ActivityInfo) GetLuminanceStoneChallengeInfo() *LuminanceStoneChallengeActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_LuminanceStoneChallengeInfo); ok {
		return x.LuminanceStoneChallengeInfo
	}
	return nil
}

func (x *ActivityInfo) GetRogueDiaryInfo() *RogueDiaryActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_RogueDiaryInfo); ok {
		return x.RogueDiaryInfo
	}
	return nil
}

func (x *ActivityInfo) GetSummerTimeV2Info() *SummerTimeV2DetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_SummerTimeV2Info); ok {
		return x.SummerTimeV2Info
	}
	return nil
}

func (x *ActivityInfo) GetIslandPartyInfo() *IslandPartyDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_IslandPartyInfo); ok {
		return x.IslandPartyInfo
	}
	return nil
}

func (x *ActivityInfo) GetGearInfo() *GearActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_GearInfo); ok {
		return x.GearInfo
	}
	return nil
}

func (x *ActivityInfo) GetGravenInnocenceInfo() *GravenInnocenceDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_GravenInnocenceInfo); ok {
		return x.GravenInnocenceInfo
	}
	return nil
}

func (x *ActivityInfo) GetInstableSprayInfo() *InstableSprayDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_InstableSprayInfo); ok {
		return x.InstableSprayInfo
	}
	return nil
}

func (x *ActivityInfo) GetMuqadasPotionInfo() *MuqadasPotionActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_MuqadasPotionInfo); ok {
		return x.MuqadasPotionInfo
	}
	return nil
}

func (x *ActivityInfo) GetTreasureSeelieInfo() *TreasureSeelieActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_TreasureSeelieInfo); ok {
		return x.TreasureSeelieInfo
	}
	return nil
}

func (x *ActivityInfo) GetRockBoardExploreInfo() *RockBoardExploreDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_RockBoardExploreInfo); ok {
		return x.RockBoardExploreInfo
	}
	return nil
}

func (x *ActivityInfo) GetVintageInfo() *VintageActivityDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_VintageInfo); ok {
		return x.VintageInfo
	}
	return nil
}

func (x *ActivityInfo) GetWindFieldInfo() *WindFieldDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_WindFieldInfo); ok {
		return x.WindFieldInfo
	}
	return nil
}

func (x *ActivityInfo) GetFungusFighterInfo() *FungusFighterDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_FungusFighterInfo); ok {
		return x.FungusFighterInfo
	}
	return nil
}

func (x *ActivityInfo) GetCharAmusementInfo() *CharAmusementDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_CharAmusementInfo); ok {
		return x.CharAmusementInfo
	}
	return nil
}

func (x *ActivityInfo) GetEffigyChallengeInfo() *EffigyChallengeV2DetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_EffigyChallengeInfo); ok {
		return x.EffigyChallengeInfo
	}
	return nil
}

func (x *ActivityInfo) GetCoinCollectInfo() *CoinCollectDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_CoinCollectInfo); ok {
		return x.CoinCollectInfo
	}
	return nil
}

func (x *ActivityInfo) GetBrickBreakerInfo() *BrickBreakerDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_BrickBreakerInfo); ok {
		return x.BrickBreakerInfo
	}
	return nil
}

func (x *ActivityInfo) GetDuelHeartInfo() *DuelHeartDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_DuelHeartInfo); ok {
		return x.DuelHeartInfo
	}
	return nil
}

func (x *ActivityInfo) GetSeaLampV3Info() *SeaLampV3DetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_SeaLampV3Info); ok {
		return x.SeaLampV3Info
	}
	return nil
}

func (x *ActivityInfo) GetTeamChainInfo() *TeamChainDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_TeamChainInfo); ok {
		return x.TeamChainInfo
	}
	return nil
}

func (x *ActivityInfo) GetElectroherculesBattleInfo() *ElectroherculesBattleDetailInfo {
	if x, ok := x.GetDetail().(*ActivityInfo_ElectroherculesBattleInfo); ok {
		return x.ElectroherculesBattleInfo
	}
	return nil
}

type isActivityInfo_Detail interface {
	isActivityInfo_Detail()
}

type ActivityInfo_SamLampInfo struct {
	SamLampInfo *SeaLampActivityDetailInfo `protobuf:"bytes,7,opt,name=sam_lamp_info,json=samLampInfo,proto3,oneof"`
}

type ActivityInfo_CrucibleInfo struct {
	CrucibleInfo *CrucibleActivityDetailInfo `protobuf:"bytes,14,opt,name=crucible_info,json=crucibleInfo,proto3,oneof"`
}

type ActivityInfo_SalesmanInfo struct {
	SalesmanInfo *SalesmanActivityDetailInfo `protobuf:"bytes,11,opt,name=salesman_info,json=salesmanInfo,proto3,oneof"`
}

type ActivityInfo_TrialAvatarInfo struct {
	TrialAvatarInfo *TrialAvatarActivityDetailInfo `protobuf:"bytes,1,opt,name=trial_avatar_info,json=trialAvatarInfo,proto3,oneof"`
}

type ActivityInfo_DeliveryInfo struct {
	DeliveryInfo *DeliveryActivityDetailInfo `protobuf:"bytes,1092,opt,name=delivery_info,json=deliveryInfo,proto3,oneof"`
}

type ActivityInfo_AsterInfo struct {
	AsterInfo *AsterActivityDetailInfo `protobuf:"bytes,557,opt,name=aster_info,json=asterInfo,proto3,oneof"`
}

type ActivityInfo_FlightInfo struct {
	FlightInfo *FlightActivityDetailInfo `protobuf:"bytes,1365,opt,name=flight_info,json=flightInfo,proto3,oneof"`
}

type ActivityInfo_DragonSpineInfo struct {
	DragonSpineInfo *DragonSpineActivityDetailInfo `protobuf:"bytes,1727,opt,name=dragon_spine_info,json=dragonSpineInfo,proto3,oneof"`
}

type ActivityInfo_EffigyInfo struct {
	EffigyInfo *EffigyActivityDetailInfo `protobuf:"bytes,391,opt,name=effigy_info,json=effigyInfo,proto3,oneof"`
}

type ActivityInfo_TreasureMapInfo struct {
	TreasureMapInfo *TreasureMapActivityDetailInfo `protobuf:"bytes,1114,opt,name=treasure_map_info,json=treasureMapInfo,proto3,oneof"`
}

type ActivityInfo_BlessingInfo struct {
	BlessingInfo *BlessingActivityDetailInfo `protobuf:"bytes,1869,opt,name=blessing_info,json=blessingInfo,proto3,oneof"`
}

type ActivityInfo_SeaLampInfo struct {
	SeaLampInfo *SeaLampActivityInfo `protobuf:"bytes,494,opt,name=sea_lamp_info,json=seaLampInfo,proto3,oneof"`
}

type ActivityInfo_ExpeditionInfo struct {
	ExpeditionInfo *ExpeditionActivityDetailInfo `protobuf:"bytes,202,opt,name=expedition_info,json=expeditionInfo,proto3,oneof"`
}

type ActivityInfo_ArenaChallengeInfo struct {
	ArenaChallengeInfo *ArenaChallengeActivityDetailInfo `protobuf:"bytes,859,opt,name=arena_challenge_info,json=arenaChallengeInfo,proto3,oneof"`
}

type ActivityInfo_FleurFairInfo struct {
	FleurFairInfo *FleurFairActivityDetailInfo `protobuf:"bytes,857,opt,name=fleur_fair_info,json=fleurFairInfo,proto3,oneof"`
}

type ActivityInfo_WaterSpiritInfo struct {
	WaterSpiritInfo *WaterSpiritActivityDetailInfo `protobuf:"bytes,1675,opt,name=water_spirit_info,json=waterSpiritInfo,proto3,oneof"`
}

type ActivityInfo_ChallnelerSlabInfo struct {
	ChallnelerSlabInfo *ChannelerSlabActivityDetailInfo `protobuf:"bytes,1015,opt,name=challneler_slab_info,json=challnelerSlabInfo,proto3,oneof"`
}

type ActivityInfo_MistTrialActivityInfo struct {
	MistTrialActivityInfo *MistTrialActivityDetailInfo `protobuf:"bytes,156,opt,name=mist_trial_activity_info,json=mistTrialActivityInfo,proto3,oneof"`
}

type ActivityInfo_HideAndSeekInfo struct {
	HideAndSeekInfo *HideAndSeekActivityDetailInfo `protobuf:"bytes,427,opt,name=hide_and_seek_info,json=hideAndSeekInfo,proto3,oneof"`
}

type ActivityInfo_FindHilichurlInfo struct {
	FindHilichurlInfo *FindHilichurlDetailInfo `protobuf:"bytes,1411,opt,name=find_hilichurl_info,json=findHilichurlInfo,proto3,oneof"`
}

type ActivityInfo_SummerTimeInfo struct {
	SummerTimeInfo *SummerTimeDetailInfo `protobuf:"bytes,1372,opt,name=summer_time_info,json=summerTimeInfo,proto3,oneof"`
}

type ActivityInfo_BuoyantCombatInfo struct {
	BuoyantCombatInfo *BuoyantCombatDetailInfo `protobuf:"bytes,1842,opt,name=buoyant_combat_info,json=buoyantCombatInfo,proto3,oneof"`
}

type ActivityInfo_EchoShellInfo struct {
	EchoShellInfo *EchoShellDetailInfo `protobuf:"bytes,1113,opt,name=echo_shell_info,json=echoShellInfo,proto3,oneof"`
}

type ActivityInfo_BounceConjuringInfo struct {
	BounceConjuringInfo *BounceConjuringActivityDetailInfo `protobuf:"bytes,767,opt,name=bounce_conjuring_info,json=bounceConjuringInfo,proto3,oneof"`
}

type ActivityInfo_BlitzRushInfo struct {
	BlitzRushInfo *BlitzRushActivityDetailInfo `protobuf:"bytes,794,opt,name=blitz_rush_info,json=blitzRushInfo,proto3,oneof"`
}

type ActivityInfo_ChessInfo struct {
	ChessInfo *ChessActivityDetailInfo `protobuf:"bytes,927,opt,name=chess_info,json=chessInfo,proto3,oneof"`
}

type ActivityInfo_SumoInfo struct {
	SumoInfo *SumoActivityDetailInfo `protobuf:"bytes,1261,opt,name=sumo_info,json=sumoInfo,proto3,oneof"`
}

type ActivityInfo_MoonfinTrialInfo struct {
	MoonfinTrialInfo *MoonfinTrialActivityDetailInfo `protobuf:"bytes,1588,opt,name=moonfin_trial_info,json=moonfinTrialInfo,proto3,oneof"`
}

type ActivityInfo_LunaRiteInfo struct {
	LunaRiteInfo *LunaRiteDetailInfo `protobuf:"bytes,814,opt,name=luna_rite_info,json=lunaRiteInfo,proto3,oneof"`
}

type ActivityInfo_PlantFlowerInfo struct {
	PlantFlowerInfo *PlantFlowerActivityDetailInfo `protobuf:"bytes,54,opt,name=plant_flower_info,json=plantFlowerInfo,proto3,oneof"`
}

type ActivityInfo_MusicGameInfo struct {
	MusicGameInfo *MusicGameActivityDetailInfo `protobuf:"bytes,460,opt,name=music_game_info,json=musicGameInfo,proto3,oneof"`
}

type ActivityInfo_RoguelikeDungoenInfo struct {
	RoguelikeDungoenInfo *RoguelikeDungeonActivityDetailInfo `protobuf:"bytes,219,opt,name=roguelike_dungoen_info,json=roguelikeDungoenInfo,proto3,oneof"`
}

type ActivityInfo_DigInfo struct {
	DigInfo *DigActivityDetailInfo `protobuf:"bytes,403,opt,name=dig_info,json=digInfo,proto3,oneof"`
}

type ActivityInfo_HachiInfo struct {
	HachiInfo *HachiActivityDetailInfo `protobuf:"bytes,491,opt,name=hachi_info,json=hachiInfo,proto3,oneof"`
}

type ActivityInfo_WinterCampInfo struct {
	WinterCampInfo *WinterCampActivityDetailInfo `protobuf:"bytes,1083,opt,name=winter_camp_info,json=winterCampInfo,proto3,oneof"`
}

type ActivityInfo_PotionInfo struct {
	PotionInfo *PotionActivityDetailInfo `protobuf:"bytes,1273,opt,name=potion_info,json=potionInfo,proto3,oneof"`
}

type ActivityInfo_TanukiTravelActivityInfo struct {
	TanukiTravelActivityInfo *TanukiTravelActivityDetailInfo `protobuf:"bytes,1796,opt,name=tanuki_travel_activity_info,json=tanukiTravelActivityInfo,proto3,oneof"`
}

type ActivityInfo_LanternRiteActivityInfo struct {
	LanternRiteActivityInfo *LanternRiteActivityDetailInfo `protobuf:"bytes,1876,opt,name=lantern_rite_activity_info,json=lanternRiteActivityInfo,proto3,oneof"`
}

type ActivityInfo_MichiaeMatsuriInfo struct {
	MichiaeMatsuriInfo *MichiaeMatsuriActivityDetailInfo `protobuf:"bytes,194,opt,name=michiae_matsuri_info,json=michiaeMatsuriInfo,proto3,oneof"`
}

type ActivityInfo_BartenderInfo struct {
	BartenderInfo *BartenderActivityDetailInfo `protobuf:"bytes,1725,opt,name=bartender_info,json=bartenderInfo,proto3,oneof"`
}

type ActivityInfo_UgcInfo struct {
	UgcInfo *UgcActivityDetailInfo `protobuf:"bytes,703,opt,name=ugc_info,json=ugcInfo,proto3,oneof"`
}

type ActivityInfo_CrystalLinkInfo struct {
	CrystalLinkInfo *CrystalLinkActivityDetailInfo `protobuf:"bytes,1226,opt,name=crystal_link_info,json=crystalLinkInfo,proto3,oneof"`
}

type ActivityInfo_IrodoriInfo struct {
	IrodoriInfo *IrodoriActivityDetailInfo `protobuf:"bytes,750,opt,name=irodori_info,json=irodoriInfo,proto3,oneof"`
}

type ActivityInfo_PhotoInfo struct {
	PhotoInfo *PhotoActivityDetailInfo `protobuf:"bytes,328,opt,name=photo_info,json=photoInfo,proto3,oneof"`
}

type ActivityInfo_SpiceInfo struct {
	SpiceInfo *SpiceActivityDetailInfo `protobuf:"bytes,1891,opt,name=spice_info,json=spiceInfo,proto3,oneof"`
}

type ActivityInfo_GachaInfo struct {
	GachaInfo *GachaActivityDetailInfo `protobuf:"bytes,825,opt,name=gacha_info,json=gachaInfo,proto3,oneof"`
}

type ActivityInfo_LuminanceStoneChallengeInfo struct {
	LuminanceStoneChallengeInfo *LuminanceStoneChallengeActivityDetailInfo `protobuf:"bytes,1308,opt,name=luminance_stone_challenge_info,json=luminanceStoneChallengeInfo,proto3,oneof"`
}

type ActivityInfo_RogueDiaryInfo struct {
	RogueDiaryInfo *RogueDiaryActivityDetailInfo `protobuf:"bytes,812,opt,name=rogue_diary_info,json=rogueDiaryInfo,proto3,oneof"`
}

type ActivityInfo_SummerTimeV2Info struct {
	SummerTimeV2Info *SummerTimeV2DetailInfo `protobuf:"bytes,622,opt,name=summer_time_v2_info,json=summerTimeV2Info,proto3,oneof"`
}

type ActivityInfo_IslandPartyInfo struct {
	IslandPartyInfo *IslandPartyDetailInfo `protobuf:"bytes,1885,opt,name=island_party_info,json=islandPartyInfo,proto3,oneof"`
}

type ActivityInfo_GearInfo struct {
	GearInfo *GearActivityDetailInfo `protobuf:"bytes,722,opt,name=gear_info,json=gearInfo,proto3,oneof"`
}

type ActivityInfo_GravenInnocenceInfo struct {
	GravenInnocenceInfo *GravenInnocenceDetailInfo `protobuf:"bytes,1911,opt,name=graven_innocence_info,json=gravenInnocenceInfo,proto3,oneof"`
}

type ActivityInfo_InstableSprayInfo struct {
	InstableSprayInfo *InstableSprayDetailInfo `protobuf:"bytes,1043,opt,name=instable_spray_info,json=instableSprayInfo,proto3,oneof"`
}

type ActivityInfo_MuqadasPotionInfo struct {
	MuqadasPotionInfo *MuqadasPotionActivityDetailInfo `protobuf:"bytes,1157,opt,name=muqadas_potion_info,json=muqadasPotionInfo,proto3,oneof"`
}

type ActivityInfo_TreasureSeelieInfo struct {
	TreasureSeelieInfo *TreasureSeelieActivityDetailInfo `protobuf:"bytes,966,opt,name=treasure_seelie_info,json=treasureSeelieInfo,proto3,oneof"`
}

type ActivityInfo_RockBoardExploreInfo struct {
	RockBoardExploreInfo *RockBoardExploreDetailInfo `protobuf:"bytes,1078,opt,name=rock_board_explore_info,json=rockBoardExploreInfo,proto3,oneof"`
}

type ActivityInfo_VintageInfo struct {
	VintageInfo *VintageActivityDetailInfo `protobuf:"bytes,445,opt,name=vintage_info,json=vintageInfo,proto3,oneof"`
}

type ActivityInfo_WindFieldInfo struct {
	WindFieldInfo *WindFieldDetailInfo `protobuf:"bytes,352,opt,name=wind_field_info,json=windFieldInfo,proto3,oneof"`
}

type ActivityInfo_FungusFighterInfo struct {
	FungusFighterInfo *FungusFighterDetailInfo `protobuf:"bytes,490,opt,name=fungus_fighter_info,json=fungusFighterInfo,proto3,oneof"`
}

type ActivityInfo_CharAmusementInfo struct {
	CharAmusementInfo *CharAmusementDetailInfo `protobuf:"bytes,1496,opt,name=char_amusement_info,json=charAmusementInfo,proto3,oneof"`
}

type ActivityInfo_EffigyChallengeInfo struct {
	EffigyChallengeInfo *EffigyChallengeV2DetailInfo `protobuf:"bytes,1025,opt,name=effigy_challenge_info,json=effigyChallengeInfo,proto3,oneof"`
}

type ActivityInfo_CoinCollectInfo struct {
	CoinCollectInfo *CoinCollectDetailInfo `protobuf:"bytes,1679,opt,name=coin_collect_info,json=coinCollectInfo,proto3,oneof"`
}

type ActivityInfo_BrickBreakerInfo struct {
	BrickBreakerInfo *BrickBreakerDetailInfo `protobuf:"bytes,1369,opt,name=brick_breaker_info,json=brickBreakerInfo,proto3,oneof"`
}

type ActivityInfo_DuelHeartInfo struct {
	DuelHeartInfo *DuelHeartDetailInfo `protobuf:"bytes,1173,opt,name=duel_heart_info,json=duelHeartInfo,proto3,oneof"`
}

type ActivityInfo_SeaLampV3Info struct {
	SeaLampV3Info *SeaLampV3DetailInfo `protobuf:"bytes,251,opt,name=sea_lamp_v3_info,json=seaLampV3Info,proto3,oneof"`
}

type ActivityInfo_TeamChainInfo struct {
	TeamChainInfo *TeamChainDetailInfo `protobuf:"bytes,1547,opt,name=team_chain_info,json=teamChainInfo,proto3,oneof"`
}

type ActivityInfo_ElectroherculesBattleInfo struct {
	ElectroherculesBattleInfo *ElectroherculesBattleDetailInfo `protobuf:"bytes,1630,opt,name=electrohercules_battle_info,json=electroherculesBattleInfo,proto3,oneof"`
}

func (*ActivityInfo_SamLampInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_CrucibleInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_SalesmanInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_TrialAvatarInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_DeliveryInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_AsterInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_FlightInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_DragonSpineInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_EffigyInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_TreasureMapInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_BlessingInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_SeaLampInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_ExpeditionInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_ArenaChallengeInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_FleurFairInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_WaterSpiritInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_ChallnelerSlabInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_MistTrialActivityInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_HideAndSeekInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_FindHilichurlInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_SummerTimeInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_BuoyantCombatInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_EchoShellInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_BounceConjuringInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_BlitzRushInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_ChessInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_SumoInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_MoonfinTrialInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_LunaRiteInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_PlantFlowerInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_MusicGameInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_RoguelikeDungoenInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_DigInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_HachiInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_WinterCampInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_PotionInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_TanukiTravelActivityInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_LanternRiteActivityInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_MichiaeMatsuriInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_BartenderInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_UgcInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_CrystalLinkInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_IrodoriInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_PhotoInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_SpiceInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_GachaInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_LuminanceStoneChallengeInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_RogueDiaryInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_SummerTimeV2Info) isActivityInfo_Detail() {}

func (*ActivityInfo_IslandPartyInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_GearInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_GravenInnocenceInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_InstableSprayInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_MuqadasPotionInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_TreasureSeelieInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_RockBoardExploreInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_VintageInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_WindFieldInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_FungusFighterInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_CharAmusementInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_EffigyChallengeInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_CoinCollectInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_BrickBreakerInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_DuelHeartInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_SeaLampV3Info) isActivityInfo_Detail() {}

func (*ActivityInfo_TeamChainInfo) isActivityInfo_Detail() {}

func (*ActivityInfo_ElectroherculesBattleInfo) isActivityInfo_Detail() {}

type GetActivityInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode                             int32           `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ActivityInfoList                    []*ActivityInfo `protobuf:"bytes,5,rep,name=activity_info_list,json=activityInfoList,proto3" json:"activity_info_list,omitempty"`
	ActivatedSaleIdList                 []uint32        `protobuf:"varint,11,rep,packed,name=activated_sale_id_list,json=activatedSaleIdList,proto3" json:"activated_sale_id_list,omitempty"`
	DisableTransferPointInteractionList []*Uint32Pair   `protobuf:"bytes,10,rep,name=disable_transfer_point_interaction_list,json=disableTransferPointInteractionList,proto3" json:"disable_transfer_point_interaction_list,omitempty"`
}

func (x *GetActivityInfoRsp) Reset() {
	*x = GetActivityInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityInfoRsp) ProtoMessage() {}

func (x *GetActivityInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityInfoRsp.ProtoReflect.Descriptor instead.
func (*GetActivityInfoRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{5}
}

func (x *GetActivityInfoRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GetActivityInfoRsp) GetActivityInfoList() []*ActivityInfo {
	if x != nil {
		return x.ActivityInfoList
	}
	return nil
}

func (x *GetActivityInfoRsp) GetActivatedSaleIdList() []uint32 {
	if x != nil {
		return x.ActivatedSaleIdList
	}
	return nil
}

func (x *GetActivityInfoRsp) GetDisableTransferPointInteractionList() []*Uint32Pair {
	if x != nil {
		return x.DisableTransferPointInteractionList
	}
	return nil
}

type ActivityPlayOpenAnimNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32 `protobuf:"varint,8,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *ActivityPlayOpenAnimNotify) Reset() {
	*x = ActivityPlayOpenAnimNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityPlayOpenAnimNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityPlayOpenAnimNotify) ProtoMessage() {}

func (x *ActivityPlayOpenAnimNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityPlayOpenAnimNotify.ProtoReflect.Descriptor instead.
func (*ActivityPlayOpenAnimNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{6}
}

func (x *ActivityPlayOpenAnimNotify) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type ActivityInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityInfo *ActivityInfo `protobuf:"bytes,9,opt,name=activity_info,json=activityInfo,proto3" json:"activity_info,omitempty"`
}

func (x *ActivityInfoNotify) Reset() {
	*x = ActivityInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityInfoNotify) ProtoMessage() {}

func (x *ActivityInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityInfoNotify.ProtoReflect.Descriptor instead.
func (*ActivityInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{7}
}

func (x *ActivityInfoNotify) GetActivityInfo() *ActivityInfo {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

type ActivityScheduleInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityScheduleList []*ActivityScheduleInfo `protobuf:"bytes,12,rep,name=activity_schedule_list,json=activityScheduleList,proto3" json:"activity_schedule_list,omitempty"`
	RemainFlySeaLampNum  uint32                  `protobuf:"varint,6,opt,name=remain_fly_sea_lamp_num,json=remainFlySeaLampNum,proto3" json:"remain_fly_sea_lamp_num,omitempty"`
}

func (x *ActivityScheduleInfoNotify) Reset() {
	*x = ActivityScheduleInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityScheduleInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityScheduleInfoNotify) ProtoMessage() {}

func (x *ActivityScheduleInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityScheduleInfoNotify.ProtoReflect.Descriptor instead.
func (*ActivityScheduleInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{8}
}

func (x *ActivityScheduleInfoNotify) GetActivityScheduleList() []*ActivityScheduleInfo {
	if x != nil {
		return x.ActivityScheduleList
	}
	return nil
}

func (x *ActivityScheduleInfoNotify) GetRemainFlySeaLampNum() uint32 {
	if x != nil {
		return x.RemainFlySeaLampNum
	}
	return 0
}

type ActivityWatcherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTakenReward bool   `protobuf:"varint,8,opt,name=is_taken_reward,json=isTakenReward,proto3" json:"is_taken_reward,omitempty"`
	CurProgress   uint32 `protobuf:"varint,2,opt,name=cur_progress,json=curProgress,proto3" json:"cur_progress,omitempty"`
	TotalProgress uint32 `protobuf:"varint,4,opt,name=total_progress,json=totalProgress,proto3" json:"total_progress,omitempty"`
	WatcherId     uint32 `protobuf:"varint,5,opt,name=watcher_id,json=watcherId,proto3" json:"watcher_id,omitempty"`
}

func (x *ActivityWatcherInfo) Reset() {
	*x = ActivityWatcherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityWatcherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityWatcherInfo) ProtoMessage() {}

func (x *ActivityWatcherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityWatcherInfo.ProtoReflect.Descriptor instead.
func (*ActivityWatcherInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{9}
}

func (x *ActivityWatcherInfo) GetIsTakenReward() bool {
	if x != nil {
		return x.IsTakenReward
	}
	return false
}

func (x *ActivityWatcherInfo) GetCurProgress() uint32 {
	if x != nil {
		return x.CurProgress
	}
	return 0
}

func (x *ActivityWatcherInfo) GetTotalProgress() uint32 {
	if x != nil {
		return x.TotalProgress
	}
	return 0
}

func (x *ActivityWatcherInfo) GetWatcherId() uint32 {
	if x != nil {
		return x.WatcherId
	}
	return 0
}

type ActivityTakeWatcherRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32 `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	WatcherId  uint32 `protobuf:"varint,14,opt,name=watcher_id,json=watcherId,proto3" json:"watcher_id,omitempty"`
}

func (x *ActivityTakeWatcherRewardReq) Reset() {
	*x = ActivityTakeWatcherRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTakeWatcherRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTakeWatcherRewardReq) ProtoMessage() {}

func (x *ActivityTakeWatcherRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTakeWatcherRewardReq.ProtoReflect.Descriptor instead.
func (*ActivityTakeWatcherRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{10}
}

func (x *ActivityTakeWatcherRewardReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityTakeWatcherRewardReq) GetWatcherId() uint32 {
	if x != nil {
		return x.WatcherId
	}
	return 0
}

type ActivityTakeWatcherRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32 `protobuf:"varint,14,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	WatcherId  uint32 `protobuf:"varint,7,opt,name=watcher_id,json=watcherId,proto3" json:"watcher_id,omitempty"`
	Retcode    int32  `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ActivityTakeWatcherRewardRsp) Reset() {
	*x = ActivityTakeWatcherRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTakeWatcherRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTakeWatcherRewardRsp) ProtoMessage() {}

func (x *ActivityTakeWatcherRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTakeWatcherRewardRsp.ProtoReflect.Descriptor instead.
func (*ActivityTakeWatcherRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{11}
}

func (x *ActivityTakeWatcherRewardRsp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityTakeWatcherRewardRsp) GetWatcherId() uint32 {
	if x != nil {
		return x.WatcherId
	}
	return 0
}

func (x *ActivityTakeWatcherRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ActivityUpdateWatcherNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatcherInfo *ActivityWatcherInfo `protobuf:"bytes,2,opt,name=watcher_info,json=watcherInfo,proto3" json:"watcher_info,omitempty"`
	ActivityId  uint32               `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *ActivityUpdateWatcherNotify) Reset() {
	*x = ActivityUpdateWatcherNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityUpdateWatcherNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityUpdateWatcherNotify) ProtoMessage() {}

func (x *ActivityUpdateWatcherNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityUpdateWatcherNotify.ProtoReflect.Descriptor instead.
func (*ActivityUpdateWatcherNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{12}
}

func (x *ActivityUpdateWatcherNotify) GetWatcherInfo() *ActivityWatcherInfo {
	if x != nil {
		return x.WatcherInfo
	}
	return nil
}

func (x *ActivityUpdateWatcherNotify) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type ActivitySelectAvatarCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32 `protobuf:"varint,15,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	RewardId   uint32 `protobuf:"varint,10,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (x *ActivitySelectAvatarCardReq) Reset() {
	*x = ActivitySelectAvatarCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivitySelectAvatarCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivitySelectAvatarCardReq) ProtoMessage() {}

func (x *ActivitySelectAvatarCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivitySelectAvatarCardReq.ProtoReflect.Descriptor instead.
func (*ActivitySelectAvatarCardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{13}
}

func (x *ActivitySelectAvatarCardReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivitySelectAvatarCardReq) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

type ActivitySelectAvatarCardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32 `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Retcode    int32  `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RewardId   uint32 `protobuf:"varint,9,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (x *ActivitySelectAvatarCardRsp) Reset() {
	*x = ActivitySelectAvatarCardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivitySelectAvatarCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivitySelectAvatarCardRsp) ProtoMessage() {}

func (x *ActivitySelectAvatarCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivitySelectAvatarCardRsp.ProtoReflect.Descriptor instead.
func (*ActivitySelectAvatarCardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{14}
}

func (x *ActivitySelectAvatarCardRsp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivitySelectAvatarCardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ActivitySelectAvatarCardRsp) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

type ActivityCoinInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId      uint32            `protobuf:"varint,8,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	ActivityId      uint32            `protobuf:"varint,10,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityCoinMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=activity_coin_map,json=activityCoinMap,proto3" json:"activity_coin_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ActivityCoinInfoNotify) Reset() {
	*x = ActivityCoinInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityCoinInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityCoinInfoNotify) ProtoMessage() {}

func (x *ActivityCoinInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityCoinInfoNotify.ProtoReflect.Descriptor instead.
func (*ActivityCoinInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{15}
}

func (x *ActivityCoinInfoNotify) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityCoinInfoNotify) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityCoinInfoNotify) GetActivityCoinMap() map[uint32]uint32 {
	if x != nil {
		return x.ActivityCoinMap
	}
	return nil
}

type SeaLampActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseId                     uint32   `protobuf:"varint,14,opt,name=phase_id,json=phaseId,proto3" json:"phase_id,omitempty"`
	TakenPhaseRewardList        []uint32 `protobuf:"varint,1,rep,packed,name=taken_phase_reward_list,json=takenPhaseRewardList,proto3" json:"taken_phase_reward_list,omitempty"`
	TakenContributionRewardList []uint32 `protobuf:"varint,7,rep,packed,name=taken_contribution_reward_list,json=takenContributionRewardList,proto3" json:"taken_contribution_reward_list,omitempty"`
	Progress                    uint32   `protobuf:"varint,8,opt,name=progress,proto3" json:"progress,omitempty"`
	Contribution                uint32   `protobuf:"varint,15,opt,name=contribution,proto3" json:"contribution,omitempty"`
	Factor                      uint32   `protobuf:"varint,13,opt,name=factor,proto3" json:"factor,omitempty"`
	Days                        uint32   `protobuf:"varint,4,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *SeaLampActivityDetailInfo) Reset() {
	*x = SeaLampActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampActivityDetailInfo) ProtoMessage() {}

func (x *SeaLampActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*SeaLampActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{16}
}

func (x *SeaLampActivityDetailInfo) GetPhaseId() uint32 {
	if x != nil {
		return x.PhaseId
	}
	return 0
}

func (x *SeaLampActivityDetailInfo) GetTakenPhaseRewardList() []uint32 {
	if x != nil {
		return x.TakenPhaseRewardList
	}
	return nil
}

func (x *SeaLampActivityDetailInfo) GetTakenContributionRewardList() []uint32 {
	if x != nil {
		return x.TakenContributionRewardList
	}
	return nil
}

func (x *SeaLampActivityDetailInfo) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SeaLampActivityDetailInfo) GetContribution() uint32 {
	if x != nil {
		return x.Contribution
	}
	return 0
}

func (x *SeaLampActivityDetailInfo) GetFactor() uint32 {
	if x != nil {
		return x.Factor
	}
	return 0
}

func (x *SeaLampActivityDetailInfo) GetDays() uint32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type SeaLampFlyLampReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId  uint32  `protobuf:"varint,9,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Param   int32   `protobuf:"varint,10,opt,name=param,proto3" json:"param,omitempty"`
	Pos     *Vector `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	ItemNum uint32  `protobuf:"varint,5,opt,name=item_num,json=itemNum,proto3" json:"item_num,omitempty"`
}

func (x *SeaLampFlyLampReq) Reset() {
	*x = SeaLampFlyLampReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampFlyLampReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampFlyLampReq) ProtoMessage() {}

func (x *SeaLampFlyLampReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampFlyLampReq.ProtoReflect.Descriptor instead.
func (*SeaLampFlyLampReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{17}
}

func (x *SeaLampFlyLampReq) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SeaLampFlyLampReq) GetParam() int32 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *SeaLampFlyLampReq) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SeaLampFlyLampReq) GetItemNum() uint32 {
	if x != nil {
		return x.ItemNum
	}
	return 0
}

type SeaLampFlyLampRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemNum uint32 `protobuf:"varint,9,opt,name=item_num,json=itemNum,proto3" json:"item_num,omitempty"`
	ItemId  uint32 `protobuf:"varint,15,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Retcode int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SeaLampFlyLampRsp) Reset() {
	*x = SeaLampFlyLampRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampFlyLampRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampFlyLampRsp) ProtoMessage() {}

func (x *SeaLampFlyLampRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampFlyLampRsp.ProtoReflect.Descriptor instead.
func (*SeaLampFlyLampRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{18}
}

func (x *SeaLampFlyLampRsp) GetItemNum() uint32 {
	if x != nil {
		return x.ItemNum
	}
	return 0
}

func (x *SeaLampFlyLampRsp) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SeaLampFlyLampRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type SeaLampTakeContributionRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32 `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ConfigId   uint32 `protobuf:"varint,10,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (x *SeaLampTakeContributionRewardReq) Reset() {
	*x = SeaLampTakeContributionRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampTakeContributionRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampTakeContributionRewardReq) ProtoMessage() {}

func (x *SeaLampTakeContributionRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampTakeContributionRewardReq.ProtoReflect.Descriptor instead.
func (*SeaLampTakeContributionRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{19}
}

func (x *SeaLampTakeContributionRewardReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *SeaLampTakeContributionRewardReq) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

type SeaLampTakeContributionRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId uint32 `protobuf:"varint,9,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Retcode  int32  `protobuf:"varint,7,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SeaLampTakeContributionRewardRsp) Reset() {
	*x = SeaLampTakeContributionRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampTakeContributionRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampTakeContributionRewardRsp) ProtoMessage() {}

func (x *SeaLampTakeContributionRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampTakeContributionRewardRsp.ProtoReflect.Descriptor instead.
func (*SeaLampTakeContributionRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{20}
}

func (x *SeaLampTakeContributionRewardRsp) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *SeaLampTakeContributionRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type SeaLampTakePhaseRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseId    uint32 `protobuf:"varint,12,opt,name=phase_id,json=phaseId,proto3" json:"phase_id,omitempty"`
	ActivityId uint32 `protobuf:"varint,11,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *SeaLampTakePhaseRewardReq) Reset() {
	*x = SeaLampTakePhaseRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampTakePhaseRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampTakePhaseRewardReq) ProtoMessage() {}

func (x *SeaLampTakePhaseRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampTakePhaseRewardReq.ProtoReflect.Descriptor instead.
func (*SeaLampTakePhaseRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{21}
}

func (x *SeaLampTakePhaseRewardReq) GetPhaseId() uint32 {
	if x != nil {
		return x.PhaseId
	}
	return 0
}

func (x *SeaLampTakePhaseRewardReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type SeaLampTakePhaseRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseId uint32 `protobuf:"varint,2,opt,name=phase_id,json=phaseId,proto3" json:"phase_id,omitempty"`
	Retcode int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SeaLampTakePhaseRewardRsp) Reset() {
	*x = SeaLampTakePhaseRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampTakePhaseRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampTakePhaseRewardRsp) ProtoMessage() {}

func (x *SeaLampTakePhaseRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampTakePhaseRewardRsp.ProtoReflect.Descriptor instead.
func (*SeaLampTakePhaseRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{22}
}

func (x *SeaLampTakePhaseRewardRsp) GetPhaseId() uint32 {
	if x != nil {
		return x.PhaseId
	}
	return 0
}

func (x *SeaLampTakePhaseRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type SeaLampContributeItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32       `protobuf:"varint,8,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ItemList   []*ItemParam `protobuf:"bytes,1,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *SeaLampContributeItemReq) Reset() {
	*x = SeaLampContributeItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampContributeItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampContributeItemReq) ProtoMessage() {}

func (x *SeaLampContributeItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampContributeItemReq.ProtoReflect.Descriptor instead.
func (*SeaLampContributeItemReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{23}
}

func (x *SeaLampContributeItemReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *SeaLampContributeItemReq) GetItemList() []*ItemParam {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type SeaLampContributeItemRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddContribution   uint32 `protobuf:"varint,7,opt,name=add_contribution,json=addContribution,proto3" json:"add_contribution,omitempty"`
	AddProgress       uint32 `protobuf:"varint,1,opt,name=add_progress,json=addProgress,proto3" json:"add_progress,omitempty"`
	TotalContribution uint32 `protobuf:"varint,14,opt,name=total_contribution,json=totalContribution,proto3" json:"total_contribution,omitempty"`
	Retcode           int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SeaLampContributeItemRsp) Reset() {
	*x = SeaLampContributeItemRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampContributeItemRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampContributeItemRsp) ProtoMessage() {}

func (x *SeaLampContributeItemRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampContributeItemRsp.ProtoReflect.Descriptor instead.
func (*SeaLampContributeItemRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{24}
}

func (x *SeaLampContributeItemRsp) GetAddContribution() uint32 {
	if x != nil {
		return x.AddContribution
	}
	return 0
}

func (x *SeaLampContributeItemRsp) GetAddProgress() uint32 {
	if x != nil {
		return x.AddProgress
	}
	return 0
}

func (x *SeaLampContributeItemRsp) GetTotalContribution() uint32 {
	if x != nil {
		return x.TotalContribution
	}
	return 0
}

func (x *SeaLampContributeItemRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type SeaLampSectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionId uint32 `protobuf:"varint,11,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`
}

func (x *SeaLampSectionInfo) Reset() {
	*x = SeaLampSectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampSectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampSectionInfo) ProtoMessage() {}

func (x *SeaLampSectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampSectionInfo.ProtoReflect.Descriptor instead.
func (*SeaLampSectionInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{25}
}

func (x *SeaLampSectionInfo) GetSectionId() uint32 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

type SeaLampActivityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMechanicusOpen         bool                  `protobuf:"varint,14,opt,name=is_mechanicus_open,json=isMechanicusOpen,proto3" json:"is_mechanicus_open,omitempty"`
	DayIndex                 uint32                `protobuf:"varint,1,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	SectionInfoList          []*SeaLampSectionInfo `protobuf:"bytes,6,rep,name=section_info_list,json=sectionInfoList,proto3" json:"section_info_list,omitempty"`
	Popularity               uint32                `protobuf:"varint,10,opt,name=popularity,proto3" json:"popularity,omitempty"`
	SeaLampCoin              uint32                `protobuf:"varint,15,opt,name=sea_lamp_coin,json=seaLampCoin,proto3" json:"sea_lamp_coin,omitempty"`
	FirstDayStartTime        uint32                `protobuf:"varint,11,opt,name=first_day_start_time,json=firstDayStartTime,proto3" json:"first_day_start_time,omitempty"`
	MechanicusId             uint32                `protobuf:"varint,9,opt,name=mechanicus_id,json=mechanicusId,proto3" json:"mechanicus_id,omitempty"`
	IsMechanicusFeatureClose bool                  `protobuf:"varint,12,opt,name=is_mechanicus_feature_close,json=isMechanicusFeatureClose,proto3" json:"is_mechanicus_feature_close,omitempty"`
	IsContentClosed          bool                  `protobuf:"varint,5,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
}

func (x *SeaLampActivityInfo) Reset() {
	*x = SeaLampActivityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampActivityInfo) ProtoMessage() {}

func (x *SeaLampActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampActivityInfo.ProtoReflect.Descriptor instead.
func (*SeaLampActivityInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{26}
}

func (x *SeaLampActivityInfo) GetIsMechanicusOpen() bool {
	if x != nil {
		return x.IsMechanicusOpen
	}
	return false
}

func (x *SeaLampActivityInfo) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *SeaLampActivityInfo) GetSectionInfoList() []*SeaLampSectionInfo {
	if x != nil {
		return x.SectionInfoList
	}
	return nil
}

func (x *SeaLampActivityInfo) GetPopularity() uint32 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

func (x *SeaLampActivityInfo) GetSeaLampCoin() uint32 {
	if x != nil {
		return x.SeaLampCoin
	}
	return 0
}

func (x *SeaLampActivityInfo) GetFirstDayStartTime() uint32 {
	if x != nil {
		return x.FirstDayStartTime
	}
	return 0
}

func (x *SeaLampActivityInfo) GetMechanicusId() uint32 {
	if x != nil {
		return x.MechanicusId
	}
	return 0
}

func (x *SeaLampActivityInfo) GetIsMechanicusFeatureClose() bool {
	if x != nil {
		return x.IsMechanicusFeatureClose
	}
	return false
}

func (x *SeaLampActivityInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

type SeaLampFlyLampNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos     *Vector `protobuf:"bytes,11,opt,name=pos,proto3" json:"pos,omitempty"`
	ItemNum uint32  `protobuf:"varint,10,opt,name=item_num,json=itemNum,proto3" json:"item_num,omitempty"`
	ItemId  uint32  `protobuf:"varint,7,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Param   int32   `protobuf:"varint,5,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *SeaLampFlyLampNotify) Reset() {
	*x = SeaLampFlyLampNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampFlyLampNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampFlyLampNotify) ProtoMessage() {}

func (x *SeaLampFlyLampNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampFlyLampNotify.ProtoReflect.Descriptor instead.
func (*SeaLampFlyLampNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{27}
}

func (x *SeaLampFlyLampNotify) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SeaLampFlyLampNotify) GetItemNum() uint32 {
	if x != nil {
		return x.ItemNum
	}
	return 0
}

func (x *SeaLampFlyLampNotify) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SeaLampFlyLampNotify) GetParam() int32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type SeaLampCoinNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeaLampCoin uint32 `protobuf:"varint,8,opt,name=sea_lamp_coin,json=seaLampCoin,proto3" json:"sea_lamp_coin,omitempty"`
}

func (x *SeaLampCoinNotify) Reset() {
	*x = SeaLampCoinNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampCoinNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampCoinNotify) ProtoMessage() {}

func (x *SeaLampCoinNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampCoinNotify.ProtoReflect.Descriptor instead.
func (*SeaLampCoinNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{28}
}

func (x *SeaLampCoinNotify) GetSeaLampCoin() uint32 {
	if x != nil {
		return x.SeaLampCoin
	}
	return 0
}

type SeaLampPopularityNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Popularity uint32 `protobuf:"varint,4,opt,name=popularity,proto3" json:"popularity,omitempty"`
}

func (x *SeaLampPopularityNotify) Reset() {
	*x = SeaLampPopularityNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampPopularityNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampPopularityNotify) ProtoMessage() {}

func (x *SeaLampPopularityNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampPopularityNotify.ProtoReflect.Descriptor instead.
func (*SeaLampPopularityNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{29}
}

func (x *SeaLampPopularityNotify) GetPopularity() uint32 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

type AnnounceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountDownText                    string `protobuf:"bytes,9,opt,name=count_down_text,json=countDownText,proto3" json:"count_down_text,omitempty"`
	CenterSystemText                 string `protobuf:"bytes,8,opt,name=center_system_text,json=centerSystemText,proto3" json:"center_system_text,omitempty"`
	CountDownFrequency               uint32 `protobuf:"varint,1,opt,name=count_down_frequency,json=countDownFrequency,proto3" json:"count_down_frequency,omitempty"`
	ConfigId                         uint32 `protobuf:"varint,7,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	BeginTime                        uint32 `protobuf:"varint,4,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	CenterSystemFrequency            uint32 `protobuf:"varint,11,opt,name=center_system_frequency,json=centerSystemFrequency,proto3" json:"center_system_frequency,omitempty"`
	DungeonConfirmText               string `protobuf:"bytes,2,opt,name=dungeon_confirm_text,json=dungeonConfirmText,proto3" json:"dungeon_confirm_text,omitempty"`
	IsCenterSystemLast_5EveryMinutes bool   `protobuf:"varint,14,opt,name=is_center_system_last_5_every_minutes,json=isCenterSystemLast5EveryMinutes,proto3" json:"is_center_system_last_5_every_minutes,omitempty"`
	EndTime                          uint32 `protobuf:"varint,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *AnnounceData) Reset() {
	*x = AnnounceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnounceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceData) ProtoMessage() {}

func (x *AnnounceData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceData.ProtoReflect.Descriptor instead.
func (*AnnounceData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{30}
}

func (x *AnnounceData) GetCountDownText() string {
	if x != nil {
		return x.CountDownText
	}
	return ""
}

func (x *AnnounceData) GetCenterSystemText() string {
	if x != nil {
		return x.CenterSystemText
	}
	return ""
}

func (x *AnnounceData) GetCountDownFrequency() uint32 {
	if x != nil {
		return x.CountDownFrequency
	}
	return 0
}

func (x *AnnounceData) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *AnnounceData) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *AnnounceData) GetCenterSystemFrequency() uint32 {
	if x != nil {
		return x.CenterSystemFrequency
	}
	return 0
}

func (x *AnnounceData) GetDungeonConfirmText() string {
	if x != nil {
		return x.DungeonConfirmText
	}
	return ""
}

func (x *AnnounceData) GetIsCenterSystemLast_5EveryMinutes() bool {
	if x != nil {
		return x.IsCenterSystemLast_5EveryMinutes
	}
	return false
}

func (x *AnnounceData) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type LoadActivityTerrainNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32 `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *LoadActivityTerrainNotify) Reset() {
	*x = LoadActivityTerrainNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadActivityTerrainNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadActivityTerrainNotify) ProtoMessage() {}

func (x *LoadActivityTerrainNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadActivityTerrainNotify.ProtoReflect.Descriptor instead.
func (*LoadActivityTerrainNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{31}
}

func (x *LoadActivityTerrainNotify) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type ServerAnnounceNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnounceDataList []*AnnounceData `protobuf:"bytes,11,rep,name=announce_data_list,json=announceDataList,proto3" json:"announce_data_list,omitempty"`
}

func (x *ServerAnnounceNotify) Reset() {
	*x = ServerAnnounceNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerAnnounceNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerAnnounceNotify) ProtoMessage() {}

func (x *ServerAnnounceNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerAnnounceNotify.ProtoReflect.Descriptor instead.
func (*ServerAnnounceNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{32}
}

func (x *ServerAnnounceNotify) GetAnnounceDataList() []*AnnounceData {
	if x != nil {
		return x.AnnounceDataList
	}
	return nil
}

type ServerAnnounceRevokeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigIdList []uint32 `protobuf:"varint,15,rep,packed,name=config_id_list,json=configIdList,proto3" json:"config_id_list,omitempty"`
}

func (x *ServerAnnounceRevokeNotify) Reset() {
	*x = ServerAnnounceRevokeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerAnnounceRevokeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerAnnounceRevokeNotify) ProtoMessage() {}

func (x *ServerAnnounceRevokeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerAnnounceRevokeNotify.ProtoReflect.Descriptor instead.
func (*ServerAnnounceRevokeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{33}
}

func (x *ServerAnnounceRevokeNotify) GetConfigIdList() []uint32 {
	if x != nil {
		return x.ConfigIdList
	}
	return nil
}

type ActivityBannerNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	ActivityId uint32 `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *ActivityBannerNotify) Reset() {
	*x = ActivityBannerNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBannerNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBannerNotify) ProtoMessage() {}

func (x *ActivityBannerNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBannerNotify.ProtoReflect.Descriptor instead.
func (*ActivityBannerNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{34}
}

func (x *ActivityBannerNotify) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityBannerNotify) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type ActivityBannerClearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,15,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	ActivityId uint32 `protobuf:"varint,12,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *ActivityBannerClearReq) Reset() {
	*x = ActivityBannerClearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBannerClearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBannerClearReq) ProtoMessage() {}

func (x *ActivityBannerClearReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBannerClearReq.ProtoReflect.Descriptor instead.
func (*ActivityBannerClearReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{35}
}

func (x *ActivityBannerClearReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityBannerClearReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type ActivityBannerClearRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32 `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Retcode    int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ScheduleId uint32 `protobuf:"varint,11,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *ActivityBannerClearRsp) Reset() {
	*x = ActivityBannerClearRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBannerClearRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBannerClearRsp) ProtoMessage() {}

func (x *ActivityBannerClearRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBannerClearRsp.ProtoReflect.Descriptor instead.
func (*ActivityBannerClearRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{36}
}

func (x *ActivityBannerClearRsp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityBannerClearRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ActivityBannerClearRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type SalesmanActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecialRewardPreviewId  uint32             `protobuf:"varint,3,opt,name=special_reward_preview_id,json=specialRewardPreviewId,proto3" json:"special_reward_preview_id,omitempty"`
	Status                  SalesmanStatusType `protobuf:"varint,4,opt,name=status,proto3,enum=proto.SalesmanStatusType" json:"status,omitempty"`
	LastDeliverTime         uint32             `protobuf:"varint,2,opt,name=last_deliver_time,json=lastDeliverTime,proto3" json:"last_deliver_time,omitempty"`
	SelectedRewardIdMap     map[uint32]uint32  `protobuf:"bytes,5,rep,name=selected_reward_id_map,json=selectedRewardIdMap,proto3" json:"selected_reward_id_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DeliverCount            uint32             `protobuf:"varint,11,opt,name=deliver_count,json=deliverCount,proto3" json:"deliver_count,omitempty"`
	IsHasTakenSpecialReward bool               `protobuf:"varint,7,opt,name=is_has_taken_special_reward,json=isHasTakenSpecialReward,proto3" json:"is_has_taken_special_reward,omitempty"`
	DayIndex                uint32             `protobuf:"varint,12,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	CondDayCount            uint32             `protobuf:"varint,6,opt,name=cond_day_count,json=condDayCount,proto3" json:"cond_day_count,omitempty"`
	DayRewardId             uint32             `protobuf:"varint,9,opt,name=day_reward_id,json=dayRewardId,proto3" json:"day_reward_id,omitempty"`
	IsTodayHasDelivered     bool               `protobuf:"varint,13,opt,name=is_today_has_delivered,json=isTodayHasDelivered,proto3" json:"is_today_has_delivered,omitempty"`
}

func (x *SalesmanActivityDetailInfo) Reset() {
	*x = SalesmanActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesmanActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesmanActivityDetailInfo) ProtoMessage() {}

func (x *SalesmanActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesmanActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*SalesmanActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{37}
}

func (x *SalesmanActivityDetailInfo) GetSpecialRewardPreviewId() uint32 {
	if x != nil {
		return x.SpecialRewardPreviewId
	}
	return 0
}

func (x *SalesmanActivityDetailInfo) GetStatus() SalesmanStatusType {
	if x != nil {
		return x.Status
	}
	return SalesmanStatusType_SALESMAN_STATUS_NONE
}

func (x *SalesmanActivityDetailInfo) GetLastDeliverTime() uint32 {
	if x != nil {
		return x.LastDeliverTime
	}
	return 0
}

func (x *SalesmanActivityDetailInfo) GetSelectedRewardIdMap() map[uint32]uint32 {
	if x != nil {
		return x.SelectedRewardIdMap
	}
	return nil
}

func (x *SalesmanActivityDetailInfo) GetDeliverCount() uint32 {
	if x != nil {
		return x.DeliverCount
	}
	return 0
}

func (x *SalesmanActivityDetailInfo) GetIsHasTakenSpecialReward() bool {
	if x != nil {
		return x.IsHasTakenSpecialReward
	}
	return false
}

func (x *SalesmanActivityDetailInfo) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *SalesmanActivityDetailInfo) GetCondDayCount() uint32 {
	if x != nil {
		return x.CondDayCount
	}
	return 0
}

func (x *SalesmanActivityDetailInfo) GetDayRewardId() uint32 {
	if x != nil {
		return x.DayRewardId
	}
	return 0
}

func (x *SalesmanActivityDetailInfo) GetIsTodayHasDelivered() bool {
	if x != nil {
		return x.IsTodayHasDelivered
	}
	return false
}

type SalesmanDeliverItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *SalesmanDeliverItemReq) Reset() {
	*x = SalesmanDeliverItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesmanDeliverItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesmanDeliverItemReq) ProtoMessage() {}

func (x *SalesmanDeliverItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesmanDeliverItemReq.ProtoReflect.Descriptor instead.
func (*SalesmanDeliverItemReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{38}
}

func (x *SalesmanDeliverItemReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type SalesmanDeliverItemRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,9,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode    int32  `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SalesmanDeliverItemRsp) Reset() {
	*x = SalesmanDeliverItemRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesmanDeliverItemRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesmanDeliverItemRsp) ProtoMessage() {}

func (x *SalesmanDeliverItemRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesmanDeliverItemRsp.ProtoReflect.Descriptor instead.
func (*SalesmanDeliverItemRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{39}
}

func (x *SalesmanDeliverItemRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *SalesmanDeliverItemRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type SalesmanTakeRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position   uint32 `protobuf:"varint,8,opt,name=position,proto3" json:"position,omitempty"`
	ScheduleId uint32 `protobuf:"varint,7,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *SalesmanTakeRewardReq) Reset() {
	*x = SalesmanTakeRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesmanTakeRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesmanTakeRewardReq) ProtoMessage() {}

func (x *SalesmanTakeRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesmanTakeRewardReq.ProtoReflect.Descriptor instead.
func (*SalesmanTakeRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{40}
}

func (x *SalesmanTakeRewardReq) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SalesmanTakeRewardReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type SalesmanTakeRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position   uint32 `protobuf:"varint,13,opt,name=position,proto3" json:"position,omitempty"`
	ScheduleId uint32 `protobuf:"varint,7,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	RewardId   uint32 `protobuf:"varint,9,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Retcode    int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SalesmanTakeRewardRsp) Reset() {
	*x = SalesmanTakeRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesmanTakeRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesmanTakeRewardRsp) ProtoMessage() {}

func (x *SalesmanTakeRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesmanTakeRewardRsp.ProtoReflect.Descriptor instead.
func (*SalesmanTakeRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{41}
}

func (x *SalesmanTakeRewardRsp) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SalesmanTakeRewardRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *SalesmanTakeRewardRsp) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *SalesmanTakeRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ActivityCondStateChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivatedSaleIdList                 []uint32      `protobuf:"varint,9,rep,packed,name=activated_sale_id_list,json=activatedSaleIdList,proto3" json:"activated_sale_id_list,omitempty"`
	ActivityId                          uint32        `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ScheduleId                          uint32        `protobuf:"varint,5,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	ExpireCondList                      []uint32      `protobuf:"varint,11,rep,packed,name=expire_cond_list,json=expireCondList,proto3" json:"expire_cond_list,omitempty"`
	DisableTransferPointInteractionList []*Uint32Pair `protobuf:"bytes,12,rep,name=disable_transfer_point_interaction_list,json=disableTransferPointInteractionList,proto3" json:"disable_transfer_point_interaction_list,omitempty"`
	MeetCondList                        []uint32      `protobuf:"varint,1,rep,packed,name=meet_cond_list,json=meetCondList,proto3" json:"meet_cond_list,omitempty"`
}

func (x *ActivityCondStateChangeNotify) Reset() {
	*x = ActivityCondStateChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityCondStateChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityCondStateChangeNotify) ProtoMessage() {}

func (x *ActivityCondStateChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityCondStateChangeNotify.ProtoReflect.Descriptor instead.
func (*ActivityCondStateChangeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{42}
}

func (x *ActivityCondStateChangeNotify) GetActivatedSaleIdList() []uint32 {
	if x != nil {
		return x.ActivatedSaleIdList
	}
	return nil
}

func (x *ActivityCondStateChangeNotify) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityCondStateChangeNotify) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityCondStateChangeNotify) GetExpireCondList() []uint32 {
	if x != nil {
		return x.ExpireCondList
	}
	return nil
}

func (x *ActivityCondStateChangeNotify) GetDisableTransferPointInteractionList() []*Uint32Pair {
	if x != nil {
		return x.DisableTransferPointInteractionList
	}
	return nil
}

func (x *ActivityCondStateChangeNotify) GetMeetCondList() []uint32 {
	if x != nil {
		return x.MeetCondList
	}
	return nil
}

type SalesmanTakeSpecialRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,13,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *SalesmanTakeSpecialRewardReq) Reset() {
	*x = SalesmanTakeSpecialRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesmanTakeSpecialRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesmanTakeSpecialRewardReq) ProtoMessage() {}

func (x *SalesmanTakeSpecialRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesmanTakeSpecialRewardReq.ProtoReflect.Descriptor instead.
func (*SalesmanTakeSpecialRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{43}
}

func (x *SalesmanTakeSpecialRewardReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type SalesmanTakeSpecialRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode    int32  `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ScheduleId uint32 `protobuf:"varint,5,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *SalesmanTakeSpecialRewardRsp) Reset() {
	*x = SalesmanTakeSpecialRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesmanTakeSpecialRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesmanTakeSpecialRewardRsp) ProtoMessage() {}

func (x *SalesmanTakeSpecialRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesmanTakeSpecialRewardRsp.ProtoReflect.Descriptor instead.
func (*SalesmanTakeSpecialRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{44}
}

func (x *SalesmanTakeSpecialRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *SalesmanTakeSpecialRewardRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type GetAuthSalesmanInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,8,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *GetAuthSalesmanInfoReq) Reset() {
	*x = GetAuthSalesmanInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthSalesmanInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthSalesmanInfoReq) ProtoMessage() {}

func (x *GetAuthSalesmanInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthSalesmanInfoReq.ProtoReflect.Descriptor instead.
func (*GetAuthSalesmanInfoReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{45}
}

func (x *GetAuthSalesmanInfoReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type GetAuthSalesmanInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayRewardId uint32 `protobuf:"varint,5,opt,name=day_reward_id,json=dayRewardId,proto3" json:"day_reward_id,omitempty"`
	Retcode     int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ScheduleId  uint32 `protobuf:"varint,11,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *GetAuthSalesmanInfoRsp) Reset() {
	*x = GetAuthSalesmanInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthSalesmanInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthSalesmanInfoRsp) ProtoMessage() {}

func (x *GetAuthSalesmanInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthSalesmanInfoRsp.ProtoReflect.Descriptor instead.
func (*GetAuthSalesmanInfoRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{46}
}

func (x *GetAuthSalesmanInfoRsp) GetDayRewardId() uint32 {
	if x != nil {
		return x.DayRewardId
	}
	return 0
}

func (x *GetAuthSalesmanInfoRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GetAuthSalesmanInfoRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type TrialAvatarActivityRewardDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassedDungeon      bool   `protobuf:"varint,2,opt,name=passed_dungeon,json=passedDungeon,proto3" json:"passed_dungeon,omitempty"`
	TrialAvatarIndexId uint32 `protobuf:"varint,4,opt,name=trial_avatar_index_id,json=trialAvatarIndexId,proto3" json:"trial_avatar_index_id,omitempty"`
	ReceivedReward     bool   `protobuf:"varint,5,opt,name=received_reward,json=receivedReward,proto3" json:"received_reward,omitempty"`
	RewardId           uint32 `protobuf:"varint,7,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (x *TrialAvatarActivityRewardDetailInfo) Reset() {
	*x = TrialAvatarActivityRewardDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialAvatarActivityRewardDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialAvatarActivityRewardDetailInfo) ProtoMessage() {}

func (x *TrialAvatarActivityRewardDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialAvatarActivityRewardDetailInfo.ProtoReflect.Descriptor instead.
func (*TrialAvatarActivityRewardDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{47}
}

func (x *TrialAvatarActivityRewardDetailInfo) GetPassedDungeon() bool {
	if x != nil {
		return x.PassedDungeon
	}
	return false
}

func (x *TrialAvatarActivityRewardDetailInfo) GetTrialAvatarIndexId() uint32 {
	if x != nil {
		return x.TrialAvatarIndexId
	}
	return 0
}

func (x *TrialAvatarActivityRewardDetailInfo) GetReceivedReward() bool {
	if x != nil {
		return x.ReceivedReward
	}
	return false
}

func (x *TrialAvatarActivityRewardDetailInfo) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

type TrialAvatarActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardInfoList []*TrialAvatarActivityRewardDetailInfo `protobuf:"bytes,13,rep,name=reward_info_list,json=rewardInfoList,proto3" json:"reward_info_list,omitempty"`
}

func (x *TrialAvatarActivityDetailInfo) Reset() {
	*x = TrialAvatarActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialAvatarActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialAvatarActivityDetailInfo) ProtoMessage() {}

func (x *TrialAvatarActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialAvatarActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*TrialAvatarActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{48}
}

func (x *TrialAvatarActivityDetailInfo) GetRewardInfoList() []*TrialAvatarActivityRewardDetailInfo {
	if x != nil {
		return x.RewardInfoList
	}
	return nil
}

type EnterTrialAvatarActivityDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterPointId       uint32 `protobuf:"varint,10,opt,name=enter_point_id,json=enterPointId,proto3" json:"enter_point_id,omitempty"`
	TrialAvatarIndexId uint32 `protobuf:"varint,5,opt,name=trial_avatar_index_id,json=trialAvatarIndexId,proto3" json:"trial_avatar_index_id,omitempty"`
	ActivityId         uint32 `protobuf:"varint,14,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *EnterTrialAvatarActivityDungeonReq) Reset() {
	*x = EnterTrialAvatarActivityDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterTrialAvatarActivityDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterTrialAvatarActivityDungeonReq) ProtoMessage() {}

func (x *EnterTrialAvatarActivityDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterTrialAvatarActivityDungeonReq.ProtoReflect.Descriptor instead.
func (*EnterTrialAvatarActivityDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{49}
}

func (x *EnterTrialAvatarActivityDungeonReq) GetEnterPointId() uint32 {
	if x != nil {
		return x.EnterPointId
	}
	return 0
}

func (x *EnterTrialAvatarActivityDungeonReq) GetTrialAvatarIndexId() uint32 {
	if x != nil {
		return x.TrialAvatarIndexId
	}
	return 0
}

func (x *EnterTrialAvatarActivityDungeonReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type EnterTrialAvatarActivityDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode            int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	TrialAvatarIndexId uint32 `protobuf:"varint,13,opt,name=trial_avatar_index_id,json=trialAvatarIndexId,proto3" json:"trial_avatar_index_id,omitempty"`
	ActivityId         uint32 `protobuf:"varint,10,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *EnterTrialAvatarActivityDungeonRsp) Reset() {
	*x = EnterTrialAvatarActivityDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterTrialAvatarActivityDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterTrialAvatarActivityDungeonRsp) ProtoMessage() {}

func (x *EnterTrialAvatarActivityDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterTrialAvatarActivityDungeonRsp.ProtoReflect.Descriptor instead.
func (*EnterTrialAvatarActivityDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{50}
}

func (x *EnterTrialAvatarActivityDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *EnterTrialAvatarActivityDungeonRsp) GetTrialAvatarIndexId() uint32 {
	if x != nil {
		return x.TrialAvatarIndexId
	}
	return 0
}

func (x *EnterTrialAvatarActivityDungeonRsp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type ReceivedTrialAvatarActivityRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialAvatarIndexId uint32 `protobuf:"varint,4,opt,name=trial_avatar_index_id,json=trialAvatarIndexId,proto3" json:"trial_avatar_index_id,omitempty"`
}

func (x *ReceivedTrialAvatarActivityRewardReq) Reset() {
	*x = ReceivedTrialAvatarActivityRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedTrialAvatarActivityRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedTrialAvatarActivityRewardReq) ProtoMessage() {}

func (x *ReceivedTrialAvatarActivityRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedTrialAvatarActivityRewardReq.ProtoReflect.Descriptor instead.
func (*ReceivedTrialAvatarActivityRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{51}
}

func (x *ReceivedTrialAvatarActivityRewardReq) GetTrialAvatarIndexId() uint32 {
	if x != nil {
		return x.TrialAvatarIndexId
	}
	return 0
}

type ReceivedTrialAvatarActivityRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId         uint32 `protobuf:"varint,13,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Retcode            int32  `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
	TrialAvatarIndexId uint32 `protobuf:"varint,9,opt,name=trial_avatar_index_id,json=trialAvatarIndexId,proto3" json:"trial_avatar_index_id,omitempty"`
}

func (x *ReceivedTrialAvatarActivityRewardRsp) Reset() {
	*x = ReceivedTrialAvatarActivityRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedTrialAvatarActivityRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedTrialAvatarActivityRewardRsp) ProtoMessage() {}

func (x *ReceivedTrialAvatarActivityRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedTrialAvatarActivityRewardRsp.ProtoReflect.Descriptor instead.
func (*ReceivedTrialAvatarActivityRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{52}
}

func (x *ReceivedTrialAvatarActivityRewardRsp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ReceivedTrialAvatarActivityRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ReceivedTrialAvatarActivityRewardRsp) GetTrialAvatarIndexId() uint32 {
	if x != nil {
		return x.TrialAvatarIndexId
	}
	return 0
}

type TrialAvatarFirstPassDungeonNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialAvatarIndexId uint32 `protobuf:"varint,10,opt,name=trial_avatar_index_id,json=trialAvatarIndexId,proto3" json:"trial_avatar_index_id,omitempty"`
}

func (x *TrialAvatarFirstPassDungeonNotify) Reset() {
	*x = TrialAvatarFirstPassDungeonNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialAvatarFirstPassDungeonNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialAvatarFirstPassDungeonNotify) ProtoMessage() {}

func (x *TrialAvatarFirstPassDungeonNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialAvatarFirstPassDungeonNotify.ProtoReflect.Descriptor instead.
func (*TrialAvatarFirstPassDungeonNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{53}
}

func (x *TrialAvatarFirstPassDungeonNotify) GetTrialAvatarIndexId() uint32 {
	if x != nil {
		return x.TrialAvatarIndexId
	}
	return 0
}

type TrialAvatarInDungeonIndexNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialAvatarIndexId uint32 `protobuf:"varint,14,opt,name=trial_avatar_index_id,json=trialAvatarIndexId,proto3" json:"trial_avatar_index_id,omitempty"`
}

func (x *TrialAvatarInDungeonIndexNotify) Reset() {
	*x = TrialAvatarInDungeonIndexNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialAvatarInDungeonIndexNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialAvatarInDungeonIndexNotify) ProtoMessage() {}

func (x *TrialAvatarInDungeonIndexNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialAvatarInDungeonIndexNotify.ProtoReflect.Descriptor instead.
func (*TrialAvatarInDungeonIndexNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{54}
}

func (x *TrialAvatarInDungeonIndexNotify) GetTrialAvatarIndexId() uint32 {
	if x != nil {
		return x.TrialAvatarIndexId
	}
	return 0
}

type CrucibleBattleUidInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfilePicture *ProfilePicture `protobuf:"bytes,15,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	Uid            uint32          `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname       string          `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	OnlineId       string          `protobuf:"bytes,13,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
	Icon           uint32          `protobuf:"varint,11,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *CrucibleBattleUidInfo) Reset() {
	*x = CrucibleBattleUidInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrucibleBattleUidInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrucibleBattleUidInfo) ProtoMessage() {}

func (x *CrucibleBattleUidInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrucibleBattleUidInfo.ProtoReflect.Descriptor instead.
func (*CrucibleBattleUidInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{55}
}

func (x *CrucibleBattleUidInfo) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *CrucibleBattleUidInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CrucibleBattleUidInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CrucibleBattleUidInfo) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

func (x *CrucibleBattleUidInfo) GetIcon() uint32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

type CrucibleActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostTime         uint32                   `protobuf:"varint,5,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
	BattleWorldLevel uint32                   `protobuf:"varint,12,opt,name=battle_world_level,json=battleWorldLevel,proto3" json:"battle_world_level,omitempty"`
	UidInfoList      []*CrucibleBattleUidInfo `protobuf:"bytes,3,rep,name=uid_info_list,json=uidInfoList,proto3" json:"uid_info_list,omitempty"`
	Pos              *Vector                  `protobuf:"bytes,9,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *CrucibleActivityDetailInfo) Reset() {
	*x = CrucibleActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrucibleActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrucibleActivityDetailInfo) ProtoMessage() {}

func (x *CrucibleActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrucibleActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*CrucibleActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{56}
}

func (x *CrucibleActivityDetailInfo) GetCostTime() uint32 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *CrucibleActivityDetailInfo) GetBattleWorldLevel() uint32 {
	if x != nil {
		return x.BattleWorldLevel
	}
	return 0
}

func (x *CrucibleActivityDetailInfo) GetUidInfoList() []*CrucibleBattleUidInfo {
	if x != nil {
		return x.UidInfoList
	}
	return nil
}

func (x *CrucibleActivityDetailInfo) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

type DeliveryActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayIndex                   uint32   `protobuf:"varint,14,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	IsTakenReward              bool     `protobuf:"varint,13,opt,name=is_taken_reward,json=isTakenReward,proto3" json:"is_taken_reward,omitempty"`
	FinishedDeliveryQuestIndex []uint32 `protobuf:"varint,4,rep,packed,name=finished_delivery_quest_index,json=finishedDeliveryQuestIndex,proto3" json:"finished_delivery_quest_index,omitempty"`
}

func (x *DeliveryActivityDetailInfo) Reset() {
	*x = DeliveryActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryActivityDetailInfo) ProtoMessage() {}

func (x *DeliveryActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*DeliveryActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{57}
}

func (x *DeliveryActivityDetailInfo) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *DeliveryActivityDetailInfo) GetIsTakenReward() bool {
	if x != nil {
		return x.IsTakenReward
	}
	return false
}

func (x *DeliveryActivityDetailInfo) GetFinishedDeliveryQuestIndex() []uint32 {
	if x != nil {
		return x.FinishedDeliveryQuestIndex
	}
	return nil
}

type TakeDeliveryDailyRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,9,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *TakeDeliveryDailyRewardReq) Reset() {
	*x = TakeDeliveryDailyRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeDeliveryDailyRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeDeliveryDailyRewardReq) ProtoMessage() {}

func (x *TakeDeliveryDailyRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeDeliveryDailyRewardReq.ProtoReflect.Descriptor instead.
func (*TakeDeliveryDailyRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{58}
}

func (x *TakeDeliveryDailyRewardReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type TakeDeliveryDailyRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,5,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode    int32  `protobuf:"varint,7,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *TakeDeliveryDailyRewardRsp) Reset() {
	*x = TakeDeliveryDailyRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeDeliveryDailyRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeDeliveryDailyRewardRsp) ProtoMessage() {}

func (x *TakeDeliveryDailyRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeDeliveryDailyRewardRsp.ProtoReflect.Descriptor instead.
func (*TakeDeliveryDailyRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{59}
}

func (x *TakeDeliveryDailyRewardRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *TakeDeliveryDailyRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type FinishDeliveryNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishedQuestIndex uint32 `protobuf:"varint,1,opt,name=finished_quest_index,json=finishedQuestIndex,proto3" json:"finished_quest_index,omitempty"`
	ScheduleId         uint32 `protobuf:"varint,10,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	DayIndex           uint32 `protobuf:"varint,12,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
}

func (x *FinishDeliveryNotify) Reset() {
	*x = FinishDeliveryNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishDeliveryNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishDeliveryNotify) ProtoMessage() {}

func (x *FinishDeliveryNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishDeliveryNotify.ProtoReflect.Descriptor instead.
func (*FinishDeliveryNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{60}
}

func (x *FinishDeliveryNotify) GetFinishedQuestIndex() uint32 {
	if x != nil {
		return x.FinishedQuestIndex
	}
	return 0
}

func (x *FinishDeliveryNotify) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *FinishDeliveryNotify) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

type AsterLittleDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen         bool                  `protobuf:"varint,4,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	StageState     AsterLittleStageState `protobuf:"varint,7,opt,name=stage_state,json=stageState,proto3,enum=proto.AsterLittleStageState" json:"stage_state,omitempty"`
	StageId        uint32                `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	BeginTime      uint32                `protobuf:"varint,6,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	StageBeginTime uint32                `protobuf:"varint,5,opt,name=stage_begin_time,json=stageBeginTime,proto3" json:"stage_begin_time,omitempty"`
}

func (x *AsterLittleDetailInfo) Reset() {
	*x = AsterLittleDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterLittleDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterLittleDetailInfo) ProtoMessage() {}

func (x *AsterLittleDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterLittleDetailInfo.ProtoReflect.Descriptor instead.
func (*AsterLittleDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{61}
}

func (x *AsterLittleDetailInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *AsterLittleDetailInfo) GetStageState() AsterLittleStageState {
	if x != nil {
		return x.StageState
	}
	return AsterLittleStageState_ASTER_LITTLE_STAGE_NONE
}

func (x *AsterLittleDetailInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *AsterLittleDetailInfo) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *AsterLittleDetailInfo) GetStageBeginTime() uint32 {
	if x != nil {
		return x.StageBeginTime
	}
	return 0
}

type AsterMidCampInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos    *Vector `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	CampId uint32  `protobuf:"varint,8,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
}

func (x *AsterMidCampInfo) Reset() {
	*x = AsterMidCampInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterMidCampInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterMidCampInfo) ProtoMessage() {}

func (x *AsterMidCampInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterMidCampInfo.ProtoReflect.Descriptor instead.
func (*AsterMidCampInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{62}
}

func (x *AsterMidCampInfo) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *AsterMidCampInfo) GetCampId() uint32 {
	if x != nil {
		return x.CampId
	}
	return 0
}

type AsterMidDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginTime    uint32              `protobuf:"varint,10,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	CampList     []*AsterMidCampInfo `protobuf:"bytes,7,rep,name=camp_list,json=campList,proto3" json:"camp_list,omitempty"`
	IsOpen       bool                `protobuf:"varint,4,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	CollectCount uint32              `protobuf:"varint,11,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`
}

func (x *AsterMidDetailInfo) Reset() {
	*x = AsterMidDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterMidDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterMidDetailInfo) ProtoMessage() {}

func (x *AsterMidDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterMidDetailInfo.ProtoReflect.Descriptor instead.
func (*AsterMidDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{63}
}

func (x *AsterMidDetailInfo) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *AsterMidDetailInfo) GetCampList() []*AsterMidCampInfo {
	if x != nil {
		return x.CampList
	}
	return nil
}

func (x *AsterMidDetailInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *AsterMidDetailInfo) GetCollectCount() uint32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

type AsterLargeDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen    bool   `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	BeginTime uint32 `protobuf:"varint,13,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
}

func (x *AsterLargeDetailInfo) Reset() {
	*x = AsterLargeDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterLargeDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterLargeDetailInfo) ProtoMessage() {}

func (x *AsterLargeDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterLargeDetailInfo.ProtoReflect.Descriptor instead.
func (*AsterLargeDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{64}
}

func (x *AsterLargeDetailInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *AsterLargeDetailInfo) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

type AsterProgressDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastAutoAddTime uint32 `protobuf:"varint,3,opt,name=last_auto_add_time,json=lastAutoAddTime,proto3" json:"last_auto_add_time,omitempty"`
	Count           uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AsterProgressDetailInfo) Reset() {
	*x = AsterProgressDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterProgressDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterProgressDetailInfo) ProtoMessage() {}

func (x *AsterProgressDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterProgressDetailInfo.ProtoReflect.Descriptor instead.
func (*AsterProgressDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{65}
}

func (x *AsterProgressDetailInfo) GetLastAutoAddTime() uint32 {
	if x != nil {
		return x.LastAutoAddTime
	}
	return 0
}

func (x *AsterProgressDetailInfo) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AsterActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsterLittle          *AsterLittleDetailInfo   `protobuf:"bytes,7,opt,name=aster_little,json=asterLittle,proto3" json:"aster_little,omitempty"`
	AsterCredit          uint32                   `protobuf:"varint,14,opt,name=aster_credit,json=asterCredit,proto3" json:"aster_credit,omitempty"`
	AsterLarge           *AsterLargeDetailInfo    `protobuf:"bytes,9,opt,name=aster_large,json=asterLarge,proto3" json:"aster_large,omitempty"`
	IsSpecialRewardTaken bool                     `protobuf:"varint,1,opt,name=is_special_reward_taken,json=isSpecialRewardTaken,proto3" json:"is_special_reward_taken,omitempty"`
	IsContentClosed      bool                     `protobuf:"varint,13,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	ContentCloseTime     uint32                   `protobuf:"varint,8,opt,name=content_close_time,json=contentCloseTime,proto3" json:"content_close_time,omitempty"`
	AsterToken           uint32                   `protobuf:"varint,5,opt,name=aster_token,json=asterToken,proto3" json:"aster_token,omitempty"`
	AsterMid             *AsterMidDetailInfo      `protobuf:"bytes,6,opt,name=aster_mid,json=asterMid,proto3" json:"aster_mid,omitempty"`
	AsterProgress        *AsterProgressDetailInfo `protobuf:"bytes,2,opt,name=aster_progress,json=asterProgress,proto3" json:"aster_progress,omitempty"`
}

func (x *AsterActivityDetailInfo) Reset() {
	*x = AsterActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterActivityDetailInfo) ProtoMessage() {}

func (x *AsterActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*AsterActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{66}
}

func (x *AsterActivityDetailInfo) GetAsterLittle() *AsterLittleDetailInfo {
	if x != nil {
		return x.AsterLittle
	}
	return nil
}

func (x *AsterActivityDetailInfo) GetAsterCredit() uint32 {
	if x != nil {
		return x.AsterCredit
	}
	return 0
}

func (x *AsterActivityDetailInfo) GetAsterLarge() *AsterLargeDetailInfo {
	if x != nil {
		return x.AsterLarge
	}
	return nil
}

func (x *AsterActivityDetailInfo) GetIsSpecialRewardTaken() bool {
	if x != nil {
		return x.IsSpecialRewardTaken
	}
	return false
}

func (x *AsterActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *AsterActivityDetailInfo) GetContentCloseTime() uint32 {
	if x != nil {
		return x.ContentCloseTime
	}
	return 0
}

func (x *AsterActivityDetailInfo) GetAsterToken() uint32 {
	if x != nil {
		return x.AsterToken
	}
	return 0
}

func (x *AsterActivityDetailInfo) GetAsterMid() *AsterMidDetailInfo {
	if x != nil {
		return x.AsterMid
	}
	return nil
}

func (x *AsterActivityDetailInfo) GetAsterProgress() *AsterProgressDetailInfo {
	if x != nil {
		return x.AsterProgress
	}
	return nil
}

type SelectAsterMidDifficultyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GadgetEntityId uint32 `protobuf:"varint,13,opt,name=gadget_entity_id,json=gadgetEntityId,proto3" json:"gadget_entity_id,omitempty"`
	ScheduleId     uint32 `protobuf:"varint,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	DifficultyId   uint32 `protobuf:"varint,5,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
}

func (x *SelectAsterMidDifficultyReq) Reset() {
	*x = SelectAsterMidDifficultyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectAsterMidDifficultyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectAsterMidDifficultyReq) ProtoMessage() {}

func (x *SelectAsterMidDifficultyReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectAsterMidDifficultyReq.ProtoReflect.Descriptor instead.
func (*SelectAsterMidDifficultyReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{67}
}

func (x *SelectAsterMidDifficultyReq) GetGadgetEntityId() uint32 {
	if x != nil {
		return x.GadgetEntityId
	}
	return 0
}

func (x *SelectAsterMidDifficultyReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *SelectAsterMidDifficultyReq) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

type SelectAsterMidDifficultyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode        int32  `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ScheduleId     uint32 `protobuf:"varint,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	GadgetEntityId uint32 `protobuf:"varint,5,opt,name=gadget_entity_id,json=gadgetEntityId,proto3" json:"gadget_entity_id,omitempty"`
	DifficultyId   uint32 `protobuf:"varint,14,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
}

func (x *SelectAsterMidDifficultyRsp) Reset() {
	*x = SelectAsterMidDifficultyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectAsterMidDifficultyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectAsterMidDifficultyRsp) ProtoMessage() {}

func (x *SelectAsterMidDifficultyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectAsterMidDifficultyRsp.ProtoReflect.Descriptor instead.
func (*SelectAsterMidDifficultyRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{68}
}

func (x *SelectAsterMidDifficultyRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *SelectAsterMidDifficultyRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *SelectAsterMidDifficultyRsp) GetGadgetEntityId() uint32 {
	if x != nil {
		return x.GadgetEntityId
	}
	return 0
}

func (x *SelectAsterMidDifficultyRsp) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

type AsterProgressInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AsterProgressDetailInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *AsterProgressInfoNotify) Reset() {
	*x = AsterProgressInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterProgressInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterProgressInfoNotify) ProtoMessage() {}

func (x *AsterProgressInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterProgressInfoNotify.ProtoReflect.Descriptor instead.
func (*AsterProgressInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{69}
}

func (x *AsterProgressInfoNotify) GetInfo() *AsterProgressDetailInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AsterLittleInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AsterLittleDetailInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *AsterLittleInfoNotify) Reset() {
	*x = AsterLittleInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterLittleInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterLittleInfoNotify) ProtoMessage() {}

func (x *AsterLittleInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterLittleInfoNotify.ProtoReflect.Descriptor instead.
func (*AsterLittleInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{70}
}

func (x *AsterLittleInfoNotify) GetInfo() *AsterLittleDetailInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AsterMidInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AsterMidDetailInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *AsterMidInfoNotify) Reset() {
	*x = AsterMidInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterMidInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterMidInfoNotify) ProtoMessage() {}

func (x *AsterMidInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterMidInfoNotify.ProtoReflect.Descriptor instead.
func (*AsterMidInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{71}
}

func (x *AsterMidInfoNotify) GetInfo() *AsterMidDetailInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AsterMiscInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsterToken  uint32 `protobuf:"varint,2,opt,name=aster_token,json=asterToken,proto3" json:"aster_token,omitempty"`
	AsterCredit uint32 `protobuf:"varint,15,opt,name=aster_credit,json=asterCredit,proto3" json:"aster_credit,omitempty"`
}

func (x *AsterMiscInfoNotify) Reset() {
	*x = AsterMiscInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterMiscInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterMiscInfoNotify) ProtoMessage() {}

func (x *AsterMiscInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterMiscInfoNotify.ProtoReflect.Descriptor instead.
func (*AsterMiscInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{72}
}

func (x *AsterMiscInfoNotify) GetAsterToken() uint32 {
	if x != nil {
		return x.AsterToken
	}
	return 0
}

func (x *AsterMiscInfoNotify) GetAsterCredit() uint32 {
	if x != nil {
		return x.AsterCredit
	}
	return 0
}

type TakeAsterSpecialRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,5,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *TakeAsterSpecialRewardReq) Reset() {
	*x = TakeAsterSpecialRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeAsterSpecialRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeAsterSpecialRewardReq) ProtoMessage() {}

func (x *TakeAsterSpecialRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeAsterSpecialRewardReq.ProtoReflect.Descriptor instead.
func (*TakeAsterSpecialRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{73}
}

func (x *TakeAsterSpecialRewardReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type TakeAsterSpecialRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode    int32  `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ScheduleId uint32 `protobuf:"varint,14,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *TakeAsterSpecialRewardRsp) Reset() {
	*x = TakeAsterSpecialRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeAsterSpecialRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeAsterSpecialRewardRsp) ProtoMessage() {}

func (x *TakeAsterSpecialRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeAsterSpecialRewardRsp.ProtoReflect.Descriptor instead.
func (*TakeAsterSpecialRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{74}
}

func (x *TakeAsterSpecialRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TakeAsterSpecialRewardRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type AsterLargeInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AsterLargeDetailInfo `protobuf:"bytes,10,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *AsterLargeInfoNotify) Reset() {
	*x = AsterLargeInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterLargeInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterLargeInfoNotify) ProtoMessage() {}

func (x *AsterLargeInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterLargeInfoNotify.ProtoReflect.Descriptor instead.
func (*AsterLargeInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{75}
}

func (x *AsterLargeInfoNotify) GetInfo() *AsterLargeDetailInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type FlightDailyRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       uint32   `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	IsTouched     bool     `protobuf:"varint,1,opt,name=is_touched,json=isTouched,proto3" json:"is_touched,omitempty"`
	WatcherIdList []uint32 `protobuf:"varint,11,rep,packed,name=watcher_id_list,json=watcherIdList,proto3" json:"watcher_id_list,omitempty"`
	BestScore     uint32   `protobuf:"varint,7,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
	StartTime     uint32   `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *FlightDailyRecord) Reset() {
	*x = FlightDailyRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightDailyRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightDailyRecord) ProtoMessage() {}

func (x *FlightDailyRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightDailyRecord.ProtoReflect.Descriptor instead.
func (*FlightDailyRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{76}
}

func (x *FlightDailyRecord) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *FlightDailyRecord) GetIsTouched() bool {
	if x != nil {
		return x.IsTouched
	}
	return false
}

func (x *FlightDailyRecord) GetWatcherIdList() []uint32 {
	if x != nil {
		return x.WatcherIdList
	}
	return nil
}

func (x *FlightDailyRecord) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

func (x *FlightDailyRecord) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type FlightActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviewRewardId    uint32               `protobuf:"varint,15,opt,name=preview_reward_id,json=previewRewardId,proto3" json:"preview_reward_id,omitempty"`
	MinOpenPlayerLevel uint32               `protobuf:"varint,11,opt,name=min_open_player_level,json=minOpenPlayerLevel,proto3" json:"min_open_player_level,omitempty"`
	DailyRecordList    []*FlightDailyRecord `protobuf:"bytes,1,rep,name=daily_record_list,json=dailyRecordList,proto3" json:"daily_record_list,omitempty"`
}

func (x *FlightActivityDetailInfo) Reset() {
	*x = FlightActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightActivityDetailInfo) ProtoMessage() {}

func (x *FlightActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*FlightActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{77}
}

func (x *FlightActivityDetailInfo) GetPreviewRewardId() uint32 {
	if x != nil {
		return x.PreviewRewardId
	}
	return 0
}

func (x *FlightActivityDetailInfo) GetMinOpenPlayerLevel() uint32 {
	if x != nil {
		return x.MinOpenPlayerLevel
	}
	return 0
}

func (x *FlightActivityDetailInfo) GetDailyRecordList() []*FlightDailyRecord {
	if x != nil {
		return x.DailyRecordList
	}
	return nil
}

type FlightActivitySettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNewRecord bool   `protobuf:"varint,1,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	MedalLevel  uint32 `protobuf:"varint,6,opt,name=medal_level,json=medalLevel,proto3" json:"medal_level,omitempty"`
	LeftTime    uint32 `protobuf:"varint,13,opt,name=left_time,json=leftTime,proto3" json:"left_time,omitempty"`
	CollectNum  uint32 `protobuf:"varint,9,opt,name=collect_num,json=collectNum,proto3" json:"collect_num,omitempty"`
	TotalNum    uint32 `protobuf:"varint,5,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
	GroupId     uint32 `protobuf:"varint,8,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Score       uint32 `protobuf:"varint,10,opt,name=score,proto3" json:"score,omitempty"`
	IsSuccess   bool   `protobuf:"varint,4,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *FlightActivitySettleNotify) Reset() {
	*x = FlightActivitySettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightActivitySettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightActivitySettleNotify) ProtoMessage() {}

func (x *FlightActivitySettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightActivitySettleNotify.ProtoReflect.Descriptor instead.
func (*FlightActivitySettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{78}
}

func (x *FlightActivitySettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *FlightActivitySettleNotify) GetMedalLevel() uint32 {
	if x != nil {
		return x.MedalLevel
	}
	return 0
}

func (x *FlightActivitySettleNotify) GetLeftTime() uint32 {
	if x != nil {
		return x.LeftTime
	}
	return 0
}

func (x *FlightActivitySettleNotify) GetCollectNum() uint32 {
	if x != nil {
		return x.CollectNum
	}
	return 0
}

func (x *FlightActivitySettleNotify) GetTotalNum() uint32 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

func (x *FlightActivitySettleNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *FlightActivitySettleNotify) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *FlightActivitySettleNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type FlightActivityRestartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    uint32 `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ScheduleId uint32 `protobuf:"varint,10,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *FlightActivityRestartReq) Reset() {
	*x = FlightActivityRestartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightActivityRestartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightActivityRestartReq) ProtoMessage() {}

func (x *FlightActivityRestartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightActivityRestartReq.ProtoReflect.Descriptor instead.
func (*FlightActivityRestartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{79}
}

func (x *FlightActivityRestartReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *FlightActivityRestartReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type FlightActivityRestartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    uint32 `protobuf:"varint,11,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ScheduleId uint32 `protobuf:"varint,10,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode    int32  `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *FlightActivityRestartRsp) Reset() {
	*x = FlightActivityRestartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightActivityRestartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightActivityRestartRsp) ProtoMessage() {}

func (x *FlightActivityRestartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightActivityRestartRsp.ProtoReflect.Descriptor instead.
func (*FlightActivityRestartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{80}
}

func (x *FlightActivityRestartRsp) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *FlightActivityRestartRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *FlightActivityRestartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type AsterMidCampInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CampList []*AsterMidCampInfo `protobuf:"bytes,5,rep,name=camp_list,json=campList,proto3" json:"camp_list,omitempty"`
}

func (x *AsterMidCampInfoNotify) Reset() {
	*x = AsterMidCampInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsterMidCampInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsterMidCampInfoNotify) ProtoMessage() {}

func (x *AsterMidCampInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsterMidCampInfoNotify.ProtoReflect.Descriptor instead.
func (*AsterMidCampInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{81}
}

func (x *AsterMidCampInfoNotify) GetCampList() []*AsterMidCampInfo {
	if x != nil {
		return x.CampList
	}
	return nil
}

type DragonSpineActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsContentClosed    bool                      `protobuf:"varint,10,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	ChapterInfoList    []*DragonSpineChapterInfo `protobuf:"bytes,4,rep,name=chapter_info_list,json=chapterInfoList,proto3" json:"chapter_info_list,omitempty"`
	WeaponEnhanceLevel uint32                    `protobuf:"varint,2,opt,name=weapon_enhance_level,json=weaponEnhanceLevel,proto3" json:"weapon_enhance_level,omitempty"`
	ContentFinishTime  uint32                    `protobuf:"varint,15,opt,name=content_finish_time,json=contentFinishTime,proto3" json:"content_finish_time,omitempty"`
	ShimmeringEssence  uint32                    `protobuf:"varint,13,opt,name=shimmering_essence,json=shimmeringEssence,proto3" json:"shimmering_essence,omitempty"`
	WarmEssence        uint32                    `protobuf:"varint,11,opt,name=warm_essence,json=warmEssence,proto3" json:"warm_essence,omitempty"`
	WondrousEssence    uint32                    `protobuf:"varint,7,opt,name=wondrous_essence,json=wondrousEssence,proto3" json:"wondrous_essence,omitempty"`
}

func (x *DragonSpineActivityDetailInfo) Reset() {
	*x = DragonSpineActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonSpineActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonSpineActivityDetailInfo) ProtoMessage() {}

func (x *DragonSpineActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonSpineActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*DragonSpineActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{82}
}

func (x *DragonSpineActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *DragonSpineActivityDetailInfo) GetChapterInfoList() []*DragonSpineChapterInfo {
	if x != nil {
		return x.ChapterInfoList
	}
	return nil
}

func (x *DragonSpineActivityDetailInfo) GetWeaponEnhanceLevel() uint32 {
	if x != nil {
		return x.WeaponEnhanceLevel
	}
	return 0
}

func (x *DragonSpineActivityDetailInfo) GetContentFinishTime() uint32 {
	if x != nil {
		return x.ContentFinishTime
	}
	return 0
}

func (x *DragonSpineActivityDetailInfo) GetShimmeringEssence() uint32 {
	if x != nil {
		return x.ShimmeringEssence
	}
	return 0
}

func (x *DragonSpineActivityDetailInfo) GetWarmEssence() uint32 {
	if x != nil {
		return x.WarmEssence
	}
	return 0
}

func (x *DragonSpineActivityDetailInfo) GetWondrousEssence() uint32 {
	if x != nil {
		return x.WondrousEssence
	}
	return 0
}

type DragonSpineChapterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress           uint32 `protobuf:"varint,14,opt,name=progress,proto3" json:"progress,omitempty"`
	OpenTime           uint32 `protobuf:"varint,6,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	IsOpen             bool   `protobuf:"varint,11,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	ChapterId          uint32 `protobuf:"varint,9,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	FinishedMissionNum uint32 `protobuf:"varint,10,opt,name=finished_mission_num,json=finishedMissionNum,proto3" json:"finished_mission_num,omitempty"`
}

func (x *DragonSpineChapterInfo) Reset() {
	*x = DragonSpineChapterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonSpineChapterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonSpineChapterInfo) ProtoMessage() {}

func (x *DragonSpineChapterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonSpineChapterInfo.ProtoReflect.Descriptor instead.
func (*DragonSpineChapterInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{83}
}

func (x *DragonSpineChapterInfo) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DragonSpineChapterInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *DragonSpineChapterInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *DragonSpineChapterInfo) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *DragonSpineChapterInfo) GetFinishedMissionNum() uint32 {
	if x != nil {
		return x.FinishedMissionNum
	}
	return 0
}

type DragonSpineChapterOpenNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,12,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	ChapterId  uint32 `protobuf:"varint,10,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
}

func (x *DragonSpineChapterOpenNotify) Reset() {
	*x = DragonSpineChapterOpenNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonSpineChapterOpenNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonSpineChapterOpenNotify) ProtoMessage() {}

func (x *DragonSpineChapterOpenNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonSpineChapterOpenNotify.ProtoReflect.Descriptor instead.
func (*DragonSpineChapterOpenNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{84}
}

func (x *DragonSpineChapterOpenNotify) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *DragonSpineChapterOpenNotify) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

type DragonSpineChapterProgressChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId  uint32 `protobuf:"varint,7,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	ChapterId   uint32 `protobuf:"varint,11,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	CurProgress uint32 `protobuf:"varint,5,opt,name=cur_progress,json=curProgress,proto3" json:"cur_progress,omitempty"`
}

func (x *DragonSpineChapterProgressChangeNotify) Reset() {
	*x = DragonSpineChapterProgressChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonSpineChapterProgressChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonSpineChapterProgressChangeNotify) ProtoMessage() {}

func (x *DragonSpineChapterProgressChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonSpineChapterProgressChangeNotify.ProtoReflect.Descriptor instead.
func (*DragonSpineChapterProgressChangeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{85}
}

func (x *DragonSpineChapterProgressChangeNotify) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *DragonSpineChapterProgressChangeNotify) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *DragonSpineChapterProgressChangeNotify) GetCurProgress() uint32 {
	if x != nil {
		return x.CurProgress
	}
	return 0
}

type DragonSpineChapterFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId         uint32 `protobuf:"varint,13,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	ChapterId          uint32 `protobuf:"varint,11,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	WeaponEnhanceLevel uint32 `protobuf:"varint,14,opt,name=weapon_enhance_level,json=weaponEnhanceLevel,proto3" json:"weapon_enhance_level,omitempty"`
}

func (x *DragonSpineChapterFinishNotify) Reset() {
	*x = DragonSpineChapterFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonSpineChapterFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonSpineChapterFinishNotify) ProtoMessage() {}

func (x *DragonSpineChapterFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonSpineChapterFinishNotify.ProtoReflect.Descriptor instead.
func (*DragonSpineChapterFinishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{86}
}

func (x *DragonSpineChapterFinishNotify) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *DragonSpineChapterFinishNotify) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *DragonSpineChapterFinishNotify) GetWeaponEnhanceLevel() uint32 {
	if x != nil {
		return x.WeaponEnhanceLevel
	}
	return 0
}

type DragonSpineCoinChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShimmeringEssence uint32 `protobuf:"varint,4,opt,name=shimmering_essence,json=shimmeringEssence,proto3" json:"shimmering_essence,omitempty"`
	WarmEssence       uint32 `protobuf:"varint,13,opt,name=warm_essence,json=warmEssence,proto3" json:"warm_essence,omitempty"`
	ScheduleId        uint32 `protobuf:"varint,12,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	WondrousEssence   uint32 `protobuf:"varint,11,opt,name=wondrous_essence,json=wondrousEssence,proto3" json:"wondrous_essence,omitempty"`
}

func (x *DragonSpineCoinChangeNotify) Reset() {
	*x = DragonSpineCoinChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonSpineCoinChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonSpineCoinChangeNotify) ProtoMessage() {}

func (x *DragonSpineCoinChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonSpineCoinChangeNotify.ProtoReflect.Descriptor instead.
func (*DragonSpineCoinChangeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{87}
}

func (x *DragonSpineCoinChangeNotify) GetShimmeringEssence() uint32 {
	if x != nil {
		return x.ShimmeringEssence
	}
	return 0
}

func (x *DragonSpineCoinChangeNotify) GetWarmEssence() uint32 {
	if x != nil {
		return x.WarmEssence
	}
	return 0
}

func (x *DragonSpineCoinChangeNotify) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *DragonSpineCoinChangeNotify) GetWondrousEssence() uint32 {
	if x != nil {
		return x.WondrousEssence
	}
	return 0
}

type ActivitySaleChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaleId  uint32 `protobuf:"varint,5,opt,name=sale_id,json=saleId,proto3" json:"sale_id,omitempty"`
	IsClose bool   `protobuf:"varint,1,opt,name=is_close,json=isClose,proto3" json:"is_close,omitempty"`
}

func (x *ActivitySaleChangeNotify) Reset() {
	*x = ActivitySaleChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivitySaleChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivitySaleChangeNotify) ProtoMessage() {}

func (x *ActivitySaleChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivitySaleChangeNotify.ProtoReflect.Descriptor instead.
func (*ActivitySaleChangeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{88}
}

func (x *ActivitySaleChangeNotify) GetSaleId() uint32 {
	if x != nil {
		return x.SaleId
	}
	return 0
}

func (x *ActivitySaleChangeNotify) GetIsClose() bool {
	if x != nil {
		return x.IsClose
	}
	return false
}

type EffigyDailyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeMaxScore      uint32 `protobuf:"varint,6,opt,name=challenge_max_score,json=challengeMaxScore,proto3" json:"challenge_max_score,omitempty"`
	IsFirstPassRewardTaken bool   `protobuf:"varint,12,opt,name=is_first_pass_reward_taken,json=isFirstPassRewardTaken,proto3" json:"is_first_pass_reward_taken,omitempty"`
	ChallengeTotalScore    uint32 `protobuf:"varint,15,opt,name=challenge_total_score,json=challengeTotalScore,proto3" json:"challenge_total_score,omitempty"`
	ChallengeId            uint32 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	ChallengeCount         uint32 `protobuf:"varint,3,opt,name=challenge_count,json=challengeCount,proto3" json:"challenge_count,omitempty"`
	DayIndex               uint32 `protobuf:"varint,14,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	BeginTime              uint32 `protobuf:"varint,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
}

func (x *EffigyDailyInfo) Reset() {
	*x = EffigyDailyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyDailyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyDailyInfo) ProtoMessage() {}

func (x *EffigyDailyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyDailyInfo.ProtoReflect.Descriptor instead.
func (*EffigyDailyInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{89}
}

func (x *EffigyDailyInfo) GetChallengeMaxScore() uint32 {
	if x != nil {
		return x.ChallengeMaxScore
	}
	return 0
}

func (x *EffigyDailyInfo) GetIsFirstPassRewardTaken() bool {
	if x != nil {
		return x.IsFirstPassRewardTaken
	}
	return false
}

func (x *EffigyDailyInfo) GetChallengeTotalScore() uint32 {
	if x != nil {
		return x.ChallengeTotalScore
	}
	return 0
}

func (x *EffigyDailyInfo) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *EffigyDailyInfo) GetChallengeCount() uint32 {
	if x != nil {
		return x.ChallengeCount
	}
	return 0
}

func (x *EffigyDailyInfo) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *EffigyDailyInfo) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

type EffigyActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurScore             uint32             `protobuf:"varint,5,opt,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`
	DailyInfoList        []*EffigyDailyInfo `protobuf:"bytes,14,rep,name=daily_info_list,json=dailyInfoList,proto3" json:"daily_info_list,omitempty"`
	LastDifficultyId     uint32             `protobuf:"varint,9,opt,name=last_difficulty_id,json=lastDifficultyId,proto3" json:"last_difficulty_id,omitempty"`
	TakenRewardIndexList []uint32           `protobuf:"varint,2,rep,packed,name=taken_reward_index_list,json=takenRewardIndexList,proto3" json:"taken_reward_index_list,omitempty"`
}

func (x *EffigyActivityDetailInfo) Reset() {
	*x = EffigyActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyActivityDetailInfo) ProtoMessage() {}

func (x *EffigyActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*EffigyActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{90}
}

func (x *EffigyActivityDetailInfo) GetCurScore() uint32 {
	if x != nil {
		return x.CurScore
	}
	return 0
}

func (x *EffigyActivityDetailInfo) GetDailyInfoList() []*EffigyDailyInfo {
	if x != nil {
		return x.DailyInfoList
	}
	return nil
}

func (x *EffigyActivityDetailInfo) GetLastDifficultyId() uint32 {
	if x != nil {
		return x.LastDifficultyId
	}
	return 0
}

func (x *EffigyActivityDetailInfo) GetTakenRewardIndexList() []uint32 {
	if x != nil {
		return x.TakenRewardIndexList
	}
	return nil
}

type StartEffigyChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DifficultyId    uint32   `protobuf:"varint,9,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	ConditionIdList []uint32 `protobuf:"varint,6,rep,packed,name=condition_id_list,json=conditionIdList,proto3" json:"condition_id_list,omitempty"`
	ChallengeId     uint32   `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	PointId         uint32   `protobuf:"varint,12,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
}

func (x *StartEffigyChallengeReq) Reset() {
	*x = StartEffigyChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartEffigyChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartEffigyChallengeReq) ProtoMessage() {}

func (x *StartEffigyChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartEffigyChallengeReq.ProtoReflect.Descriptor instead.
func (*StartEffigyChallengeReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{91}
}

func (x *StartEffigyChallengeReq) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *StartEffigyChallengeReq) GetConditionIdList() []uint32 {
	if x != nil {
		return x.ConditionIdList
	}
	return nil
}

func (x *StartEffigyChallengeReq) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *StartEffigyChallengeReq) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

type StartEffigyChallengeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionIdList []uint32 `protobuf:"varint,2,rep,packed,name=condition_id_list,json=conditionIdList,proto3" json:"condition_id_list,omitempty"`
	Retcode         int32    `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ChallengeId     uint32   `protobuf:"varint,15,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	DifficultyId    uint32   `protobuf:"varint,10,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	PointId         uint32   `protobuf:"varint,12,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
}

func (x *StartEffigyChallengeRsp) Reset() {
	*x = StartEffigyChallengeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartEffigyChallengeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartEffigyChallengeRsp) ProtoMessage() {}

func (x *StartEffigyChallengeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartEffigyChallengeRsp.ProtoReflect.Descriptor instead.
func (*StartEffigyChallengeRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{92}
}

func (x *StartEffigyChallengeRsp) GetConditionIdList() []uint32 {
	if x != nil {
		return x.ConditionIdList
	}
	return nil
}

func (x *StartEffigyChallengeRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *StartEffigyChallengeRsp) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *StartEffigyChallengeRsp) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *StartEffigyChallengeRsp) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

type EffigyChallengeInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DifficultyId    uint32   `protobuf:"varint,9,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	ConditionIdList []uint32 `protobuf:"varint,11,rep,packed,name=condition_id_list,json=conditionIdList,proto3" json:"condition_id_list,omitempty"`
	ChallengeScore  uint32   `protobuf:"varint,14,opt,name=challenge_score,json=challengeScore,proto3" json:"challenge_score,omitempty"`
	ChallengeId     uint32   `protobuf:"varint,8,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *EffigyChallengeInfoNotify) Reset() {
	*x = EffigyChallengeInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeInfoNotify) ProtoMessage() {}

func (x *EffigyChallengeInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeInfoNotify.ProtoReflect.Descriptor instead.
func (*EffigyChallengeInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{93}
}

func (x *EffigyChallengeInfoNotify) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *EffigyChallengeInfoNotify) GetConditionIdList() []uint32 {
	if x != nil {
		return x.ConditionIdList
	}
	return nil
}

func (x *EffigyChallengeInfoNotify) GetChallengeScore() uint32 {
	if x != nil {
		return x.ChallengeScore
	}
	return 0
}

func (x *EffigyChallengeInfoNotify) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type EffigyChallengeDungeonResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeScore    uint32 `protobuf:"varint,7,opt,name=challenge_score,json=challengeScore,proto3" json:"challenge_score,omitempty"`
	IsInTimeLimit     bool   `protobuf:"varint,8,opt,name=is_in_time_limit,json=isInTimeLimit,proto3" json:"is_in_time_limit,omitempty"`
	ChallengeId       uint32 `protobuf:"varint,6,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	IsSuccess         bool   `protobuf:"varint,15,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	ChallengeMaxScore uint32 `protobuf:"varint,13,opt,name=challenge_max_score,json=challengeMaxScore,proto3" json:"challenge_max_score,omitempty"`
}

func (x *EffigyChallengeDungeonResultInfo) Reset() {
	*x = EffigyChallengeDungeonResultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeDungeonResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeDungeonResultInfo) ProtoMessage() {}

func (x *EffigyChallengeDungeonResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeDungeonResultInfo.ProtoReflect.Descriptor instead.
func (*EffigyChallengeDungeonResultInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{94}
}

func (x *EffigyChallengeDungeonResultInfo) GetChallengeScore() uint32 {
	if x != nil {
		return x.ChallengeScore
	}
	return 0
}

func (x *EffigyChallengeDungeonResultInfo) GetIsInTimeLimit() bool {
	if x != nil {
		return x.IsInTimeLimit
	}
	return false
}

func (x *EffigyChallengeDungeonResultInfo) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *EffigyChallengeDungeonResultInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *EffigyChallengeDungeonResultInfo) GetChallengeMaxScore() uint32 {
	if x != nil {
		return x.ChallengeMaxScore
	}
	return 0
}

type EffigyChallengeResultNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess         bool   `protobuf:"varint,5,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	ChallengeMaxScore uint32 `protobuf:"varint,12,opt,name=challenge_max_score,json=challengeMaxScore,proto3" json:"challenge_max_score,omitempty"`
	ChallengeScore    uint32 `protobuf:"varint,3,opt,name=challenge_score,json=challengeScore,proto3" json:"challenge_score,omitempty"`
	ChallengeId       uint32 `protobuf:"varint,7,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *EffigyChallengeResultNotify) Reset() {
	*x = EffigyChallengeResultNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeResultNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeResultNotify) ProtoMessage() {}

func (x *EffigyChallengeResultNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeResultNotify.ProtoReflect.Descriptor instead.
func (*EffigyChallengeResultNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{95}
}

func (x *EffigyChallengeResultNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *EffigyChallengeResultNotify) GetChallengeMaxScore() uint32 {
	if x != nil {
		return x.ChallengeMaxScore
	}
	return 0
}

func (x *EffigyChallengeResultNotify) GetChallengeScore() uint32 {
	if x != nil {
		return x.ChallengeScore
	}
	return 0
}

func (x *EffigyChallengeResultNotify) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type TakeEffigyFirstPassRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId uint32 `protobuf:"varint,6,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *TakeEffigyFirstPassRewardReq) Reset() {
	*x = TakeEffigyFirstPassRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeEffigyFirstPassRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeEffigyFirstPassRewardReq) ProtoMessage() {}

func (x *TakeEffigyFirstPassRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeEffigyFirstPassRewardReq.ProtoReflect.Descriptor instead.
func (*TakeEffigyFirstPassRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{96}
}

func (x *TakeEffigyFirstPassRewardReq) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type TakeEffigyFirstPassRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId uint32 `protobuf:"varint,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Retcode     int32  `protobuf:"varint,7,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *TakeEffigyFirstPassRewardRsp) Reset() {
	*x = TakeEffigyFirstPassRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeEffigyFirstPassRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeEffigyFirstPassRewardRsp) ProtoMessage() {}

func (x *TakeEffigyFirstPassRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeEffigyFirstPassRewardRsp.ProtoReflect.Descriptor instead.
func (*TakeEffigyFirstPassRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{97}
}

func (x *TakeEffigyFirstPassRewardRsp) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *TakeEffigyFirstPassRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type TakeEffigyRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardIndex uint32 `protobuf:"varint,14,opt,name=reward_index,json=rewardIndex,proto3" json:"reward_index,omitempty"`
}

func (x *TakeEffigyRewardReq) Reset() {
	*x = TakeEffigyRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeEffigyRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeEffigyRewardReq) ProtoMessage() {}

func (x *TakeEffigyRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeEffigyRewardReq.ProtoReflect.Descriptor instead.
func (*TakeEffigyRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{98}
}

func (x *TakeEffigyRewardReq) GetRewardIndex() uint32 {
	if x != nil {
		return x.RewardIndex
	}
	return 0
}

type TakeEffigyRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode     int32  `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RewardIndex uint32 `protobuf:"varint,7,opt,name=reward_index,json=rewardIndex,proto3" json:"reward_index,omitempty"`
}

func (x *TakeEffigyRewardRsp) Reset() {
	*x = TakeEffigyRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeEffigyRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeEffigyRewardRsp) ProtoMessage() {}

func (x *TakeEffigyRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeEffigyRewardRsp.ProtoReflect.Descriptor instead.
func (*TakeEffigyRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{99}
}

func (x *TakeEffigyRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TakeEffigyRewardRsp) GetRewardIndex() uint32 {
	if x != nil {
		return x.RewardIndex
	}
	return 0
}

type SelectEffigyChallengeConditionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DifficultyId    uint32   `protobuf:"varint,15,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	ChallengeId     uint32   `protobuf:"varint,7,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	ConditionIdList []uint32 `protobuf:"varint,9,rep,packed,name=condition_id_list,json=conditionIdList,proto3" json:"condition_id_list,omitempty"`
}

func (x *SelectEffigyChallengeConditionReq) Reset() {
	*x = SelectEffigyChallengeConditionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectEffigyChallengeConditionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectEffigyChallengeConditionReq) ProtoMessage() {}

func (x *SelectEffigyChallengeConditionReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectEffigyChallengeConditionReq.ProtoReflect.Descriptor instead.
func (*SelectEffigyChallengeConditionReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{100}
}

func (x *SelectEffigyChallengeConditionReq) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *SelectEffigyChallengeConditionReq) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *SelectEffigyChallengeConditionReq) GetConditionIdList() []uint32 {
	if x != nil {
		return x.ConditionIdList
	}
	return nil
}

type SelectEffigyChallengeConditionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionIdList []uint32 `protobuf:"varint,12,rep,packed,name=condition_id_list,json=conditionIdList,proto3" json:"condition_id_list,omitempty"`
	Retcode         int32    `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	DifficultyId    uint32   `protobuf:"varint,7,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	ChallengeId     uint32   `protobuf:"varint,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *SelectEffigyChallengeConditionRsp) Reset() {
	*x = SelectEffigyChallengeConditionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectEffigyChallengeConditionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectEffigyChallengeConditionRsp) ProtoMessage() {}

func (x *SelectEffigyChallengeConditionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectEffigyChallengeConditionRsp.ProtoReflect.Descriptor instead.
func (*SelectEffigyChallengeConditionRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{101}
}

func (x *SelectEffigyChallengeConditionRsp) GetConditionIdList() []uint32 {
	if x != nil {
		return x.ConditionIdList
	}
	return nil
}

func (x *SelectEffigyChallengeConditionRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *SelectEffigyChallengeConditionRsp) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *SelectEffigyChallengeConditionRsp) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type RestartEffigyChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartEffigyChallengeReq) Reset() {
	*x = RestartEffigyChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartEffigyChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartEffigyChallengeReq) ProtoMessage() {}

func (x *RestartEffigyChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartEffigyChallengeReq.ProtoReflect.Descriptor instead.
func (*RestartEffigyChallengeReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{102}
}

type RestartEffigyChallengeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *RestartEffigyChallengeRsp) Reset() {
	*x = RestartEffigyChallengeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartEffigyChallengeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartEffigyChallengeRsp) ProtoMessage() {}

func (x *RestartEffigyChallengeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartEffigyChallengeRsp.ProtoReflect.Descriptor instead.
func (*RestartEffigyChallengeRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{103}
}

func (x *RestartEffigyChallengeRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type TreasureMapRegionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime       uint32  `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	CurrentProgress uint32  `protobuf:"varint,11,opt,name=current_progress,json=currentProgress,proto3" json:"current_progress,omitempty"`
	IsDoneMpSpot    bool    `protobuf:"varint,3,opt,name=is_done_mp_spot,json=isDoneMpSpot,proto3" json:"is_done_mp_spot,omitempty"`
	SceneId         uint32  `protobuf:"varint,2,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	GoalPoints      uint32  `protobuf:"varint,12,opt,name=goal_points,json=goalPoints,proto3" json:"goal_points,omitempty"`
	IsFindMpSpot    bool    `protobuf:"varint,4,opt,name=is_find_mp_spot,json=isFindMpSpot,proto3" json:"is_find_mp_spot,omitempty"`
	RegionRadius    uint32  `protobuf:"varint,1,opt,name=region_radius,json=regionRadius,proto3" json:"region_radius,omitempty"`
	RegionCenterPos *Vector `protobuf:"bytes,9,opt,name=region_center_pos,json=regionCenterPos,proto3" json:"region_center_pos,omitempty"`
	RegionId        uint32  `protobuf:"varint,5,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *TreasureMapRegionInfo) Reset() {
	*x = TreasureMapRegionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapRegionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapRegionInfo) ProtoMessage() {}

func (x *TreasureMapRegionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapRegionInfo.ProtoReflect.Descriptor instead.
func (*TreasureMapRegionInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{104}
}

func (x *TreasureMapRegionInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TreasureMapRegionInfo) GetCurrentProgress() uint32 {
	if x != nil {
		return x.CurrentProgress
	}
	return 0
}

func (x *TreasureMapRegionInfo) GetIsDoneMpSpot() bool {
	if x != nil {
		return x.IsDoneMpSpot
	}
	return false
}

func (x *TreasureMapRegionInfo) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *TreasureMapRegionInfo) GetGoalPoints() uint32 {
	if x != nil {
		return x.GoalPoints
	}
	return 0
}

func (x *TreasureMapRegionInfo) GetIsFindMpSpot() bool {
	if x != nil {
		return x.IsFindMpSpot
	}
	return false
}

func (x *TreasureMapRegionInfo) GetRegionRadius() uint32 {
	if x != nil {
		return x.RegionRadius
	}
	return 0
}

func (x *TreasureMapRegionInfo) GetRegionCenterPos() *Vector {
	if x != nil {
		return x.RegionCenterPos
	}
	return nil
}

func (x *TreasureMapRegionInfo) GetRegionId() uint32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

type TreasureMapBonusChallengeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDone      bool            `protobuf:"varint,5,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	ConfigId    uint32          `protobuf:"varint,10,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	IsActive    bool            `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	FragmentMap map[uint32]bool `protobuf:"bytes,12,rep,name=fragment_map,json=fragmentMap,proto3" json:"fragment_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SolutionId  uint32          `protobuf:"varint,8,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
}

func (x *TreasureMapBonusChallengeInfo) Reset() {
	*x = TreasureMapBonusChallengeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapBonusChallengeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapBonusChallengeInfo) ProtoMessage() {}

func (x *TreasureMapBonusChallengeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapBonusChallengeInfo.ProtoReflect.Descriptor instead.
func (*TreasureMapBonusChallengeInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{105}
}

func (x *TreasureMapBonusChallengeInfo) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *TreasureMapBonusChallengeInfo) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *TreasureMapBonusChallengeInfo) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *TreasureMapBonusChallengeInfo) GetFragmentMap() map[uint32]bool {
	if x != nil {
		return x.FragmentMap
	}
	return nil
}

func (x *TreasureMapBonusChallengeInfo) GetSolutionId() uint32 {
	if x != nil {
		return x.SolutionId
	}
	return 0
}

type TreasureMapActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveRegionIndex    uint32                           `protobuf:"varint,1,opt,name=active_region_index,json=activeRegionIndex,proto3" json:"active_region_index,omitempty"`
	RegionInfoList       []*TreasureMapRegionInfo         `protobuf:"bytes,6,rep,name=region_info_list,json=regionInfoList,proto3" json:"region_info_list,omitempty"`
	IsMpChallengeTouched bool                             `protobuf:"varint,7,opt,name=is_mp_challenge_touched,json=isMpChallengeTouched,proto3" json:"is_mp_challenge_touched,omitempty"`
	TreasureCloseTime    uint32                           `protobuf:"varint,10,opt,name=treasure_close_time,json=treasureCloseTime,proto3" json:"treasure_close_time,omitempty"`
	BonusChallengeList   []*TreasureMapBonusChallengeInfo `protobuf:"bytes,5,rep,name=bonus_challenge_list,json=bonusChallengeList,proto3" json:"bonus_challenge_list,omitempty"`
	CurrencyNum          uint32                           `protobuf:"varint,2,opt,name=currency_num,json=currencyNum,proto3" json:"currency_num,omitempty"`
	PreviewRewardId      uint32                           `protobuf:"varint,14,opt,name=preview_reward_id,json=previewRewardId,proto3" json:"preview_reward_id,omitempty"`
	MinOpenPlayerLevel   uint32                           `protobuf:"varint,8,opt,name=min_open_player_level,json=minOpenPlayerLevel,proto3" json:"min_open_player_level,omitempty"`
	TotalMpSpotNum       uint32                           `protobuf:"varint,13,opt,name=total_mp_spot_num,json=totalMpSpotNum,proto3" json:"total_mp_spot_num,omitempty"`
}

func (x *TreasureMapActivityDetailInfo) Reset() {
	*x = TreasureMapActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapActivityDetailInfo) ProtoMessage() {}

func (x *TreasureMapActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*TreasureMapActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{106}
}

func (x *TreasureMapActivityDetailInfo) GetActiveRegionIndex() uint32 {
	if x != nil {
		return x.ActiveRegionIndex
	}
	return 0
}

func (x *TreasureMapActivityDetailInfo) GetRegionInfoList() []*TreasureMapRegionInfo {
	if x != nil {
		return x.RegionInfoList
	}
	return nil
}

func (x *TreasureMapActivityDetailInfo) GetIsMpChallengeTouched() bool {
	if x != nil {
		return x.IsMpChallengeTouched
	}
	return false
}

func (x *TreasureMapActivityDetailInfo) GetTreasureCloseTime() uint32 {
	if x != nil {
		return x.TreasureCloseTime
	}
	return 0
}

func (x *TreasureMapActivityDetailInfo) GetBonusChallengeList() []*TreasureMapBonusChallengeInfo {
	if x != nil {
		return x.BonusChallengeList
	}
	return nil
}

func (x *TreasureMapActivityDetailInfo) GetCurrencyNum() uint32 {
	if x != nil {
		return x.CurrencyNum
	}
	return 0
}

func (x *TreasureMapActivityDetailInfo) GetPreviewRewardId() uint32 {
	if x != nil {
		return x.PreviewRewardId
	}
	return 0
}

func (x *TreasureMapActivityDetailInfo) GetMinOpenPlayerLevel() uint32 {
	if x != nil {
		return x.MinOpenPlayerLevel
	}
	return 0
}

func (x *TreasureMapActivityDetailInfo) GetTotalMpSpotNum() uint32 {
	if x != nil {
		return x.TotalMpSpotNum
	}
	return 0
}

type TreasureMapRegionInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionInfo *TreasureMapRegionInfo `protobuf:"bytes,14,opt,name=region_info,json=regionInfo,proto3" json:"region_info,omitempty"`
}

func (x *TreasureMapRegionInfoNotify) Reset() {
	*x = TreasureMapRegionInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapRegionInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapRegionInfoNotify) ProtoMessage() {}

func (x *TreasureMapRegionInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapRegionInfoNotify.ProtoReflect.Descriptor instead.
func (*TreasureMapRegionInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{107}
}

func (x *TreasureMapRegionInfoNotify) GetRegionInfo() *TreasureMapRegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

type TreasureMapCurrencyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyNum uint32 `protobuf:"varint,8,opt,name=currency_num,json=currencyNum,proto3" json:"currency_num,omitempty"`
}

func (x *TreasureMapCurrencyNotify) Reset() {
	*x = TreasureMapCurrencyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapCurrencyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapCurrencyNotify) ProtoMessage() {}

func (x *TreasureMapCurrencyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapCurrencyNotify.ProtoReflect.Descriptor instead.
func (*TreasureMapCurrencyNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{108}
}

func (x *TreasureMapCurrencyNotify) GetCurrencyNum() uint32 {
	if x != nil {
		return x.CurrencyNum
	}
	return 0
}

type TreasureMapRegionActiveNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveRegionIndex uint32 `protobuf:"varint,14,opt,name=active_region_index,json=activeRegionIndex,proto3" json:"active_region_index,omitempty"`
}

func (x *TreasureMapRegionActiveNotify) Reset() {
	*x = TreasureMapRegionActiveNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapRegionActiveNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapRegionActiveNotify) ProtoMessage() {}

func (x *TreasureMapRegionActiveNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapRegionActiveNotify.ProtoReflect.Descriptor instead.
func (*TreasureMapRegionActiveNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{109}
}

func (x *TreasureMapRegionActiveNotify) GetActiveRegionIndex() uint32 {
	if x != nil {
		return x.ActiveRegionIndex
	}
	return 0
}

type TreasureMapMpChallengeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TreasureMapMpChallengeNotify) Reset() {
	*x = TreasureMapMpChallengeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapMpChallengeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapMpChallengeNotify) ProtoMessage() {}

func (x *TreasureMapMpChallengeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapMpChallengeNotify.ProtoReflect.Descriptor instead.
func (*TreasureMapMpChallengeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{110}
}

type TreasureMapBonusChallengeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TreasureMapBonusChallengeInfo `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *TreasureMapBonusChallengeNotify) Reset() {
	*x = TreasureMapBonusChallengeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapBonusChallengeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapBonusChallengeNotify) ProtoMessage() {}

func (x *TreasureMapBonusChallengeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapBonusChallengeNotify.ProtoReflect.Descriptor instead.
func (*TreasureMapBonusChallengeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{111}
}

func (x *TreasureMapBonusChallengeNotify) GetInfo() *TreasureMapBonusChallengeInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type TreasureMapGuideTaskDoneNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TreasureMapGuideTaskDoneNotify) Reset() {
	*x = TreasureMapGuideTaskDoneNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapGuideTaskDoneNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapGuideTaskDoneNotify) ProtoMessage() {}

func (x *TreasureMapGuideTaskDoneNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapGuideTaskDoneNotify.ProtoReflect.Descriptor instead.
func (*TreasureMapGuideTaskDoneNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{112}
}

type TreasureMapPreTaskDoneNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TreasureMapPreTaskDoneNotify) Reset() {
	*x = TreasureMapPreTaskDoneNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapPreTaskDoneNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapPreTaskDoneNotify) ProtoMessage() {}

func (x *TreasureMapPreTaskDoneNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapPreTaskDoneNotify.ProtoReflect.Descriptor instead.
func (*TreasureMapPreTaskDoneNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{113}
}

type BlessingActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurDayScanType   uint32            `protobuf:"varint,9,opt,name=cur_day_scan_type,json=curDayScanType,proto3" json:"cur_day_scan_type,omitempty"`
	IsContentClosed  bool              `protobuf:"varint,11,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	PicNumMap        map[uint32]uint32 `protobuf:"bytes,15,rep,name=pic_num_map,json=picNumMap,proto3" json:"pic_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ContentCloseTime uint32            `protobuf:"varint,2,opt,name=content_close_time,json=contentCloseTime,proto3" json:"content_close_time,omitempty"`
	CurDayScanNum    uint32            `protobuf:"varint,4,opt,name=cur_day_scan_num,json=curDayScanNum,proto3" json:"cur_day_scan_num,omitempty"`
	RedeemRewardNum  uint32            `protobuf:"varint,1,opt,name=redeem_reward_num,json=redeemRewardNum,proto3" json:"redeem_reward_num,omitempty"`
	IsActivated      bool              `protobuf:"varint,13,opt,name=is_activated,json=isActivated,proto3" json:"is_activated,omitempty"`
	NextRefreshTime  uint32            `protobuf:"varint,6,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
}

func (x *BlessingActivityDetailInfo) Reset() {
	*x = BlessingActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingActivityDetailInfo) ProtoMessage() {}

func (x *BlessingActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*BlessingActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{114}
}

func (x *BlessingActivityDetailInfo) GetCurDayScanType() uint32 {
	if x != nil {
		return x.CurDayScanType
	}
	return 0
}

func (x *BlessingActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *BlessingActivityDetailInfo) GetPicNumMap() map[uint32]uint32 {
	if x != nil {
		return x.PicNumMap
	}
	return nil
}

func (x *BlessingActivityDetailInfo) GetContentCloseTime() uint32 {
	if x != nil {
		return x.ContentCloseTime
	}
	return 0
}

func (x *BlessingActivityDetailInfo) GetCurDayScanNum() uint32 {
	if x != nil {
		return x.CurDayScanNum
	}
	return 0
}

func (x *BlessingActivityDetailInfo) GetRedeemRewardNum() uint32 {
	if x != nil {
		return x.RedeemRewardNum
	}
	return 0
}

func (x *BlessingActivityDetailInfo) GetIsActivated() bool {
	if x != nil {
		return x.IsActivated
	}
	return false
}

func (x *BlessingActivityDetailInfo) GetNextRefreshTime() uint32 {
	if x != nil {
		return x.NextRefreshTime
	}
	return 0
}

type BlessingScanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId uint32 `protobuf:"varint,11,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (x *BlessingScanReq) Reset() {
	*x = BlessingScanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingScanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingScanReq) ProtoMessage() {}

func (x *BlessingScanReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingScanReq.ProtoReflect.Descriptor instead.
func (*BlessingScanReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{115}
}

func (x *BlessingScanReq) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

type BlessingScanRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanPicId     uint32 `protobuf:"varint,4,opt,name=scan_pic_id,json=scanPicId,proto3" json:"scan_pic_id,omitempty"`
	Retcode       int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	CurDayScanNum uint32 `protobuf:"varint,1,opt,name=cur_day_scan_num,json=curDayScanNum,proto3" json:"cur_day_scan_num,omitempty"`
}

func (x *BlessingScanRsp) Reset() {
	*x = BlessingScanRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingScanRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingScanRsp) ProtoMessage() {}

func (x *BlessingScanRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingScanRsp.ProtoReflect.Descriptor instead.
func (*BlessingScanRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{116}
}

func (x *BlessingScanRsp) GetScanPicId() uint32 {
	if x != nil {
		return x.ScanPicId
	}
	return 0
}

func (x *BlessingScanRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BlessingScanRsp) GetCurDayScanNum() uint32 {
	if x != nil {
		return x.CurDayScanNum
	}
	return 0
}

type BlessingRedeemRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlessingRedeemRewardReq) Reset() {
	*x = BlessingRedeemRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingRedeemRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingRedeemRewardReq) ProtoMessage() {}

func (x *BlessingRedeemRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingRedeemRewardReq.ProtoReflect.Descriptor instead.
func (*BlessingRedeemRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{117}
}

type BlessingRedeemRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PicNumMap map[uint32]uint32 `protobuf:"bytes,12,rep,name=pic_num_map,json=picNumMap,proto3" json:"pic_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Retcode   int32             `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *BlessingRedeemRewardRsp) Reset() {
	*x = BlessingRedeemRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingRedeemRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingRedeemRewardRsp) ProtoMessage() {}

func (x *BlessingRedeemRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingRedeemRewardRsp.ProtoReflect.Descriptor instead.
func (*BlessingRedeemRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{118}
}

func (x *BlessingRedeemRewardRsp) GetPicNumMap() map[uint32]uint32 {
	if x != nil {
		return x.PicNumMap
	}
	return nil
}

func (x *BlessingRedeemRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type BlessingFriendPicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PicNumMap      map[uint32]uint32 `protobuf:"bytes,4,rep,name=pic_num_map,json=picNumMap,proto3" json:"pic_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AvatarId       uint32            `protobuf:"varint,5,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	RemarkName     string            `protobuf:"bytes,11,opt,name=remark_name,json=remarkName,proto3" json:"remark_name,omitempty"`
	Nickname       string            `protobuf:"bytes,14,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Signature      string            `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	ProfilePicture *ProfilePicture   `protobuf:"bytes,6,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	Uid            uint32            `protobuf:"varint,9,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *BlessingFriendPicData) Reset() {
	*x = BlessingFriendPicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingFriendPicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingFriendPicData) ProtoMessage() {}

func (x *BlessingFriendPicData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingFriendPicData.ProtoReflect.Descriptor instead.
func (*BlessingFriendPicData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{119}
}

func (x *BlessingFriendPicData) GetPicNumMap() map[uint32]uint32 {
	if x != nil {
		return x.PicNumMap
	}
	return nil
}

func (x *BlessingFriendPicData) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *BlessingFriendPicData) GetRemarkName() string {
	if x != nil {
		return x.RemarkName
	}
	return ""
}

func (x *BlessingFriendPicData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BlessingFriendPicData) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *BlessingFriendPicData) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *BlessingFriendPicData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type BlessingRecvPicRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname       string          `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	RemarkName     string          `protobuf:"bytes,2,opt,name=remark_name,json=remarkName,proto3" json:"remark_name,omitempty"`
	PicId          uint32          `protobuf:"varint,3,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	Uid            uint32          `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	AvatarId       uint32          `protobuf:"varint,6,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Signature      string          `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
	Index          uint32          `protobuf:"varint,14,opt,name=index,proto3" json:"index,omitempty"`
	IsRecv         bool            `protobuf:"varint,7,opt,name=is_recv,json=isRecv,proto3" json:"is_recv,omitempty"`
	ProfilePicture *ProfilePicture `protobuf:"bytes,9,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
}

func (x *BlessingRecvPicRecord) Reset() {
	*x = BlessingRecvPicRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingRecvPicRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingRecvPicRecord) ProtoMessage() {}

func (x *BlessingRecvPicRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingRecvPicRecord.ProtoReflect.Descriptor instead.
func (*BlessingRecvPicRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{120}
}

func (x *BlessingRecvPicRecord) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BlessingRecvPicRecord) GetRemarkName() string {
	if x != nil {
		return x.RemarkName
	}
	return ""
}

func (x *BlessingRecvPicRecord) GetPicId() uint32 {
	if x != nil {
		return x.PicId
	}
	return 0
}

func (x *BlessingRecvPicRecord) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BlessingRecvPicRecord) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *BlessingRecvPicRecord) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *BlessingRecvPicRecord) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BlessingRecvPicRecord) GetIsRecv() bool {
	if x != nil {
		return x.IsRecv
	}
	return false
}

func (x *BlessingRecvPicRecord) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

type BlessingGetFriendPicListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlessingGetFriendPicListReq) Reset() {
	*x = BlessingGetFriendPicListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingGetFriendPicListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingGetFriendPicListReq) ProtoMessage() {}

func (x *BlessingGetFriendPicListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingGetFriendPicListReq.ProtoReflect.Descriptor instead.
func (*BlessingGetFriendPicListReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{121}
}

type BlessingGetFriendPicListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode           int32                    `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	FriendPicDataList []*BlessingFriendPicData `protobuf:"bytes,6,rep,name=friend_pic_data_list,json=friendPicDataList,proto3" json:"friend_pic_data_list,omitempty"`
}

func (x *BlessingGetFriendPicListRsp) Reset() {
	*x = BlessingGetFriendPicListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingGetFriendPicListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingGetFriendPicListRsp) ProtoMessage() {}

func (x *BlessingGetFriendPicListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingGetFriendPicListRsp.ProtoReflect.Descriptor instead.
func (*BlessingGetFriendPicListRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{122}
}

func (x *BlessingGetFriendPicListRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BlessingGetFriendPicListRsp) GetFriendPicDataList() []*BlessingFriendPicData {
	if x != nil {
		return x.FriendPicDataList
	}
	return nil
}

type BlessingGiveFriendPicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   uint32 `protobuf:"varint,11,opt,name=uid,proto3" json:"uid,omitempty"`
	PicId uint32 `protobuf:"varint,3,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
}

func (x *BlessingGiveFriendPicReq) Reset() {
	*x = BlessingGiveFriendPicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingGiveFriendPicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingGiveFriendPicReq) ProtoMessage() {}

func (x *BlessingGiveFriendPicReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingGiveFriendPicReq.ProtoReflect.Descriptor instead.
func (*BlessingGiveFriendPicReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{123}
}

func (x *BlessingGiveFriendPicReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BlessingGiveFriendPicReq) GetPicId() uint32 {
	if x != nil {
		return x.PicId
	}
	return 0
}

type BlessingGiveFriendPicRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PicId   uint32 `protobuf:"varint,10,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	Retcode int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	Uid     uint32 `protobuf:"varint,13,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *BlessingGiveFriendPicRsp) Reset() {
	*x = BlessingGiveFriendPicRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingGiveFriendPicRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingGiveFriendPicRsp) ProtoMessage() {}

func (x *BlessingGiveFriendPicRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingGiveFriendPicRsp.ProtoReflect.Descriptor instead.
func (*BlessingGiveFriendPicRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{124}
}

func (x *BlessingGiveFriendPicRsp) GetPicId() uint32 {
	if x != nil {
		return x.PicId
	}
	return 0
}

func (x *BlessingGiveFriendPicRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BlessingGiveFriendPicRsp) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type BlessingAcceptGivePicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,9,opt,name=index,proto3" json:"index,omitempty"`
	Uid   uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *BlessingAcceptGivePicReq) Reset() {
	*x = BlessingAcceptGivePicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingAcceptGivePicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingAcceptGivePicReq) ProtoMessage() {}

func (x *BlessingAcceptGivePicReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingAcceptGivePicReq.ProtoReflect.Descriptor instead.
func (*BlessingAcceptGivePicReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{125}
}

func (x *BlessingAcceptGivePicReq) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BlessingAcceptGivePicReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type BlessingAcceptGivePicRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PicId   uint32 `protobuf:"varint,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	Retcode int32  `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
	Index   uint32 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	Uid     uint32 `protobuf:"varint,14,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *BlessingAcceptGivePicRsp) Reset() {
	*x = BlessingAcceptGivePicRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingAcceptGivePicRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingAcceptGivePicRsp) ProtoMessage() {}

func (x *BlessingAcceptGivePicRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingAcceptGivePicRsp.ProtoReflect.Descriptor instead.
func (*BlessingAcceptGivePicRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{126}
}

func (x *BlessingAcceptGivePicRsp) GetPicId() uint32 {
	if x != nil {
		return x.PicId
	}
	return 0
}

func (x *BlessingAcceptGivePicRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BlessingAcceptGivePicRsp) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BlessingAcceptGivePicRsp) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type BlessingGetAllRecvPicRecordListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlessingGetAllRecvPicRecordListReq) Reset() {
	*x = BlessingGetAllRecvPicRecordListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingGetAllRecvPicRecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingGetAllRecvPicRecordListReq) ProtoMessage() {}

func (x *BlessingGetAllRecvPicRecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingGetAllRecvPicRecordListReq.ProtoReflect.Descriptor instead.
func (*BlessingGetAllRecvPicRecordListReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{127}
}

type BlessingGetAllRecvPicRecordListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecvPicRecordList []*BlessingRecvPicRecord `protobuf:"bytes,15,rep,name=recv_pic_record_list,json=recvPicRecordList,proto3" json:"recv_pic_record_list,omitempty"`
	Retcode           int32                    `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *BlessingGetAllRecvPicRecordListRsp) Reset() {
	*x = BlessingGetAllRecvPicRecordListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingGetAllRecvPicRecordListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingGetAllRecvPicRecordListRsp) ProtoMessage() {}

func (x *BlessingGetAllRecvPicRecordListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingGetAllRecvPicRecordListRsp.ProtoReflect.Descriptor instead.
func (*BlessingGetAllRecvPicRecordListRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{128}
}

func (x *BlessingGetAllRecvPicRecordListRsp) GetRecvPicRecordList() []*BlessingRecvPicRecord {
	if x != nil {
		return x.RecvPicRecordList
	}
	return nil
}

func (x *BlessingGetAllRecvPicRecordListRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type BlessingRecvFriendPicNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   uint32 `protobuf:"varint,15,opt,name=uid,proto3" json:"uid,omitempty"`
	PicId uint32 `protobuf:"varint,5,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
}

func (x *BlessingRecvFriendPicNotify) Reset() {
	*x = BlessingRecvFriendPicNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingRecvFriendPicNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingRecvFriendPicNotify) ProtoMessage() {}

func (x *BlessingRecvFriendPicNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingRecvFriendPicNotify.ProtoReflect.Descriptor instead.
func (*BlessingRecvFriendPicNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{129}
}

func (x *BlessingRecvFriendPicNotify) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BlessingRecvFriendPicNotify) GetPicId() uint32 {
	if x != nil {
		return x.PicId
	}
	return 0
}

type BlessingAcceptAllGivePicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlessingAcceptAllGivePicReq) Reset() {
	*x = BlessingAcceptAllGivePicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingAcceptAllGivePicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingAcceptAllGivePicReq) ProtoMessage() {}

func (x *BlessingAcceptAllGivePicReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingAcceptAllGivePicReq.ProtoReflect.Descriptor instead.
func (*BlessingAcceptAllGivePicReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{130}
}

type BlessingAcceptAllGivePicRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode         int32             `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	AcceptPicNumMap map[uint32]uint32 `protobuf:"bytes,14,rep,name=accept_pic_num_map,json=acceptPicNumMap,proto3" json:"accept_pic_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AcceptIndexList []uint32          `protobuf:"varint,5,rep,packed,name=accept_index_list,json=acceptIndexList,proto3" json:"accept_index_list,omitempty"`
}

func (x *BlessingAcceptAllGivePicRsp) Reset() {
	*x = BlessingAcceptAllGivePicRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlessingAcceptAllGivePicRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlessingAcceptAllGivePicRsp) ProtoMessage() {}

func (x *BlessingAcceptAllGivePicRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlessingAcceptAllGivePicRsp.ProtoReflect.Descriptor instead.
func (*BlessingAcceptAllGivePicRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{131}
}

func (x *BlessingAcceptAllGivePicRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BlessingAcceptAllGivePicRsp) GetAcceptPicNumMap() map[uint32]uint32 {
	if x != nil {
		return x.AcceptPicNumMap
	}
	return nil
}

func (x *BlessingAcceptAllGivePicRsp) GetAcceptIndexList() []uint32 {
	if x != nil {
		return x.AcceptIndexList
	}
	return nil
}

type ExpeditionPathInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkId           uint32          `protobuf:"varint,12,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`
	StartTime        uint32          `protobuf:"varint,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	AssistAvatarId   uint32          `protobuf:"varint,7,opt,name=assist_avatar_id,json=assistAvatarId,proto3" json:"assist_avatar_id,omitempty"`
	BonusProbability float32         `protobuf:"fixed32,4,opt,name=bonus_probability,json=bonusProbability,proto3" json:"bonus_probability,omitempty"`
	State            ExpeditionState `protobuf:"varint,15,opt,name=state,proto3,enum=proto.ExpeditionState" json:"state,omitempty"`
	AvatarIdList     []uint32        `protobuf:"varint,2,rep,packed,name=avatar_id_list,json=avatarIdList,proto3" json:"avatar_id_list,omitempty"`
	AssistCostumeId  uint32          `protobuf:"varint,5,opt,name=assist_costume_id,json=assistCostumeId,proto3" json:"assist_costume_id,omitempty"`
	PathId           uint32          `protobuf:"varint,8,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	ChallengeId      uint32          `protobuf:"varint,11,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	AssistUid        uint32          `protobuf:"varint,10,opt,name=assist_uid,json=assistUid,proto3" json:"assist_uid,omitempty"`
}

func (x *ExpeditionPathInfo) Reset() {
	*x = ExpeditionPathInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionPathInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionPathInfo) ProtoMessage() {}

func (x *ExpeditionPathInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionPathInfo.ProtoReflect.Descriptor instead.
func (*ExpeditionPathInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{132}
}

func (x *ExpeditionPathInfo) GetMarkId() uint32 {
	if x != nil {
		return x.MarkId
	}
	return 0
}

func (x *ExpeditionPathInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ExpeditionPathInfo) GetAssistAvatarId() uint32 {
	if x != nil {
		return x.AssistAvatarId
	}
	return 0
}

func (x *ExpeditionPathInfo) GetBonusProbability() float32 {
	if x != nil {
		return x.BonusProbability
	}
	return 0
}

func (x *ExpeditionPathInfo) GetState() ExpeditionState {
	if x != nil {
		return x.State
	}
	return ExpeditionState_EXPEDITION_NONE
}

func (x *ExpeditionPathInfo) GetAvatarIdList() []uint32 {
	if x != nil {
		return x.AvatarIdList
	}
	return nil
}

func (x *ExpeditionPathInfo) GetAssistCostumeId() uint32 {
	if x != nil {
		return x.AssistCostumeId
	}
	return 0
}

func (x *ExpeditionPathInfo) GetPathId() uint32 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *ExpeditionPathInfo) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *ExpeditionPathInfo) GetAssistUid() uint32 {
	if x != nil {
		return x.AssistUid
	}
	return 0
}

type ExpeditionChallengeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished bool   `protobuf:"varint,5,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	Id         uint32 `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
	OpenTime   uint32 `protobuf:"varint,9,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
}

func (x *ExpeditionChallengeInfo) Reset() {
	*x = ExpeditionChallengeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionChallengeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionChallengeInfo) ProtoMessage() {}

func (x *ExpeditionChallengeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionChallengeInfo.ProtoReflect.Descriptor instead.
func (*ExpeditionChallengeInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{133}
}

func (x *ExpeditionChallengeInfo) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *ExpeditionChallengeInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExpeditionChallengeInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

type ExpeditionActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurChallengeId    uint32                     `protobuf:"varint,5,opt,name=cur_challenge_id,json=curChallengeId,proto3" json:"cur_challenge_id,omitempty"`
	ChallengeInfoList []*ExpeditionChallengeInfo `protobuf:"bytes,10,rep,name=challenge_info_list,json=challengeInfoList,proto3" json:"challenge_info_list,omitempty"`
	ExpeditionCount   uint32                     `protobuf:"varint,2,opt,name=expedition_count,json=expeditionCount,proto3" json:"expedition_count,omitempty"`
	ContentCloseTime  uint32                     `protobuf:"varint,4,opt,name=content_close_time,json=contentCloseTime,proto3" json:"content_close_time,omitempty"`
	IsContentClosed   bool                       `protobuf:"varint,8,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	PathInfoList      []*ExpeditionPathInfo      `protobuf:"bytes,15,rep,name=path_info_list,json=pathInfoList,proto3" json:"path_info_list,omitempty"`
}

func (x *ExpeditionActivityDetailInfo) Reset() {
	*x = ExpeditionActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionActivityDetailInfo) ProtoMessage() {}

func (x *ExpeditionActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*ExpeditionActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{134}
}

func (x *ExpeditionActivityDetailInfo) GetCurChallengeId() uint32 {
	if x != nil {
		return x.CurChallengeId
	}
	return 0
}

func (x *ExpeditionActivityDetailInfo) GetChallengeInfoList() []*ExpeditionChallengeInfo {
	if x != nil {
		return x.ChallengeInfoList
	}
	return nil
}

func (x *ExpeditionActivityDetailInfo) GetExpeditionCount() uint32 {
	if x != nil {
		return x.ExpeditionCount
	}
	return 0
}

func (x *ExpeditionActivityDetailInfo) GetContentCloseTime() uint32 {
	if x != nil {
		return x.ContentCloseTime
	}
	return 0
}

func (x *ExpeditionActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *ExpeditionActivityDetailInfo) GetPathInfoList() []*ExpeditionPathInfo {
	if x != nil {
		return x.PathInfoList
	}
	return nil
}

type ExpeditionStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarIdList   []uint32 `protobuf:"varint,1,rep,packed,name=avatar_id_list,json=avatarIdList,proto3" json:"avatar_id_list,omitempty"`
	AssistUid      uint32   `protobuf:"varint,5,opt,name=assist_uid,json=assistUid,proto3" json:"assist_uid,omitempty"`
	AssistAvatarId uint32   `protobuf:"varint,8,opt,name=assist_avatar_id,json=assistAvatarId,proto3" json:"assist_avatar_id,omitempty"`
	PathId         uint32   `protobuf:"varint,7,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
}

func (x *ExpeditionStartReq) Reset() {
	*x = ExpeditionStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionStartReq) ProtoMessage() {}

func (x *ExpeditionStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionStartReq.ProtoReflect.Descriptor instead.
func (*ExpeditionStartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{135}
}

func (x *ExpeditionStartReq) GetAvatarIdList() []uint32 {
	if x != nil {
		return x.AvatarIdList
	}
	return nil
}

func (x *ExpeditionStartReq) GetAssistUid() uint32 {
	if x != nil {
		return x.AssistUid
	}
	return 0
}

func (x *ExpeditionStartReq) GetAssistAvatarId() uint32 {
	if x != nil {
		return x.AssistAvatarId
	}
	return 0
}

func (x *ExpeditionStartReq) GetPathId() uint32 {
	if x != nil {
		return x.PathId
	}
	return 0
}

type ExpeditionStartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistUid      uint32   `protobuf:"varint,1,opt,name=assist_uid,json=assistUid,proto3" json:"assist_uid,omitempty"`
	PathId         uint32   `protobuf:"varint,7,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	AvatarIdList   []uint32 `protobuf:"varint,4,rep,packed,name=avatar_id_list,json=avatarIdList,proto3" json:"avatar_id_list,omitempty"`
	Retcode        int32    `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
	AssistAvatarId uint32   `protobuf:"varint,2,opt,name=assist_avatar_id,json=assistAvatarId,proto3" json:"assist_avatar_id,omitempty"`
}

func (x *ExpeditionStartRsp) Reset() {
	*x = ExpeditionStartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionStartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionStartRsp) ProtoMessage() {}

func (x *ExpeditionStartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionStartRsp.ProtoReflect.Descriptor instead.
func (*ExpeditionStartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{136}
}

func (x *ExpeditionStartRsp) GetAssistUid() uint32 {
	if x != nil {
		return x.AssistUid
	}
	return 0
}

func (x *ExpeditionStartRsp) GetPathId() uint32 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *ExpeditionStartRsp) GetAvatarIdList() []uint32 {
	if x != nil {
		return x.AvatarIdList
	}
	return nil
}

func (x *ExpeditionStartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ExpeditionStartRsp) GetAssistAvatarId() uint32 {
	if x != nil {
		return x.AssistAvatarId
	}
	return 0
}

type ExpeditionRecallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId uint32 `protobuf:"varint,13,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
}

func (x *ExpeditionRecallReq) Reset() {
	*x = ExpeditionRecallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionRecallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionRecallReq) ProtoMessage() {}

func (x *ExpeditionRecallReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionRecallReq.ProtoReflect.Descriptor instead.
func (*ExpeditionRecallReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{137}
}

func (x *ExpeditionRecallReq) GetPathId() uint32 {
	if x != nil {
		return x.PathId
	}
	return 0
}

type ExpeditionRecallRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId  uint32 `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Retcode int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ExpeditionRecallRsp) Reset() {
	*x = ExpeditionRecallRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionRecallRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionRecallRsp) ProtoMessage() {}

func (x *ExpeditionRecallRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionRecallRsp.ProtoReflect.Descriptor instead.
func (*ExpeditionRecallRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{138}
}

func (x *ExpeditionRecallRsp) GetPathId() uint32 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *ExpeditionRecallRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ExpeditionTakeRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId uint32 `protobuf:"varint,3,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
}

func (x *ExpeditionTakeRewardReq) Reset() {
	*x = ExpeditionTakeRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionTakeRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionTakeRewardReq) ProtoMessage() {}

func (x *ExpeditionTakeRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionTakeRewardReq.ProtoReflect.Descriptor instead.
func (*ExpeditionTakeRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{139}
}

func (x *ExpeditionTakeRewardReq) GetPathId() uint32 {
	if x != nil {
		return x.PathId
	}
	return 0
}

type ExpeditionTakeRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode     int32  `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsBonus     bool   `protobuf:"varint,11,opt,name=is_bonus,json=isBonus,proto3" json:"is_bonus,omitempty"`
	RewardLevel uint32 `protobuf:"varint,1,opt,name=reward_level,json=rewardLevel,proto3" json:"reward_level,omitempty"`
	PathId      uint32 `protobuf:"varint,9,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
}

func (x *ExpeditionTakeRewardRsp) Reset() {
	*x = ExpeditionTakeRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionTakeRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionTakeRewardRsp) ProtoMessage() {}

func (x *ExpeditionTakeRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionTakeRewardRsp.ProtoReflect.Descriptor instead.
func (*ExpeditionTakeRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{140}
}

func (x *ExpeditionTakeRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ExpeditionTakeRewardRsp) GetIsBonus() bool {
	if x != nil {
		return x.IsBonus
	}
	return false
}

func (x *ExpeditionTakeRewardRsp) GetRewardLevel() uint32 {
	if x != nil {
		return x.RewardLevel
	}
	return 0
}

func (x *ExpeditionTakeRewardRsp) GetPathId() uint32 {
	if x != nil {
		return x.PathId
	}
	return 0
}

type ExpeditionAssistInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineId       string `protobuf:"bytes,14,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
	AssistTime     uint32 `protobuf:"varint,1,opt,name=assist_time,json=assistTime,proto3" json:"assist_time,omitempty"`
	CostumeId      uint32 `protobuf:"varint,6,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
	TargetNickName string `protobuf:"bytes,4,opt,name=target_nick_name,json=targetNickName,proto3" json:"target_nick_name,omitempty"`
	AvatarId       uint32 `protobuf:"varint,12,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *ExpeditionAssistInfo) Reset() {
	*x = ExpeditionAssistInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionAssistInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionAssistInfo) ProtoMessage() {}

func (x *ExpeditionAssistInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionAssistInfo.ProtoReflect.Descriptor instead.
func (*ExpeditionAssistInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{141}
}

func (x *ExpeditionAssistInfo) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

func (x *ExpeditionAssistInfo) GetAssistTime() uint32 {
	if x != nil {
		return x.AssistTime
	}
	return 0
}

func (x *ExpeditionAssistInfo) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

func (x *ExpeditionAssistInfo) GetTargetNickName() string {
	if x != nil {
		return x.TargetNickName
	}
	return ""
}

func (x *ExpeditionAssistInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type GetExpeditionAssistInfoListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetExpeditionAssistInfoListReq) Reset() {
	*x = GetExpeditionAssistInfoListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExpeditionAssistInfoListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExpeditionAssistInfoListReq) ProtoMessage() {}

func (x *GetExpeditionAssistInfoListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExpeditionAssistInfoListReq.ProtoReflect.Descriptor instead.
func (*GetExpeditionAssistInfoListReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{142}
}

type GetExpeditionAssistInfoListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistInfoList []*ExpeditionAssistInfo `protobuf:"bytes,6,rep,name=assist_info_list,json=assistInfoList,proto3" json:"assist_info_list,omitempty"`
	Retcode        int32                   `protobuf:"varint,7,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GetExpeditionAssistInfoListRsp) Reset() {
	*x = GetExpeditionAssistInfoListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExpeditionAssistInfoListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExpeditionAssistInfoListRsp) ProtoMessage() {}

func (x *GetExpeditionAssistInfoListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExpeditionAssistInfoListRsp.ProtoReflect.Descriptor instead.
func (*GetExpeditionAssistInfoListRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{143}
}

func (x *GetExpeditionAssistInfoListRsp) GetAssistInfoList() []*ExpeditionAssistInfo {
	if x != nil {
		return x.AssistInfoList
	}
	return nil
}

func (x *GetExpeditionAssistInfoListRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type SetCurExpeditionChallengeIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SetCurExpeditionChallengeIdReq) Reset() {
	*x = SetCurExpeditionChallengeIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCurExpeditionChallengeIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCurExpeditionChallengeIdReq) ProtoMessage() {}

func (x *SetCurExpeditionChallengeIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCurExpeditionChallengeIdReq.ProtoReflect.Descriptor instead.
func (*SetCurExpeditionChallengeIdReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{144}
}

func (x *SetCurExpeditionChallengeIdReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SetCurExpeditionChallengeIdRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,14,opt,name=id,proto3" json:"id,omitempty"`
	Retcode int32  `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SetCurExpeditionChallengeIdRsp) Reset() {
	*x = SetCurExpeditionChallengeIdRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCurExpeditionChallengeIdRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCurExpeditionChallengeIdRsp) ProtoMessage() {}

func (x *SetCurExpeditionChallengeIdRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCurExpeditionChallengeIdRsp.ProtoReflect.Descriptor instead.
func (*SetCurExpeditionChallengeIdRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{145}
}

func (x *SetCurExpeditionChallengeIdRsp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetCurExpeditionChallengeIdRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ExpeditionChallengeEnterRegionNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	IsPuzzleFinished bool   `protobuf:"varint,10,opt,name=is_puzzle_finished,json=isPuzzleFinished,proto3" json:"is_puzzle_finished,omitempty"`
}

func (x *ExpeditionChallengeEnterRegionNotify) Reset() {
	*x = ExpeditionChallengeEnterRegionNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionChallengeEnterRegionNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionChallengeEnterRegionNotify) ProtoMessage() {}

func (x *ExpeditionChallengeEnterRegionNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionChallengeEnterRegionNotify.ProtoReflect.Descriptor instead.
func (*ExpeditionChallengeEnterRegionNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{146}
}

func (x *ExpeditionChallengeEnterRegionNotify) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExpeditionChallengeEnterRegionNotify) GetIsPuzzleFinished() bool {
	if x != nil {
		return x.IsPuzzleFinished
	}
	return false
}

type ExpeditionChallengeFinishedNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,13,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ExpeditionChallengeFinishedNotify) Reset() {
	*x = ExpeditionChallengeFinishedNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpeditionChallengeFinishedNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpeditionChallengeFinishedNotify) ProtoMessage() {}

func (x *ExpeditionChallengeFinishedNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpeditionChallengeFinishedNotify.ProtoReflect.Descriptor instead.
func (*ExpeditionChallengeFinishedNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{147}
}

func (x *ExpeditionChallengeFinishedNotify) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WaterSpiritActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchTimeMap  map[uint32]uint32 `protobuf:"bytes,9,rep,name=search_time_map,json=searchTimeMap,proto3" json:"search_time_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RegionSearchId uint32            `protobuf:"varint,2,opt,name=region_search_id,json=regionSearchId,proto3" json:"region_search_id,omitempty"`
	MpPlayId       uint32            `protobuf:"varint,15,opt,name=mp_play_id,json=mpPlayId,proto3" json:"mp_play_id,omitempty"`
}

func (x *WaterSpiritActivityDetailInfo) Reset() {
	*x = WaterSpiritActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaterSpiritActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaterSpiritActivityDetailInfo) ProtoMessage() {}

func (x *WaterSpiritActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaterSpiritActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*WaterSpiritActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{148}
}

func (x *WaterSpiritActivityDetailInfo) GetSearchTimeMap() map[uint32]uint32 {
	if x != nil {
		return x.SearchTimeMap
	}
	return nil
}

func (x *WaterSpiritActivityDetailInfo) GetRegionSearchId() uint32 {
	if x != nil {
		return x.RegionSearchId
	}
	return 0
}

func (x *WaterSpiritActivityDetailInfo) GetMpPlayId() uint32 {
	if x != nil {
		return x.MpPlayId
	}
	return 0
}

type FleurFairChapterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenTime  uint32 `protobuf:"varint,15,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	ChapterId uint32 `protobuf:"varint,11,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
}

func (x *FleurFairChapterInfo) Reset() {
	*x = FleurFairChapterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairChapterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairChapterInfo) ProtoMessage() {}

func (x *FleurFairChapterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairChapterInfo.ProtoReflect.Descriptor instead.
func (*FleurFairChapterInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{149}
}

func (x *FleurFairChapterInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *FleurFairChapterInfo) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

type FleurFairBalloonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestScore uint32 `protobuf:"varint,4,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *FleurFairBalloonInfo) Reset() {
	*x = FleurFairBalloonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairBalloonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairBalloonInfo) ProtoMessage() {}

func (x *FleurFairBalloonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairBalloonInfo.ProtoReflect.Descriptor instead.
func (*FleurFairBalloonInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{150}
}

func (x *FleurFairBalloonInfo) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type FleurFairFallInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestScore uint32 `protobuf:"varint,10,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *FleurFairFallInfo) Reset() {
	*x = FleurFairFallInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairFallInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairFallInfo) ProtoMessage() {}

func (x *FleurFairFallInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairFallInfo.ProtoReflect.Descriptor instead.
func (*FleurFairFallInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{151}
}

func (x *FleurFairFallInfo) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type FleurFairMusicRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCombo uint32 `protobuf:"varint,1,opt,name=max_combo,json=maxCombo,proto3" json:"max_combo,omitempty"`
	MaxScore uint32 `protobuf:"varint,11,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	IsUnlock bool   `protobuf:"varint,12,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
}

func (x *FleurFairMusicRecord) Reset() {
	*x = FleurFairMusicRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairMusicRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairMusicRecord) ProtoMessage() {}

func (x *FleurFairMusicRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairMusicRecord.ProtoReflect.Descriptor instead.
func (*FleurFairMusicRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{152}
}

func (x *FleurFairMusicRecord) GetMaxCombo() uint32 {
	if x != nil {
		return x.MaxCombo
	}
	return 0
}

func (x *FleurFairMusicRecord) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *FleurFairMusicRecord) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

type FleurFairMusicGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicRecordMap map[uint32]*FleurFairMusicRecord `protobuf:"bytes,10,rep,name=music_record_map,json=musicRecordMap,proto3" json:"music_record_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FleurFairMusicGameInfo) Reset() {
	*x = FleurFairMusicGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairMusicGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairMusicGameInfo) ProtoMessage() {}

func (x *FleurFairMusicGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairMusicGameInfo.ProtoReflect.Descriptor instead.
func (*FleurFairMusicGameInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{153}
}

func (x *FleurFairMusicGameInfo) GetMusicRecordMap() map[uint32]*FleurFairMusicRecord {
	if x != nil {
		return x.MusicRecordMap
	}
	return nil
}

type FleurFairMinigameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinigameId uint32 `protobuf:"varint,13,opt,name=minigame_id,json=minigameId,proto3" json:"minigame_id,omitempty"`
	IsOpen     bool   `protobuf:"varint,8,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	OpenTime   uint32 `protobuf:"varint,15,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*FleurFairMinigameInfo_BalloonInfo
	//	*FleurFairMinigameInfo_FallInfo
	//	*FleurFairMinigameInfo_MusicInfo
	Detail isFleurFairMinigameInfo_Detail `protobuf_oneof:"detail"`
}

func (x *FleurFairMinigameInfo) Reset() {
	*x = FleurFairMinigameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairMinigameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairMinigameInfo) ProtoMessage() {}

func (x *FleurFairMinigameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairMinigameInfo.ProtoReflect.Descriptor instead.
func (*FleurFairMinigameInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{154}
}

func (x *FleurFairMinigameInfo) GetMinigameId() uint32 {
	if x != nil {
		return x.MinigameId
	}
	return 0
}

func (x *FleurFairMinigameInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *FleurFairMinigameInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (m *FleurFairMinigameInfo) GetDetail() isFleurFairMinigameInfo_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *FleurFairMinigameInfo) GetBalloonInfo() *FleurFairBalloonInfo {
	if x, ok := x.GetDetail().(*FleurFairMinigameInfo_BalloonInfo); ok {
		return x.BalloonInfo
	}
	return nil
}

func (x *FleurFairMinigameInfo) GetFallInfo() *FleurFairFallInfo {
	if x, ok := x.GetDetail().(*FleurFairMinigameInfo_FallInfo); ok {
		return x.FallInfo
	}
	return nil
}

func (x *FleurFairMinigameInfo) GetMusicInfo() *FleurFairMusicGameInfo {
	if x, ok := x.GetDetail().(*FleurFairMinigameInfo_MusicInfo); ok {
		return x.MusicInfo
	}
	return nil
}

type isFleurFairMinigameInfo_Detail interface {
	isFleurFairMinigameInfo_Detail()
}

type FleurFairMinigameInfo_BalloonInfo struct {
	BalloonInfo *FleurFairBalloonInfo `protobuf:"bytes,12,opt,name=balloon_info,json=balloonInfo,proto3,oneof"`
}

type FleurFairMinigameInfo_FallInfo struct {
	FallInfo *FleurFairFallInfo `protobuf:"bytes,11,opt,name=fall_info,json=fallInfo,proto3,oneof"`
}

type FleurFairMinigameInfo_MusicInfo struct {
	MusicInfo *FleurFairMusicGameInfo `protobuf:"bytes,9,opt,name=music_info,json=musicInfo,proto3,oneof"`
}

func (*FleurFairMinigameInfo_BalloonInfo) isFleurFairMinigameInfo_Detail() {}

func (*FleurFairMinigameInfo_FallInfo) isFleurFairMinigameInfo_Detail() {}

func (*FleurFairMinigameInfo_MusicInfo) isFleurFairMinigameInfo_Detail() {}

type FleurFairDungeonSectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionId uint32 `protobuf:"varint,10,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`
	OpenTime  uint32 `protobuf:"varint,13,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	IsOpen    bool   `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *FleurFairDungeonSectionInfo) Reset() {
	*x = FleurFairDungeonSectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairDungeonSectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairDungeonSectionInfo) ProtoMessage() {}

func (x *FleurFairDungeonSectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairDungeonSectionInfo.ProtoReflect.Descriptor instead.
func (*FleurFairDungeonSectionInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{155}
}

func (x *FleurFairDungeonSectionInfo) GetSectionId() uint32 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

func (x *FleurFairDungeonSectionInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *FleurFairDungeonSectionInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type FleurFairActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsContentClosed       bool                                    `protobuf:"varint,4,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	DungeonPunishOverTime uint32                                  `protobuf:"varint,6,opt,name=dungeon_punish_over_time,json=dungeonPunishOverTime,proto3" json:"dungeon_punish_over_time,omitempty"`
	ContentCloseTime      uint32                                  `protobuf:"varint,15,opt,name=content_close_time,json=contentCloseTime,proto3" json:"content_close_time,omitempty"`
	ObtainedToken         uint32                                  `protobuf:"varint,13,opt,name=obtained_token,json=obtainedToken,proto3" json:"obtained_token,omitempty"`
	ChapterInfoList       []*FleurFairChapterInfo                 `protobuf:"bytes,14,rep,name=chapter_info_list,json=chapterInfoList,proto3" json:"chapter_info_list,omitempty"`
	MinigameInfoMap       map[uint32]*FleurFairMinigameInfo       `protobuf:"bytes,9,rep,name=minigame_info_map,json=minigameInfoMap,proto3" json:"minigame_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DungeonSectionInfoMap map[uint32]*FleurFairDungeonSectionInfo `protobuf:"bytes,3,rep,name=dungeon_section_info_map,json=dungeonSectionInfoMap,proto3" json:"dungeon_section_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsDungeonUnlocked     bool                                    `protobuf:"varint,11,opt,name=is_dungeon_unlocked,json=isDungeonUnlocked,proto3" json:"is_dungeon_unlocked,omitempty"`
}

func (x *FleurFairActivityDetailInfo) Reset() {
	*x = FleurFairActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairActivityDetailInfo) ProtoMessage() {}

func (x *FleurFairActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*FleurFairActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{156}
}

func (x *FleurFairActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *FleurFairActivityDetailInfo) GetDungeonPunishOverTime() uint32 {
	if x != nil {
		return x.DungeonPunishOverTime
	}
	return 0
}

func (x *FleurFairActivityDetailInfo) GetContentCloseTime() uint32 {
	if x != nil {
		return x.ContentCloseTime
	}
	return 0
}

func (x *FleurFairActivityDetailInfo) GetObtainedToken() uint32 {
	if x != nil {
		return x.ObtainedToken
	}
	return 0
}

func (x *FleurFairActivityDetailInfo) GetChapterInfoList() []*FleurFairChapterInfo {
	if x != nil {
		return x.ChapterInfoList
	}
	return nil
}

func (x *FleurFairActivityDetailInfo) GetMinigameInfoMap() map[uint32]*FleurFairMinigameInfo {
	if x != nil {
		return x.MinigameInfoMap
	}
	return nil
}

func (x *FleurFairActivityDetailInfo) GetDungeonSectionInfoMap() map[uint32]*FleurFairDungeonSectionInfo {
	if x != nil {
		return x.DungeonSectionInfoMap
	}
	return nil
}

func (x *FleurFairActivityDetailInfo) GetIsDungeonUnlocked() bool {
	if x != nil {
		return x.IsDungeonUnlocked
	}
	return false
}

type FleurFairBalloonSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettleInfo  *BalloonSettleInfo `protobuf:"bytes,10,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
	IsNewRecord bool               `protobuf:"varint,7,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
}

func (x *FleurFairBalloonSettleInfo) Reset() {
	*x = FleurFairBalloonSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairBalloonSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairBalloonSettleInfo) ProtoMessage() {}

func (x *FleurFairBalloonSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairBalloonSettleInfo.ProtoReflect.Descriptor instead.
func (*FleurFairBalloonSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{157}
}

func (x *FleurFairBalloonSettleInfo) GetSettleInfo() *BalloonSettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

func (x *FleurFairBalloonSettleInfo) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

type FleurFairFallSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettleInfo  *FallSettleInfo `protobuf:"bytes,4,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
	IsNewRecord bool            `protobuf:"varint,10,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
}

func (x *FleurFairFallSettleInfo) Reset() {
	*x = FleurFairFallSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairFallSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairFallSettleInfo) ProtoMessage() {}

func (x *FleurFairFallSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairFallSettleInfo.ProtoReflect.Descriptor instead.
func (*FleurFairFallSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{158}
}

func (x *FleurFairFallSettleInfo) GetSettleInfo() *FallSettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

func (x *FleurFairFallSettleInfo) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

type FleurFairBalloonSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinigameId    uint32                                 `protobuf:"varint,9,opt,name=minigame_id,json=minigameId,proto3" json:"minigame_id,omitempty"`
	SettleInfoMap map[uint32]*FleurFairBalloonSettleInfo `protobuf:"bytes,15,rep,name=settle_info_map,json=settleInfoMap,proto3" json:"settle_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FleurFairBalloonSettleNotify) Reset() {
	*x = FleurFairBalloonSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairBalloonSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairBalloonSettleNotify) ProtoMessage() {}

func (x *FleurFairBalloonSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairBalloonSettleNotify.ProtoReflect.Descriptor instead.
func (*FleurFairBalloonSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{159}
}

func (x *FleurFairBalloonSettleNotify) GetMinigameId() uint32 {
	if x != nil {
		return x.MinigameId
	}
	return 0
}

func (x *FleurFairBalloonSettleNotify) GetSettleInfoMap() map[uint32]*FleurFairBalloonSettleInfo {
	if x != nil {
		return x.SettleInfoMap
	}
	return nil
}

type FleurFairFallSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinigameId    uint32                              `protobuf:"varint,15,opt,name=minigame_id,json=minigameId,proto3" json:"minigame_id,omitempty"`
	SettleInfoMap map[uint32]*FleurFairFallSettleInfo `protobuf:"bytes,11,rep,name=settle_info_map,json=settleInfoMap,proto3" json:"settle_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FleurFairFallSettleNotify) Reset() {
	*x = FleurFairFallSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairFallSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairFallSettleNotify) ProtoMessage() {}

func (x *FleurFairFallSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairFallSettleNotify.ProtoReflect.Descriptor instead.
func (*FleurFairFallSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{160}
}

func (x *FleurFairFallSettleNotify) GetMinigameId() uint32 {
	if x != nil {
		return x.MinigameId
	}
	return 0
}

func (x *FleurFairFallSettleNotify) GetSettleInfoMap() map[uint32]*FleurFairFallSettleInfo {
	if x != nil {
		return x.SettleInfoMap
	}
	return nil
}

type FleurFairMusicGameSettleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score        uint32 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Combo        uint32 `protobuf:"varint,6,opt,name=combo,proto3" json:"combo,omitempty"`
	CorrectHit   uint32 `protobuf:"varint,10,opt,name=correct_hit,json=correctHit,proto3" json:"correct_hit,omitempty"`
	MusicBasicId uint32 `protobuf:"varint,11,opt,name=music_basic_id,json=musicBasicId,proto3" json:"music_basic_id,omitempty"`
}

func (x *FleurFairMusicGameSettleReq) Reset() {
	*x = FleurFairMusicGameSettleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairMusicGameSettleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairMusicGameSettleReq) ProtoMessage() {}

func (x *FleurFairMusicGameSettleReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairMusicGameSettleReq.ProtoReflect.Descriptor instead.
func (*FleurFairMusicGameSettleReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{161}
}

func (x *FleurFairMusicGameSettleReq) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *FleurFairMusicGameSettleReq) GetCombo() uint32 {
	if x != nil {
		return x.Combo
	}
	return 0
}

func (x *FleurFairMusicGameSettleReq) GetCorrectHit() uint32 {
	if x != nil {
		return x.CorrectHit
	}
	return 0
}

func (x *FleurFairMusicGameSettleReq) GetMusicBasicId() uint32 {
	if x != nil {
		return x.MusicBasicId
	}
	return 0
}

type FleurFairMusicGameSettleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsUnlockNextLevel bool   `protobuf:"varint,4,opt,name=is_unlock_next_level,json=isUnlockNextLevel,proto3" json:"is_unlock_next_level,omitempty"`
	IsNewRecord       bool   `protobuf:"varint,12,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	Retcode           int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
	MusicBasicId      uint32 `protobuf:"varint,9,opt,name=music_basic_id,json=musicBasicId,proto3" json:"music_basic_id,omitempty"`
}

func (x *FleurFairMusicGameSettleRsp) Reset() {
	*x = FleurFairMusicGameSettleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairMusicGameSettleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairMusicGameSettleRsp) ProtoMessage() {}

func (x *FleurFairMusicGameSettleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairMusicGameSettleRsp.ProtoReflect.Descriptor instead.
func (*FleurFairMusicGameSettleRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{162}
}

func (x *FleurFairMusicGameSettleRsp) GetIsUnlockNextLevel() bool {
	if x != nil {
		return x.IsUnlockNextLevel
	}
	return false
}

func (x *FleurFairMusicGameSettleRsp) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *FleurFairMusicGameSettleRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *FleurFairMusicGameSettleRsp) GetMusicBasicId() uint32 {
	if x != nil {
		return x.MusicBasicId
	}
	return 0
}

type FleurFairMusicGameStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicBasicId uint32 `protobuf:"varint,2,opt,name=music_basic_id,json=musicBasicId,proto3" json:"music_basic_id,omitempty"`
}

func (x *FleurFairMusicGameStartReq) Reset() {
	*x = FleurFairMusicGameStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairMusicGameStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairMusicGameStartReq) ProtoMessage() {}

func (x *FleurFairMusicGameStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairMusicGameStartReq.ProtoReflect.Descriptor instead.
func (*FleurFairMusicGameStartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{163}
}

func (x *FleurFairMusicGameStartReq) GetMusicBasicId() uint32 {
	if x != nil {
		return x.MusicBasicId
	}
	return 0
}

type FleurFairMusicGameStartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode      int32  `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
	MusicBasicId uint32 `protobuf:"varint,7,opt,name=music_basic_id,json=musicBasicId,proto3" json:"music_basic_id,omitempty"`
}

func (x *FleurFairMusicGameStartRsp) Reset() {
	*x = FleurFairMusicGameStartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairMusicGameStartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairMusicGameStartRsp) ProtoMessage() {}

func (x *FleurFairMusicGameStartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairMusicGameStartRsp.ProtoReflect.Descriptor instead.
func (*FleurFairMusicGameStartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{164}
}

func (x *FleurFairMusicGameStartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *FleurFairMusicGameStartRsp) GetMusicBasicId() uint32 {
	if x != nil {
		return x.MusicBasicId
	}
	return 0
}

type FleurFairReplayMiniGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinigameId uint32 `protobuf:"varint,5,opt,name=minigame_id,json=minigameId,proto3" json:"minigame_id,omitempty"`
}

func (x *FleurFairReplayMiniGameReq) Reset() {
	*x = FleurFairReplayMiniGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairReplayMiniGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairReplayMiniGameReq) ProtoMessage() {}

func (x *FleurFairReplayMiniGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairReplayMiniGameReq.ProtoReflect.Descriptor instead.
func (*FleurFairReplayMiniGameReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{165}
}

func (x *FleurFairReplayMiniGameReq) GetMinigameId() uint32 {
	if x != nil {
		return x.MinigameId
	}
	return 0
}

type FleurFairReplayMiniGameRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode    int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
	MinigameId uint32 `protobuf:"varint,8,opt,name=minigame_id,json=minigameId,proto3" json:"minigame_id,omitempty"`
}

func (x *FleurFairReplayMiniGameRsp) Reset() {
	*x = FleurFairReplayMiniGameRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleurFairReplayMiniGameRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleurFairReplayMiniGameRsp) ProtoMessage() {}

func (x *FleurFairReplayMiniGameRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleurFairReplayMiniGameRsp.ProtoReflect.Descriptor instead.
func (*FleurFairReplayMiniGameRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{166}
}

func (x *FleurFairReplayMiniGameRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *FleurFairReplayMiniGameRsp) GetMinigameId() uint32 {
	if x != nil {
		return x.MinigameId
	}
	return 0
}

type ArenaChallengeMonsterLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArenaChallengeLevel uint32 `protobuf:"varint,7,opt,name=arena_challenge_level,json=arenaChallengeLevel,proto3" json:"arena_challenge_level,omitempty"`
	ArenaChallengeId    uint32 `protobuf:"varint,15,opt,name=arena_challenge_id,json=arenaChallengeId,proto3" json:"arena_challenge_id,omitempty"`
}

func (x *ArenaChallengeMonsterLevel) Reset() {
	*x = ArenaChallengeMonsterLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArenaChallengeMonsterLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaChallengeMonsterLevel) ProtoMessage() {}

func (x *ArenaChallengeMonsterLevel) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaChallengeMonsterLevel.ProtoReflect.Descriptor instead.
func (*ArenaChallengeMonsterLevel) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{167}
}

func (x *ArenaChallengeMonsterLevel) GetArenaChallengeLevel() uint32 {
	if x != nil {
		return x.ArenaChallengeLevel
	}
	return 0
}

func (x *ArenaChallengeMonsterLevel) GetArenaChallengeId() uint32 {
	if x != nil {
		return x.ArenaChallengeId
	}
	return 0
}

type ArenaChallengeActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinishAnyLevel bool                          `protobuf:"varint,14,opt,name=is_finish_any_level,json=isFinishAnyLevel,proto3" json:"is_finish_any_level,omitempty"`
	LevelOpenTimeMap map[uint32]uint32             `protobuf:"bytes,3,rep,name=level_open_time_map,json=levelOpenTimeMap,proto3" json:"level_open_time_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WorldLevel       uint32                        `protobuf:"varint,15,opt,name=world_level,json=worldLevel,proto3" json:"world_level,omitempty"`
	LevelList        []*ArenaChallengeMonsterLevel `protobuf:"bytes,9,rep,name=level_list,json=levelList,proto3" json:"level_list,omitempty"`
}

func (x *ArenaChallengeActivityDetailInfo) Reset() {
	*x = ArenaChallengeActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArenaChallengeActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaChallengeActivityDetailInfo) ProtoMessage() {}

func (x *ArenaChallengeActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaChallengeActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*ArenaChallengeActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{168}
}

func (x *ArenaChallengeActivityDetailInfo) GetIsFinishAnyLevel() bool {
	if x != nil {
		return x.IsFinishAnyLevel
	}
	return false
}

func (x *ArenaChallengeActivityDetailInfo) GetLevelOpenTimeMap() map[uint32]uint32 {
	if x != nil {
		return x.LevelOpenTimeMap
	}
	return nil
}

func (x *ArenaChallengeActivityDetailInfo) GetWorldLevel() uint32 {
	if x != nil {
		return x.WorldLevel
	}
	return 0
}

func (x *ArenaChallengeActivityDetailInfo) GetLevelList() []*ArenaChallengeMonsterLevel {
	if x != nil {
		return x.LevelList
	}
	return nil
}

type StartArenaChallengeLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArenaChallengeId    uint32 `protobuf:"varint,4,opt,name=arena_challenge_id,json=arenaChallengeId,proto3" json:"arena_challenge_id,omitempty"`
	GadgetEntityId      uint32 `protobuf:"varint,5,opt,name=gadget_entity_id,json=gadgetEntityId,proto3" json:"gadget_entity_id,omitempty"`
	ArenaChallengeLevel uint32 `protobuf:"varint,2,opt,name=arena_challenge_level,json=arenaChallengeLevel,proto3" json:"arena_challenge_level,omitempty"`
}

func (x *StartArenaChallengeLevelReq) Reset() {
	*x = StartArenaChallengeLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartArenaChallengeLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartArenaChallengeLevelReq) ProtoMessage() {}

func (x *StartArenaChallengeLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartArenaChallengeLevelReq.ProtoReflect.Descriptor instead.
func (*StartArenaChallengeLevelReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{169}
}

func (x *StartArenaChallengeLevelReq) GetArenaChallengeId() uint32 {
	if x != nil {
		return x.ArenaChallengeId
	}
	return 0
}

func (x *StartArenaChallengeLevelReq) GetGadgetEntityId() uint32 {
	if x != nil {
		return x.GadgetEntityId
	}
	return 0
}

func (x *StartArenaChallengeLevelReq) GetArenaChallengeLevel() uint32 {
	if x != nil {
		return x.ArenaChallengeLevel
	}
	return 0
}

type StartArenaChallengeLevelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArenaChallengeLevel uint32 `protobuf:"varint,1,opt,name=arena_challenge_level,json=arenaChallengeLevel,proto3" json:"arena_challenge_level,omitempty"`
	Retcode             int32  `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GadgetEntityId      uint32 `protobuf:"varint,3,opt,name=gadget_entity_id,json=gadgetEntityId,proto3" json:"gadget_entity_id,omitempty"`
	ArenaChallengeId    uint32 `protobuf:"varint,6,opt,name=arena_challenge_id,json=arenaChallengeId,proto3" json:"arena_challenge_id,omitempty"`
}

func (x *StartArenaChallengeLevelRsp) Reset() {
	*x = StartArenaChallengeLevelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartArenaChallengeLevelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartArenaChallengeLevelRsp) ProtoMessage() {}

func (x *StartArenaChallengeLevelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartArenaChallengeLevelRsp.ProtoReflect.Descriptor instead.
func (*StartArenaChallengeLevelRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{170}
}

func (x *StartArenaChallengeLevelRsp) GetArenaChallengeLevel() uint32 {
	if x != nil {
		return x.ArenaChallengeLevel
	}
	return 0
}

func (x *StartArenaChallengeLevelRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *StartArenaChallengeLevelRsp) GetGadgetEntityId() uint32 {
	if x != nil {
		return x.GadgetEntityId
	}
	return 0
}

func (x *StartArenaChallengeLevelRsp) GetArenaChallengeId() uint32 {
	if x != nil {
		return x.ArenaChallengeId
	}
	return 0
}

type ArenaChallengeChildChallengeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId    uint32 `protobuf:"varint,12,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	ChallengeType  uint32 `protobuf:"varint,5,opt,name=challenge_type,json=challengeType,proto3" json:"challenge_type,omitempty"`
	ChallengeIndex uint32 `protobuf:"varint,4,opt,name=challenge_index,json=challengeIndex,proto3" json:"challenge_index,omitempty"`
	IsSuccess      bool   `protobuf:"varint,7,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	IsSettled      bool   `protobuf:"varint,11,opt,name=is_settled,json=isSettled,proto3" json:"is_settled,omitempty"`
}

func (x *ArenaChallengeChildChallengeInfo) Reset() {
	*x = ArenaChallengeChildChallengeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArenaChallengeChildChallengeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaChallengeChildChallengeInfo) ProtoMessage() {}

func (x *ArenaChallengeChildChallengeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaChallengeChildChallengeInfo.ProtoReflect.Descriptor instead.
func (*ArenaChallengeChildChallengeInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{171}
}

func (x *ArenaChallengeChildChallengeInfo) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *ArenaChallengeChildChallengeInfo) GetChallengeType() uint32 {
	if x != nil {
		return x.ChallengeType
	}
	return 0
}

func (x *ArenaChallengeChildChallengeInfo) GetChallengeIndex() uint32 {
	if x != nil {
		return x.ChallengeIndex
	}
	return 0
}

func (x *ArenaChallengeChildChallengeInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *ArenaChallengeChildChallengeInfo) GetIsSettled() bool {
	if x != nil {
		return x.IsSettled
	}
	return false
}

type ArenaChallengeFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArenaChallengeLevel uint32                              `protobuf:"varint,13,opt,name=arena_challenge_level,json=arenaChallengeLevel,proto3" json:"arena_challenge_level,omitempty"`
	ArenaChallengeId    uint32                              `protobuf:"varint,3,opt,name=arena_challenge_id,json=arenaChallengeId,proto3" json:"arena_challenge_id,omitempty"`
	ChildChallengeList  []*ArenaChallengeChildChallengeInfo `protobuf:"bytes,2,rep,name=child_challenge_list,json=childChallengeList,proto3" json:"child_challenge_list,omitempty"`
	IsSuccess           bool                                `protobuf:"varint,12,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *ArenaChallengeFinishNotify) Reset() {
	*x = ArenaChallengeFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArenaChallengeFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaChallengeFinishNotify) ProtoMessage() {}

func (x *ArenaChallengeFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaChallengeFinishNotify.ProtoReflect.Descriptor instead.
func (*ArenaChallengeFinishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{172}
}

func (x *ArenaChallengeFinishNotify) GetArenaChallengeLevel() uint32 {
	if x != nil {
		return x.ArenaChallengeLevel
	}
	return 0
}

func (x *ArenaChallengeFinishNotify) GetArenaChallengeId() uint32 {
	if x != nil {
		return x.ArenaChallengeId
	}
	return 0
}

func (x *ArenaChallengeFinishNotify) GetChildChallengeList() []*ArenaChallengeChildChallengeInfo {
	if x != nil {
		return x.ChildChallengeList
	}
	return nil
}

func (x *ArenaChallengeFinishNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type WaterSpritePhaseFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaterSpritePhaseFinishNotify) Reset() {
	*x = WaterSpritePhaseFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaterSpritePhaseFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaterSpritePhaseFinishNotify) ProtoMessage() {}

func (x *WaterSpritePhaseFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaterSpritePhaseFinishNotify.ProtoReflect.Descriptor instead.
func (*WaterSpritePhaseFinishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{173}
}

type ActivityTakeWatcherRewardBatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatcherIdList []uint32 `protobuf:"varint,11,rep,packed,name=watcher_id_list,json=watcherIdList,proto3" json:"watcher_id_list,omitempty"`
	ActivityId    uint32   `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *ActivityTakeWatcherRewardBatchReq) Reset() {
	*x = ActivityTakeWatcherRewardBatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTakeWatcherRewardBatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTakeWatcherRewardBatchReq) ProtoMessage() {}

func (x *ActivityTakeWatcherRewardBatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTakeWatcherRewardBatchReq.ProtoReflect.Descriptor instead.
func (*ActivityTakeWatcherRewardBatchReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{174}
}

func (x *ActivityTakeWatcherRewardBatchReq) GetWatcherIdList() []uint32 {
	if x != nil {
		return x.WatcherIdList
	}
	return nil
}

func (x *ActivityTakeWatcherRewardBatchReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type ActivityTakeWatcherRewardBatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatcherIdList []uint32     `protobuf:"varint,6,rep,packed,name=watcher_id_list,json=watcherIdList,proto3" json:"watcher_id_list,omitempty"`
	Retcode       int32        `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ActivityId    uint32       `protobuf:"varint,7,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ItemList      []*ItemParam `protobuf:"bytes,1,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *ActivityTakeWatcherRewardBatchRsp) Reset() {
	*x = ActivityTakeWatcherRewardBatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTakeWatcherRewardBatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTakeWatcherRewardBatchRsp) ProtoMessage() {}

func (x *ActivityTakeWatcherRewardBatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTakeWatcherRewardBatchRsp.ProtoReflect.Descriptor instead.
func (*ActivityTakeWatcherRewardBatchRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{175}
}

func (x *ActivityTakeWatcherRewardBatchRsp) GetWatcherIdList() []uint32 {
	if x != nil {
		return x.WatcherIdList
	}
	return nil
}

func (x *ActivityTakeWatcherRewardBatchRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ActivityTakeWatcherRewardBatchRsp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityTakeWatcherRewardBatchRsp) GetItemList() []*ItemParam {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type ChannelerSlabCamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId uint32  `protobuf:"varint,11,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Pos      *Vector `protobuf:"bytes,8,opt,name=pos,proto3" json:"pos,omitempty"`
	BuffNum  uint32  `protobuf:"varint,7,opt,name=buff_num,json=buffNum,proto3" json:"buff_num,omitempty"`
	GroupId  uint32  `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *ChannelerSlabCamp) Reset() {
	*x = ChannelerSlabCamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelerSlabCamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelerSlabCamp) ProtoMessage() {}

func (x *ChannelerSlabCamp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelerSlabCamp.ProtoReflect.Descriptor instead.
func (*ChannelerSlabCamp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{176}
}

func (x *ChannelerSlabCamp) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *ChannelerSlabCamp) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *ChannelerSlabCamp) GetBuffNum() uint32 {
	if x != nil {
		return x.BuffNum
	}
	return 0
}

func (x *ChannelerSlabCamp) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ChannelerSlabChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveCampIndex uint32               `protobuf:"varint,5,opt,name=active_camp_index,json=activeCampIndex,proto3" json:"active_camp_index,omitempty"`
	CampList        []*ChannelerSlabCamp `protobuf:"bytes,14,rep,name=camp_list,json=campList,proto3" json:"camp_list,omitempty"`
}

func (x *ChannelerSlabChallenge) Reset() {
	*x = ChannelerSlabChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelerSlabChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelerSlabChallenge) ProtoMessage() {}

func (x *ChannelerSlabChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelerSlabChallenge.ProtoReflect.Descriptor instead.
func (*ChannelerSlabChallenge) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{177}
}

func (x *ChannelerSlabChallenge) GetActiveCampIndex() uint32 {
	if x != nil {
		return x.ActiveCampIndex
	}
	return 0
}

func (x *ChannelerSlabChallenge) GetCampList() []*ChannelerSlabCamp {
	if x != nil {
		return x.CampList
	}
	return nil
}

type ChannelerSlabOneoffDungeon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDone    bool   `protobuf:"varint,8,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	DungeonId uint32 `protobuf:"varint,12,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	RewardId  uint32 `protobuf:"varint,13,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (x *ChannelerSlabOneoffDungeon) Reset() {
	*x = ChannelerSlabOneoffDungeon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelerSlabOneoffDungeon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelerSlabOneoffDungeon) ProtoMessage() {}

func (x *ChannelerSlabOneoffDungeon) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelerSlabOneoffDungeon.ProtoReflect.Descriptor instead.
func (*ChannelerSlabOneoffDungeon) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{178}
}

func (x *ChannelerSlabOneoffDungeon) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *ChannelerSlabOneoffDungeon) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *ChannelerSlabOneoffDungeon) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

type ChannelerSlabChallengeStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenTime      uint32                      `protobuf:"varint,3,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	ChallengeList []*ChannelerSlabChallenge   `protobuf:"bytes,14,rep,name=challenge_list,json=challengeList,proto3" json:"challenge_list,omitempty"`
	IsOpen        bool                        `protobuf:"varint,7,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	StageId       uint32                      `protobuf:"varint,9,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	DungeonInfo   *ChannelerSlabOneoffDungeon `protobuf:"bytes,13,opt,name=dungeon_info,json=dungeonInfo,proto3" json:"dungeon_info,omitempty"`
}

func (x *ChannelerSlabChallengeStage) Reset() {
	*x = ChannelerSlabChallengeStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelerSlabChallengeStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelerSlabChallengeStage) ProtoMessage() {}

func (x *ChannelerSlabChallengeStage) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelerSlabChallengeStage.ProtoReflect.Descriptor instead.
func (*ChannelerSlabChallengeStage) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{179}
}

func (x *ChannelerSlabChallengeStage) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *ChannelerSlabChallengeStage) GetChallengeList() []*ChannelerSlabChallenge {
	if x != nil {
		return x.ChallengeList
	}
	return nil
}

func (x *ChannelerSlabChallengeStage) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *ChannelerSlabChallengeStage) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *ChannelerSlabChallengeStage) GetDungeonInfo() *ChannelerSlabOneoffDungeon {
	if x != nil {
		return x.DungeonInfo
	}
	return nil
}

type ChannellerSlabBuffSchemeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotMap     map[uint32]uint32 `protobuf:"bytes,9,rep,name=slot_map,json=slotMap,proto3" json:"slot_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalEnergy uint32            `protobuf:"varint,13,opt,name=total_energy,json=totalEnergy,proto3" json:"total_energy,omitempty"`
	SelfEnergy  uint32            `protobuf:"varint,15,opt,name=self_energy,json=selfEnergy,proto3" json:"self_energy,omitempty"`
}

func (x *ChannellerSlabBuffSchemeInfo) Reset() {
	*x = ChannellerSlabBuffSchemeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabBuffSchemeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabBuffSchemeInfo) ProtoMessage() {}

func (x *ChannellerSlabBuffSchemeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabBuffSchemeInfo.ProtoReflect.Descriptor instead.
func (*ChannellerSlabBuffSchemeInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{180}
}

func (x *ChannellerSlabBuffSchemeInfo) GetSlotMap() map[uint32]uint32 {
	if x != nil {
		return x.SlotMap
	}
	return nil
}

func (x *ChannellerSlabBuffSchemeInfo) GetTotalEnergy() uint32 {
	if x != nil {
		return x.TotalEnergy
	}
	return 0
}

func (x *ChannellerSlabBuffSchemeInfo) GetSelfEnergy() uint32 {
	if x != nil {
		return x.SelfEnergy
	}
	return 0
}

type ChannellerSlabAssistInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         uint32 `protobuf:"varint,10,opt,name=uid,proto3" json:"uid,omitempty"`
	AvatarLevel uint32 `protobuf:"varint,12,opt,name=avatar_level,json=avatarLevel,proto3" json:"avatar_level,omitempty"`
	AvatarId    uint32 `protobuf:"varint,6,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *ChannellerSlabAssistInfo) Reset() {
	*x = ChannellerSlabAssistInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabAssistInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabAssistInfo) ProtoMessage() {}

func (x *ChannellerSlabAssistInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabAssistInfo.ProtoReflect.Descriptor instead.
func (*ChannellerSlabAssistInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{181}
}

func (x *ChannellerSlabAssistInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ChannellerSlabAssistInfo) GetAvatarLevel() uint32 {
	if x != nil {
		return x.AvatarLevel
	}
	return 0
}

func (x *ChannellerSlabAssistInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type ChannellerSlabBuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpBuffSchemeInfo     *ChannellerSlabBuffSchemeInfo `protobuf:"bytes,6,opt,name=mp_buff_scheme_info,json=mpBuffSchemeInfo,proto3" json:"mp_buff_scheme_info,omitempty"`
	BuffIdList           []uint32                      `protobuf:"varint,8,rep,packed,name=buff_id_list,json=buffIdList,proto3" json:"buff_id_list,omitempty"`
	SingleBuffSchemeInfo *ChannellerSlabBuffSchemeInfo `protobuf:"bytes,7,opt,name=single_buff_scheme_info,json=singleBuffSchemeInfo,proto3" json:"single_buff_scheme_info,omitempty"`
	AssistInfoList       []*ChannellerSlabAssistInfo   `protobuf:"bytes,15,rep,name=assist_info_list,json=assistInfoList,proto3" json:"assist_info_list,omitempty"`
}

func (x *ChannellerSlabBuffInfo) Reset() {
	*x = ChannellerSlabBuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabBuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabBuffInfo) ProtoMessage() {}

func (x *ChannellerSlabBuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabBuffInfo.ProtoReflect.Descriptor instead.
func (*ChannellerSlabBuffInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{182}
}

func (x *ChannellerSlabBuffInfo) GetMpBuffSchemeInfo() *ChannellerSlabBuffSchemeInfo {
	if x != nil {
		return x.MpBuffSchemeInfo
	}
	return nil
}

func (x *ChannellerSlabBuffInfo) GetBuffIdList() []uint32 {
	if x != nil {
		return x.BuffIdList
	}
	return nil
}

func (x *ChannellerSlabBuffInfo) GetSingleBuffSchemeInfo() *ChannellerSlabBuffSchemeInfo {
	if x != nil {
		return x.SingleBuffSchemeInfo
	}
	return nil
}

func (x *ChannellerSlabBuffInfo) GetAssistInfoList() []*ChannellerSlabAssistInfo {
	if x != nil {
		return x.AssistInfoList
	}
	return nil
}

type ChannellerSlabLoopDungeonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score                  uint32   `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	DungeonIndex           uint32   `protobuf:"varint,4,opt,name=dungeon_index,json=dungeonIndex,proto3" json:"dungeon_index,omitempty"`
	OpenTime               uint32   `protobuf:"varint,12,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	IsFirstPassRewardTaken bool     `protobuf:"varint,9,opt,name=is_first_pass_reward_taken,json=isFirstPassRewardTaken,proto3" json:"is_first_pass_reward_taken,omitempty"`
	LastConditionIdList    []uint32 `protobuf:"varint,14,rep,packed,name=last_condition_id_list,json=lastConditionIdList,proto3" json:"last_condition_id_list,omitempty"`
	IsOpen                 bool     `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *ChannellerSlabLoopDungeonInfo) Reset() {
	*x = ChannellerSlabLoopDungeonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabLoopDungeonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabLoopDungeonInfo) ProtoMessage() {}

func (x *ChannellerSlabLoopDungeonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabLoopDungeonInfo.ProtoReflect.Descriptor instead.
func (*ChannellerSlabLoopDungeonInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{183}
}

func (x *ChannellerSlabLoopDungeonInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonInfo) GetDungeonIndex() uint32 {
	if x != nil {
		return x.DungeonIndex
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonInfo) GetIsFirstPassRewardTaken() bool {
	if x != nil {
		return x.IsFirstPassRewardTaken
	}
	return false
}

func (x *ChannellerSlabLoopDungeonInfo) GetLastConditionIdList() []uint32 {
	if x != nil {
		return x.LastConditionIdList
	}
	return nil
}

func (x *ChannellerSlabLoopDungeonInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type ChannellerSlabLoopDungeonStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonInfoList      []*ChannellerSlabLoopDungeonInfo `protobuf:"bytes,15,rep,name=dungeon_info_list,json=dungeonInfoList,proto3" json:"dungeon_info_list,omitempty"`
	TakenRewardIndexList []uint32                         `protobuf:"varint,5,rep,packed,name=taken_reward_index_list,json=takenRewardIndexList,proto3" json:"taken_reward_index_list,omitempty"`
	IsOpen               bool                             `protobuf:"varint,11,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	LastDifficultyId     uint32                           `protobuf:"varint,6,opt,name=last_difficulty_id,json=lastDifficultyId,proto3" json:"last_difficulty_id,omitempty"`
	OpenTime             uint32                           `protobuf:"varint,3,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
}

func (x *ChannellerSlabLoopDungeonStageInfo) Reset() {
	*x = ChannellerSlabLoopDungeonStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabLoopDungeonStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabLoopDungeonStageInfo) ProtoMessage() {}

func (x *ChannellerSlabLoopDungeonStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabLoopDungeonStageInfo.ProtoReflect.Descriptor instead.
func (*ChannellerSlabLoopDungeonStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{184}
}

func (x *ChannellerSlabLoopDungeonStageInfo) GetDungeonInfoList() []*ChannellerSlabLoopDungeonInfo {
	if x != nil {
		return x.DungeonInfoList
	}
	return nil
}

func (x *ChannellerSlabLoopDungeonStageInfo) GetTakenRewardIndexList() []uint32 {
	if x != nil {
		return x.TakenRewardIndexList
	}
	return nil
}

func (x *ChannellerSlabLoopDungeonStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *ChannellerSlabLoopDungeonStageInfo) GetLastDifficultyId() uint32 {
	if x != nil {
		return x.LastDifficultyId
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonStageInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

type ChannelerSlabActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffInfo             *ChannellerSlabBuffInfo             `protobuf:"bytes,1,opt,name=buff_info,json=buffInfo,proto3" json:"buff_info,omitempty"`
	LoopDungeonStageInfo *ChannellerSlabLoopDungeonStageInfo `protobuf:"bytes,7,opt,name=loop_dungeon_stage_info,json=loopDungeonStageInfo,proto3" json:"loop_dungeon_stage_info,omitempty"`
	StageList            []*ChannelerSlabChallengeStage      `protobuf:"bytes,15,rep,name=stage_list,json=stageList,proto3" json:"stage_list,omitempty"`
	PlayEndTime          uint32                              `protobuf:"varint,3,opt,name=play_end_time,json=playEndTime,proto3" json:"play_end_time,omitempty"`
}

func (x *ChannelerSlabActivityDetailInfo) Reset() {
	*x = ChannelerSlabActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelerSlabActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelerSlabActivityDetailInfo) ProtoMessage() {}

func (x *ChannelerSlabActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelerSlabActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*ChannelerSlabActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{185}
}

func (x *ChannelerSlabActivityDetailInfo) GetBuffInfo() *ChannellerSlabBuffInfo {
	if x != nil {
		return x.BuffInfo
	}
	return nil
}

func (x *ChannelerSlabActivityDetailInfo) GetLoopDungeonStageInfo() *ChannellerSlabLoopDungeonStageInfo {
	if x != nil {
		return x.LoopDungeonStageInfo
	}
	return nil
}

func (x *ChannelerSlabActivityDetailInfo) GetStageList() []*ChannelerSlabChallengeStage {
	if x != nil {
		return x.StageList
	}
	return nil
}

func (x *ChannelerSlabActivityDetailInfo) GetPlayEndTime() uint32 {
	if x != nil {
		return x.PlayEndTime
	}
	return 0
}

type ChannelerSlabStageActiveChallengeIndexNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId         uint32 `protobuf:"varint,15,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	ChallengeIndex  uint32 `protobuf:"varint,12,opt,name=challenge_index,json=challengeIndex,proto3" json:"challenge_index,omitempty"`
	ActiveCampIndex uint32 `protobuf:"varint,6,opt,name=active_camp_index,json=activeCampIndex,proto3" json:"active_camp_index,omitempty"`
}

func (x *ChannelerSlabStageActiveChallengeIndexNotify) Reset() {
	*x = ChannelerSlabStageActiveChallengeIndexNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelerSlabStageActiveChallengeIndexNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelerSlabStageActiveChallengeIndexNotify) ProtoMessage() {}

func (x *ChannelerSlabStageActiveChallengeIndexNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelerSlabStageActiveChallengeIndexNotify.ProtoReflect.Descriptor instead.
func (*ChannelerSlabStageActiveChallengeIndexNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{186}
}

func (x *ChannelerSlabStageActiveChallengeIndexNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *ChannelerSlabStageActiveChallengeIndexNotify) GetChallengeIndex() uint32 {
	if x != nil {
		return x.ChallengeIndex
	}
	return 0
}

func (x *ChannelerSlabStageActiveChallengeIndexNotify) GetActiveCampIndex() uint32 {
	if x != nil {
		return x.ActiveCampIndex
	}
	return 0
}

type ChannelerSlabStageOneoffDungeonNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsDone  bool   `protobuf:"varint,8,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
}

func (x *ChannelerSlabStageOneoffDungeonNotify) Reset() {
	*x = ChannelerSlabStageOneoffDungeonNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelerSlabStageOneoffDungeonNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelerSlabStageOneoffDungeonNotify) ProtoMessage() {}

func (x *ChannelerSlabStageOneoffDungeonNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelerSlabStageOneoffDungeonNotify.ProtoReflect.Descriptor instead.
func (*ChannelerSlabStageOneoffDungeonNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{187}
}

func (x *ChannelerSlabStageOneoffDungeonNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *ChannelerSlabStageOneoffDungeonNotify) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

type ChannellerSlabWearBuffReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffId uint32 `protobuf:"varint,3,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	IsMp   bool   `protobuf:"varint,5,opt,name=is_mp,json=isMp,proto3" json:"is_mp,omitempty"`
	SlotId uint32 `protobuf:"varint,13,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
}

func (x *ChannellerSlabWearBuffReq) Reset() {
	*x = ChannellerSlabWearBuffReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabWearBuffReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabWearBuffReq) ProtoMessage() {}

func (x *ChannellerSlabWearBuffReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabWearBuffReq.ProtoReflect.Descriptor instead.
func (*ChannellerSlabWearBuffReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{188}
}

func (x *ChannellerSlabWearBuffReq) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *ChannellerSlabWearBuffReq) GetIsMp() bool {
	if x != nil {
		return x.IsMp
	}
	return false
}

func (x *ChannellerSlabWearBuffReq) GetSlotId() uint32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

type ChannellerSlabWearBuffRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffId  uint32 `protobuf:"varint,15,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	Retcode int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsMp    bool   `protobuf:"varint,9,opt,name=is_mp,json=isMp,proto3" json:"is_mp,omitempty"`
	SlotId  uint32 `protobuf:"varint,8,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
}

func (x *ChannellerSlabWearBuffRsp) Reset() {
	*x = ChannellerSlabWearBuffRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabWearBuffRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabWearBuffRsp) ProtoMessage() {}

func (x *ChannellerSlabWearBuffRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabWearBuffRsp.ProtoReflect.Descriptor instead.
func (*ChannellerSlabWearBuffRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{189}
}

func (x *ChannellerSlabWearBuffRsp) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *ChannellerSlabWearBuffRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ChannellerSlabWearBuffRsp) GetIsMp() bool {
	if x != nil {
		return x.IsMp
	}
	return false
}

func (x *ChannellerSlabWearBuffRsp) GetSlotId() uint32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

type ChannellerSlabTakeoffBuffReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMp   bool   `protobuf:"varint,10,opt,name=is_mp,json=isMp,proto3" json:"is_mp,omitempty"`
	SlotId uint32 `protobuf:"varint,12,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	BuffId uint32 `protobuf:"varint,9,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
}

func (x *ChannellerSlabTakeoffBuffReq) Reset() {
	*x = ChannellerSlabTakeoffBuffReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabTakeoffBuffReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabTakeoffBuffReq) ProtoMessage() {}

func (x *ChannellerSlabTakeoffBuffReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabTakeoffBuffReq.ProtoReflect.Descriptor instead.
func (*ChannellerSlabTakeoffBuffReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{190}
}

func (x *ChannellerSlabTakeoffBuffReq) GetIsMp() bool {
	if x != nil {
		return x.IsMp
	}
	return false
}

func (x *ChannellerSlabTakeoffBuffReq) GetSlotId() uint32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

func (x *ChannellerSlabTakeoffBuffReq) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

type ChannellerSlabTakeoffBuffRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsMp    bool   `protobuf:"varint,13,opt,name=is_mp,json=isMp,proto3" json:"is_mp,omitempty"`
	BuffId  uint32 `protobuf:"varint,14,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	SlotId  uint32 `protobuf:"varint,8,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
}

func (x *ChannellerSlabTakeoffBuffRsp) Reset() {
	*x = ChannellerSlabTakeoffBuffRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabTakeoffBuffRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabTakeoffBuffRsp) ProtoMessage() {}

func (x *ChannellerSlabTakeoffBuffRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabTakeoffBuffRsp.ProtoReflect.Descriptor instead.
func (*ChannellerSlabTakeoffBuffRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{191}
}

func (x *ChannellerSlabTakeoffBuffRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ChannellerSlabTakeoffBuffRsp) GetIsMp() bool {
	if x != nil {
		return x.IsMp
	}
	return false
}

func (x *ChannellerSlabTakeoffBuffRsp) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *ChannellerSlabTakeoffBuffRsp) GetSlotId() uint32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

type ChannellerSlabEnterLoopDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointId         uint32   `protobuf:"varint,9,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	DungeonIndex    uint32   `protobuf:"varint,10,opt,name=dungeon_index,json=dungeonIndex,proto3" json:"dungeon_index,omitempty"`
	ConditionIdList []uint32 `protobuf:"varint,5,rep,packed,name=condition_id_list,json=conditionIdList,proto3" json:"condition_id_list,omitempty"`
	DifficultyId    uint32   `protobuf:"varint,12,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
}

func (x *ChannellerSlabEnterLoopDungeonReq) Reset() {
	*x = ChannellerSlabEnterLoopDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabEnterLoopDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabEnterLoopDungeonReq) ProtoMessage() {}

func (x *ChannellerSlabEnterLoopDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabEnterLoopDungeonReq.ProtoReflect.Descriptor instead.
func (*ChannellerSlabEnterLoopDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{192}
}

func (x *ChannellerSlabEnterLoopDungeonReq) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *ChannellerSlabEnterLoopDungeonReq) GetDungeonIndex() uint32 {
	if x != nil {
		return x.DungeonIndex
	}
	return 0
}

func (x *ChannellerSlabEnterLoopDungeonReq) GetConditionIdList() []uint32 {
	if x != nil {
		return x.ConditionIdList
	}
	return nil
}

func (x *ChannellerSlabEnterLoopDungeonReq) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

type ChannellerSlabEnterLoopDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode         int32    `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
	PointId         uint32   `protobuf:"varint,12,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
	ConditionIdList []uint32 `protobuf:"varint,6,rep,packed,name=condition_id_list,json=conditionIdList,proto3" json:"condition_id_list,omitempty"`
	DungeonIndex    uint32   `protobuf:"varint,15,opt,name=dungeon_index,json=dungeonIndex,proto3" json:"dungeon_index,omitempty"`
	DifficultyId    uint32   `protobuf:"varint,3,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
}

func (x *ChannellerSlabEnterLoopDungeonRsp) Reset() {
	*x = ChannellerSlabEnterLoopDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabEnterLoopDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabEnterLoopDungeonRsp) ProtoMessage() {}

func (x *ChannellerSlabEnterLoopDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabEnterLoopDungeonRsp.ProtoReflect.Descriptor instead.
func (*ChannellerSlabEnterLoopDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{193}
}

func (x *ChannellerSlabEnterLoopDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ChannellerSlabEnterLoopDungeonRsp) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *ChannellerSlabEnterLoopDungeonRsp) GetConditionIdList() []uint32 {
	if x != nil {
		return x.ConditionIdList
	}
	return nil
}

func (x *ChannellerSlabEnterLoopDungeonRsp) GetDungeonIndex() uint32 {
	if x != nil {
		return x.DungeonIndex
	}
	return 0
}

func (x *ChannellerSlabEnterLoopDungeonRsp) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

type ChannellerSlabLoopDungeonTakeFirstPassRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonIndex uint32 `protobuf:"varint,10,opt,name=dungeon_index,json=dungeonIndex,proto3" json:"dungeon_index,omitempty"`
}

func (x *ChannellerSlabLoopDungeonTakeFirstPassRewardReq) Reset() {
	*x = ChannellerSlabLoopDungeonTakeFirstPassRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabLoopDungeonTakeFirstPassRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabLoopDungeonTakeFirstPassRewardReq) ProtoMessage() {}

func (x *ChannellerSlabLoopDungeonTakeFirstPassRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabLoopDungeonTakeFirstPassRewardReq.ProtoReflect.Descriptor instead.
func (*ChannellerSlabLoopDungeonTakeFirstPassRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{194}
}

func (x *ChannellerSlabLoopDungeonTakeFirstPassRewardReq) GetDungeonIndex() uint32 {
	if x != nil {
		return x.DungeonIndex
	}
	return 0
}

type ChannellerSlabLoopDungeonTakeFirstPassRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode      int32  `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
	DungeonIndex uint32 `protobuf:"varint,8,opt,name=dungeon_index,json=dungeonIndex,proto3" json:"dungeon_index,omitempty"`
}

func (x *ChannellerSlabLoopDungeonTakeFirstPassRewardRsp) Reset() {
	*x = ChannellerSlabLoopDungeonTakeFirstPassRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabLoopDungeonTakeFirstPassRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabLoopDungeonTakeFirstPassRewardRsp) ProtoMessage() {}

func (x *ChannellerSlabLoopDungeonTakeFirstPassRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabLoopDungeonTakeFirstPassRewardRsp.ProtoReflect.Descriptor instead.
func (*ChannellerSlabLoopDungeonTakeFirstPassRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{195}
}

func (x *ChannellerSlabLoopDungeonTakeFirstPassRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonTakeFirstPassRewardRsp) GetDungeonIndex() uint32 {
	if x != nil {
		return x.DungeonIndex
	}
	return 0
}

type ChannellerSlabLoopDungeonTakeScoreRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardIndex uint32 `protobuf:"varint,8,opt,name=reward_index,json=rewardIndex,proto3" json:"reward_index,omitempty"`
}

func (x *ChannellerSlabLoopDungeonTakeScoreRewardReq) Reset() {
	*x = ChannellerSlabLoopDungeonTakeScoreRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabLoopDungeonTakeScoreRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabLoopDungeonTakeScoreRewardReq) ProtoMessage() {}

func (x *ChannellerSlabLoopDungeonTakeScoreRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabLoopDungeonTakeScoreRewardReq.ProtoReflect.Descriptor instead.
func (*ChannellerSlabLoopDungeonTakeScoreRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{196}
}

func (x *ChannellerSlabLoopDungeonTakeScoreRewardReq) GetRewardIndex() uint32 {
	if x != nil {
		return x.RewardIndex
	}
	return 0
}

type ChannellerSlabLoopDungeonTakeScoreRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardIndex uint32 `protobuf:"varint,12,opt,name=reward_index,json=rewardIndex,proto3" json:"reward_index,omitempty"`
	Retcode     int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ChannellerSlabLoopDungeonTakeScoreRewardRsp) Reset() {
	*x = ChannellerSlabLoopDungeonTakeScoreRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabLoopDungeonTakeScoreRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabLoopDungeonTakeScoreRewardRsp) ProtoMessage() {}

func (x *ChannellerSlabLoopDungeonTakeScoreRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabLoopDungeonTakeScoreRewardRsp.ProtoReflect.Descriptor instead.
func (*ChannellerSlabLoopDungeonTakeScoreRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{197}
}

func (x *ChannellerSlabLoopDungeonTakeScoreRewardRsp) GetRewardIndex() uint32 {
	if x != nil {
		return x.RewardIndex
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonTakeScoreRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ChannellerSlabLoopDungeonChallengeInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonIndex     uint32   `protobuf:"varint,12,opt,name=dungeon_index,json=dungeonIndex,proto3" json:"dungeon_index,omitempty"`
	ChallengeScore   uint32   `protobuf:"varint,4,opt,name=challenge_score,json=challengeScore,proto3" json:"challenge_score,omitempty"`
	DifficultyId     uint32   `protobuf:"varint,2,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	ConditionIdList  []uint32 `protobuf:"varint,3,rep,packed,name=condition_id_list,json=conditionIdList,proto3" json:"condition_id_list,omitempty"`
	SchemeBuffIdList []uint32 `protobuf:"varint,6,rep,packed,name=scheme_buff_id_list,json=schemeBuffIdList,proto3" json:"scheme_buff_id_list,omitempty"`
}

func (x *ChannellerSlabLoopDungeonChallengeInfoNotify) Reset() {
	*x = ChannellerSlabLoopDungeonChallengeInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabLoopDungeonChallengeInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabLoopDungeonChallengeInfoNotify) ProtoMessage() {}

func (x *ChannellerSlabLoopDungeonChallengeInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabLoopDungeonChallengeInfoNotify.ProtoReflect.Descriptor instead.
func (*ChannellerSlabLoopDungeonChallengeInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{198}
}

func (x *ChannellerSlabLoopDungeonChallengeInfoNotify) GetDungeonIndex() uint32 {
	if x != nil {
		return x.DungeonIndex
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonChallengeInfoNotify) GetChallengeScore() uint32 {
	if x != nil {
		return x.ChallengeScore
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonChallengeInfoNotify) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonChallengeInfoNotify) GetConditionIdList() []uint32 {
	if x != nil {
		return x.ConditionIdList
	}
	return nil
}

func (x *ChannellerSlabLoopDungeonChallengeInfoNotify) GetSchemeBuffIdList() []uint32 {
	if x != nil {
		return x.SchemeBuffIdList
	}
	return nil
}

type ChannellerSlabLoopDungeonSelectConditionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonIndex    uint32   `protobuf:"varint,4,opt,name=dungeon_index,json=dungeonIndex,proto3" json:"dungeon_index,omitempty"`
	ConditionIdList []uint32 `protobuf:"varint,3,rep,packed,name=condition_id_list,json=conditionIdList,proto3" json:"condition_id_list,omitempty"`
	DifficultyId    uint32   `protobuf:"varint,8,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
}

func (x *ChannellerSlabLoopDungeonSelectConditionReq) Reset() {
	*x = ChannellerSlabLoopDungeonSelectConditionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabLoopDungeonSelectConditionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabLoopDungeonSelectConditionReq) ProtoMessage() {}

func (x *ChannellerSlabLoopDungeonSelectConditionReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabLoopDungeonSelectConditionReq.ProtoReflect.Descriptor instead.
func (*ChannellerSlabLoopDungeonSelectConditionReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{199}
}

func (x *ChannellerSlabLoopDungeonSelectConditionReq) GetDungeonIndex() uint32 {
	if x != nil {
		return x.DungeonIndex
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonSelectConditionReq) GetConditionIdList() []uint32 {
	if x != nil {
		return x.ConditionIdList
	}
	return nil
}

func (x *ChannellerSlabLoopDungeonSelectConditionReq) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

type ChannellerSlabLoopDungeonSelectConditionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode         int32    `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
	DungeonIndex    uint32   `protobuf:"varint,5,opt,name=dungeon_index,json=dungeonIndex,proto3" json:"dungeon_index,omitempty"`
	ConditionIdList []uint32 `protobuf:"varint,13,rep,packed,name=condition_id_list,json=conditionIdList,proto3" json:"condition_id_list,omitempty"`
	DifficultyId    uint32   `protobuf:"varint,14,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
}

func (x *ChannellerSlabLoopDungeonSelectConditionRsp) Reset() {
	*x = ChannellerSlabLoopDungeonSelectConditionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabLoopDungeonSelectConditionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabLoopDungeonSelectConditionRsp) ProtoMessage() {}

func (x *ChannellerSlabLoopDungeonSelectConditionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabLoopDungeonSelectConditionRsp.ProtoReflect.Descriptor instead.
func (*ChannellerSlabLoopDungeonSelectConditionRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{200}
}

func (x *ChannellerSlabLoopDungeonSelectConditionRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonSelectConditionRsp) GetDungeonIndex() uint32 {
	if x != nil {
		return x.DungeonIndex
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonSelectConditionRsp) GetConditionIdList() []uint32 {
	if x != nil {
		return x.ConditionIdList
	}
	return nil
}

func (x *ChannellerSlabLoopDungeonSelectConditionRsp) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

type ChannellerSlabLoopDungeonResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess         bool   `protobuf:"varint,11,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	ChallengeMaxScore uint32 `protobuf:"varint,8,opt,name=challenge_max_score,json=challengeMaxScore,proto3" json:"challenge_max_score,omitempty"`
	DungeonIndex      uint32 `protobuf:"varint,7,opt,name=dungeon_index,json=dungeonIndex,proto3" json:"dungeon_index,omitempty"`
	IsInTimeLimit     bool   `protobuf:"varint,10,opt,name=is_in_time_limit,json=isInTimeLimit,proto3" json:"is_in_time_limit,omitempty"`
	ChallengeScore    uint32 `protobuf:"varint,12,opt,name=challenge_score,json=challengeScore,proto3" json:"challenge_score,omitempty"`
}

func (x *ChannellerSlabLoopDungeonResultInfo) Reset() {
	*x = ChannellerSlabLoopDungeonResultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabLoopDungeonResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabLoopDungeonResultInfo) ProtoMessage() {}

func (x *ChannellerSlabLoopDungeonResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabLoopDungeonResultInfo.ProtoReflect.Descriptor instead.
func (*ChannellerSlabLoopDungeonResultInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{201}
}

func (x *ChannellerSlabLoopDungeonResultInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *ChannellerSlabLoopDungeonResultInfo) GetChallengeMaxScore() uint32 {
	if x != nil {
		return x.ChallengeMaxScore
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonResultInfo) GetDungeonIndex() uint32 {
	if x != nil {
		return x.DungeonIndex
	}
	return 0
}

func (x *ChannellerSlabLoopDungeonResultInfo) GetIsInTimeLimit() bool {
	if x != nil {
		return x.IsInTimeLimit
	}
	return false
}

func (x *ChannellerSlabLoopDungeonResultInfo) GetChallengeScore() uint32 {
	if x != nil {
		return x.ChallengeScore
	}
	return 0
}

type ChannellerSlabOneOffDungeonInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannellerSlabOneOffDungeonInfoReq) Reset() {
	*x = ChannellerSlabOneOffDungeonInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabOneOffDungeonInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabOneOffDungeonInfoReq) ProtoMessage() {}

func (x *ChannellerSlabOneOffDungeonInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabOneOffDungeonInfoReq.ProtoReflect.Descriptor instead.
func (*ChannellerSlabOneOffDungeonInfoReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{202}
}

type ChannellerSlabOneOffDungeonInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemeBuffIdList []uint32 `protobuf:"varint,3,rep,packed,name=scheme_buff_id_list,json=schemeBuffIdList,proto3" json:"scheme_buff_id_list,omitempty"`
	Retcode          int32    `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ChannellerSlabOneOffDungeonInfoRsp) Reset() {
	*x = ChannellerSlabOneOffDungeonInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabOneOffDungeonInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabOneOffDungeonInfoRsp) ProtoMessage() {}

func (x *ChannellerSlabOneOffDungeonInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabOneOffDungeonInfoRsp.ProtoReflect.Descriptor instead.
func (*ChannellerSlabOneOffDungeonInfoRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{203}
}

func (x *ChannellerSlabOneOffDungeonInfoRsp) GetSchemeBuffIdList() []uint32 {
	if x != nil {
		return x.SchemeBuffIdList
	}
	return nil
}

func (x *ChannellerSlabOneOffDungeonInfoRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ChannellerSlabOneOffDungeonInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemeBuffIdList []uint32 `protobuf:"varint,6,rep,packed,name=scheme_buff_id_list,json=schemeBuffIdList,proto3" json:"scheme_buff_id_list,omitempty"`
}

func (x *ChannellerSlabOneOffDungeonInfoNotify) Reset() {
	*x = ChannellerSlabOneOffDungeonInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabOneOffDungeonInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabOneOffDungeonInfoNotify) ProtoMessage() {}

func (x *ChannellerSlabOneOffDungeonInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabOneOffDungeonInfoNotify.ProtoReflect.Descriptor instead.
func (*ChannellerSlabOneOffDungeonInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{204}
}

func (x *ChannellerSlabOneOffDungeonInfoNotify) GetSchemeBuffIdList() []uint32 {
	if x != nil {
		return x.SchemeBuffIdList
	}
	return nil
}

type ChannellerSlabSaveAssistInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistInfoList []*ChannellerSlabAssistInfo `protobuf:"bytes,8,rep,name=assist_info_list,json=assistInfoList,proto3" json:"assist_info_list,omitempty"`
}

func (x *ChannellerSlabSaveAssistInfoReq) Reset() {
	*x = ChannellerSlabSaveAssistInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabSaveAssistInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabSaveAssistInfoReq) ProtoMessage() {}

func (x *ChannellerSlabSaveAssistInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabSaveAssistInfoReq.ProtoReflect.Descriptor instead.
func (*ChannellerSlabSaveAssistInfoReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{205}
}

func (x *ChannellerSlabSaveAssistInfoReq) GetAssistInfoList() []*ChannellerSlabAssistInfo {
	if x != nil {
		return x.AssistInfoList
	}
	return nil
}

type ChannellerSlabSaveAssistInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistInfoList []*ChannellerSlabAssistInfo `protobuf:"bytes,8,rep,name=assist_info_list,json=assistInfoList,proto3" json:"assist_info_list,omitempty"`
	Retcode        int32                       `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ChannellerSlabSaveAssistInfoRsp) Reset() {
	*x = ChannellerSlabSaveAssistInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabSaveAssistInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabSaveAssistInfoRsp) ProtoMessage() {}

func (x *ChannellerSlabSaveAssistInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabSaveAssistInfoRsp.ProtoReflect.Descriptor instead.
func (*ChannellerSlabSaveAssistInfoRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{206}
}

func (x *ChannellerSlabSaveAssistInfoRsp) GetAssistInfoList() []*ChannellerSlabAssistInfo {
	if x != nil {
		return x.AssistInfoList
	}
	return nil
}

func (x *ChannellerSlabSaveAssistInfoRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type MistTrialBestAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarType AvatarType `protobuf:"varint,6,opt,name=avatar_type,json=avatarType,proto3,enum=proto.AvatarType" json:"avatar_type,omitempty"`
	CostumeId  uint32     `protobuf:"varint,14,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
	AvatarId   uint32     `protobuf:"varint,5,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *MistTrialBestAvatar) Reset() {
	*x = MistTrialBestAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialBestAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialBestAvatar) ProtoMessage() {}

func (x *MistTrialBestAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialBestAvatar.ProtoReflect.Descriptor instead.
func (*MistTrialBestAvatar) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{207}
}

func (x *MistTrialBestAvatar) GetAvatarType() AvatarType {
	if x != nil {
		return x.AvatarType
	}
	return AvatarType_AVATAR_TYPE_NONE
}

func (x *MistTrialBestAvatar) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

func (x *MistTrialBestAvatar) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type MistTrialLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestHitAvatar  *MistTrialBestAvatar   `protobuf:"bytes,14,opt,name=best_hit_avatar,json=bestHitAvatar,proto3" json:"best_hit_avatar,omitempty"`
	LevelId        uint32                 `protobuf:"varint,7,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	OpenTime       uint32                 `protobuf:"varint,1,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	IsOpen         bool                   `protobuf:"varint,12,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	BestAvatarList []*MistTrialBestAvatar `protobuf:"bytes,6,rep,name=best_avatar_list,json=bestAvatarList,proto3" json:"best_avatar_list,omitempty"`
	FirstPassTime  uint32                 `protobuf:"varint,2,opt,name=first_pass_time,json=firstPassTime,proto3" json:"first_pass_time,omitempty"`
}

func (x *MistTrialLevelData) Reset() {
	*x = MistTrialLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialLevelData) ProtoMessage() {}

func (x *MistTrialLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialLevelData.ProtoReflect.Descriptor instead.
func (*MistTrialLevelData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{208}
}

func (x *MistTrialLevelData) GetBestHitAvatar() *MistTrialBestAvatar {
	if x != nil {
		return x.BestHitAvatar
	}
	return nil
}

func (x *MistTrialLevelData) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *MistTrialLevelData) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *MistTrialLevelData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *MistTrialLevelData) GetBestAvatarList() []*MistTrialBestAvatar {
	if x != nil {
		return x.BestAvatarList
	}
	return nil
}

func (x *MistTrialLevelData) GetFirstPassTime() uint32 {
	if x != nil {
		return x.FirstPassTime
	}
	return 0
}

type MistTrialActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialLevelDataList []*MistTrialLevelData `protobuf:"bytes,5,rep,name=trial_level_data_list,json=trialLevelDataList,proto3" json:"trial_level_data_list,omitempty"`
}

func (x *MistTrialActivityDetailInfo) Reset() {
	*x = MistTrialActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialActivityDetailInfo) ProtoMessage() {}

func (x *MistTrialActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*MistTrialActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{209}
}

func (x *MistTrialActivityDetailInfo) GetTrialLevelDataList() []*MistTrialLevelData {
	if x != nil {
		return x.TrialLevelDataList
	}
	return nil
}

type MistTrialSelectAvatarAndEnterDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterPointId            uint32                                                       `protobuf:"varint,7,opt,name=enter_point_id,json=enterPointId,proto3" json:"enter_point_id,omitempty"`
	SelectTrialAvatarIdList []uint32                                                     `protobuf:"varint,10,rep,packed,name=select_trial_avatar_id_list,json=selectTrialAvatarIdList,proto3" json:"select_trial_avatar_id_list,omitempty"`
	TrialId                 uint32                                                       `protobuf:"varint,4,opt,name=trial_id,json=trialId,proto3" json:"trial_id,omitempty"`
	SelectAvatarIndexList   []*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex `protobuf:"bytes,6,rep,name=select_avatar_index_list,json=selectAvatarIndexList,proto3" json:"select_avatar_index_list,omitempty"`
}

func (x *MistTrialSelectAvatarAndEnterDungeonReq) Reset() {
	*x = MistTrialSelectAvatarAndEnterDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialSelectAvatarAndEnterDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialSelectAvatarAndEnterDungeonReq) ProtoMessage() {}

func (x *MistTrialSelectAvatarAndEnterDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialSelectAvatarAndEnterDungeonReq.ProtoReflect.Descriptor instead.
func (*MistTrialSelectAvatarAndEnterDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{210}
}

func (x *MistTrialSelectAvatarAndEnterDungeonReq) GetEnterPointId() uint32 {
	if x != nil {
		return x.EnterPointId
	}
	return 0
}

func (x *MistTrialSelectAvatarAndEnterDungeonReq) GetSelectTrialAvatarIdList() []uint32 {
	if x != nil {
		return x.SelectTrialAvatarIdList
	}
	return nil
}

func (x *MistTrialSelectAvatarAndEnterDungeonReq) GetTrialId() uint32 {
	if x != nil {
		return x.TrialId
	}
	return 0
}

func (x *MistTrialSelectAvatarAndEnterDungeonReq) GetSelectAvatarIndexList() []*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex {
	if x != nil {
		return x.SelectAvatarIndexList
	}
	return nil
}

type MistTrialSelectAvatarAndEnterDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialId uint32 `protobuf:"varint,1,opt,name=trial_id,json=trialId,proto3" json:"trial_id,omitempty"`
	Retcode int32  `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *MistTrialSelectAvatarAndEnterDungeonRsp) Reset() {
	*x = MistTrialSelectAvatarAndEnterDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialSelectAvatarAndEnterDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialSelectAvatarAndEnterDungeonRsp) ProtoMessage() {}

func (x *MistTrialSelectAvatarAndEnterDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialSelectAvatarAndEnterDungeonRsp.ProtoReflect.Descriptor instead.
func (*MistTrialSelectAvatarAndEnterDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{211}
}

func (x *MistTrialSelectAvatarAndEnterDungeonRsp) GetTrialId() uint32 {
	if x != nil {
		return x.TrialId
	}
	return 0
}

func (x *MistTrialSelectAvatarAndEnterDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type MistTrialMissionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param         uint32 `protobuf:"varint,9,opt,name=param,proto3" json:"param,omitempty"`
	WatcherListId uint32 `protobuf:"varint,13,opt,name=watcher_list_id,json=watcherListId,proto3" json:"watcher_list_id,omitempty"`
}

func (x *MistTrialMissionInfo) Reset() {
	*x = MistTrialMissionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialMissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialMissionInfo) ProtoMessage() {}

func (x *MistTrialMissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialMissionInfo.ProtoReflect.Descriptor instead.
func (*MistTrialMissionInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{212}
}

func (x *MistTrialMissionInfo) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *MistTrialMissionInfo) GetWatcherListId() uint32 {
	if x != nil {
		return x.WatcherListId
	}
	return 0
}

type MistTrialGetChallengeMissionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialId uint32 `protobuf:"varint,9,opt,name=trial_id,json=trialId,proto3" json:"trial_id,omitempty"`
}

func (x *MistTrialGetChallengeMissionReq) Reset() {
	*x = MistTrialGetChallengeMissionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialGetChallengeMissionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialGetChallengeMissionReq) ProtoMessage() {}

func (x *MistTrialGetChallengeMissionReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialGetChallengeMissionReq.ProtoReflect.Descriptor instead.
func (*MistTrialGetChallengeMissionReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{213}
}

func (x *MistTrialGetChallengeMissionReq) GetTrialId() uint32 {
	if x != nil {
		return x.TrialId
	}
	return 0
}

type MistTrialGetChallengeMissionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialId         uint32                  `protobuf:"varint,1,opt,name=trial_id,json=trialId,proto3" json:"trial_id,omitempty"`
	MissionInfoList []*MistTrialMissionInfo `protobuf:"bytes,15,rep,name=mission_info_list,json=missionInfoList,proto3" json:"mission_info_list,omitempty"`
	Retcode         int32                   `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *MistTrialGetChallengeMissionRsp) Reset() {
	*x = MistTrialGetChallengeMissionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialGetChallengeMissionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialGetChallengeMissionRsp) ProtoMessage() {}

func (x *MistTrialGetChallengeMissionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialGetChallengeMissionRsp.ProtoReflect.Descriptor instead.
func (*MistTrialGetChallengeMissionRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{214}
}

func (x *MistTrialGetChallengeMissionRsp) GetTrialId() uint32 {
	if x != nil {
		return x.TrialId
	}
	return 0
}

func (x *MistTrialGetChallengeMissionRsp) GetMissionInfoList() []*MistTrialMissionInfo {
	if x != nil {
		return x.MissionInfoList
	}
	return nil
}

func (x *MistTrialGetChallengeMissionRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type MistTrialDunegonFailNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId int32 `protobuf:"varint,9,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (x *MistTrialDunegonFailNotify) Reset() {
	*x = MistTrialDunegonFailNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialDunegonFailNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialDunegonFailNotify) ProtoMessage() {}

func (x *MistTrialDunegonFailNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialDunegonFailNotify.ProtoReflect.Descriptor instead.
func (*MistTrialDunegonFailNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{215}
}

func (x *MistTrialDunegonFailNotify) GetDungeonId() int32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

type ChannellerSlabCheckEnterLoopDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannellerSlabCheckEnterLoopDungeonReq) Reset() {
	*x = ChannellerSlabCheckEnterLoopDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabCheckEnterLoopDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabCheckEnterLoopDungeonReq) ProtoMessage() {}

func (x *ChannellerSlabCheckEnterLoopDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabCheckEnterLoopDungeonReq.ProtoReflect.Descriptor instead.
func (*ChannellerSlabCheckEnterLoopDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{216}
}

type ChannellerSlabCheckEnterLoopDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ChannellerSlabCheckEnterLoopDungeonRsp) Reset() {
	*x = ChannellerSlabCheckEnterLoopDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannellerSlabCheckEnterLoopDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannellerSlabCheckEnterLoopDungeonRsp) ProtoMessage() {}

func (x *ChannellerSlabCheckEnterLoopDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannellerSlabCheckEnterLoopDungeonRsp.ProtoReflect.Descriptor instead.
func (*ChannellerSlabCheckEnterLoopDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{217}
}

func (x *ChannellerSlabCheckEnterLoopDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type HideAndSeekMapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchLockReasonList []uint32 `protobuf:"varint,11,rep,packed,name=match_lock_reason_list,json=matchLockReasonList,proto3" json:"match_lock_reason_list,omitempty"`
	Id                  uint32   `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HideAndSeekMapInfo) Reset() {
	*x = HideAndSeekMapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekMapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekMapInfo) ProtoMessage() {}

func (x *HideAndSeekMapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekMapInfo.ProtoReflect.Descriptor instead.
func (*HideAndSeekMapInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{218}
}

func (x *HideAndSeekMapInfo) GetMatchLockReasonList() []uint32 {
	if x != nil {
		return x.MatchLockReasonList
	}
	return nil
}

func (x *HideAndSeekMapInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HideAndSeekActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChosenMapList         []uint32              `protobuf:"varint,5,rep,packed,name=chosen_map_list,json=chosenMapList,proto3" json:"chosen_map_list,omitempty"`
	UnlockMapList         []uint32              `protobuf:"varint,13,rep,packed,name=unlock_map_list,json=unlockMapList,proto3" json:"unlock_map_list,omitempty"`
	ChosenHunterSkillList []uint32              `protobuf:"varint,4,rep,packed,name=chosen_hunter_skill_list,json=chosenHunterSkillList,proto3" json:"chosen_hunter_skill_list,omitempty"`
	OpenMapInfoList       []*HideAndSeekMapInfo `protobuf:"bytes,1,rep,name=open_map_info_list,json=openMapInfoList,proto3" json:"open_map_info_list,omitempty"`
	ChosenHiderSkillList  []uint32              `protobuf:"varint,6,rep,packed,name=chosen_hider_skill_list,json=chosenHiderSkillList,proto3" json:"chosen_hider_skill_list,omitempty"`
}

func (x *HideAndSeekActivityDetailInfo) Reset() {
	*x = HideAndSeekActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekActivityDetailInfo) ProtoMessage() {}

func (x *HideAndSeekActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*HideAndSeekActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{219}
}

func (x *HideAndSeekActivityDetailInfo) GetChosenMapList() []uint32 {
	if x != nil {
		return x.ChosenMapList
	}
	return nil
}

func (x *HideAndSeekActivityDetailInfo) GetUnlockMapList() []uint32 {
	if x != nil {
		return x.UnlockMapList
	}
	return nil
}

func (x *HideAndSeekActivityDetailInfo) GetChosenHunterSkillList() []uint32 {
	if x != nil {
		return x.ChosenHunterSkillList
	}
	return nil
}

func (x *HideAndSeekActivityDetailInfo) GetOpenMapInfoList() []*HideAndSeekMapInfo {
	if x != nil {
		return x.OpenMapInfoList
	}
	return nil
}

func (x *HideAndSeekActivityDetailInfo) GetChosenHiderSkillList() []uint32 {
	if x != nil {
		return x.ChosenHiderSkillList
	}
	return nil
}

type HideAndSeekSelectSkillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillList []uint32 `protobuf:"varint,13,rep,packed,name=skill_list,json=skillList,proto3" json:"skill_list,omitempty"`
}

func (x *HideAndSeekSelectSkillReq) Reset() {
	*x = HideAndSeekSelectSkillReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekSelectSkillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekSelectSkillReq) ProtoMessage() {}

func (x *HideAndSeekSelectSkillReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekSelectSkillReq.ProtoReflect.Descriptor instead.
func (*HideAndSeekSelectSkillReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{220}
}

func (x *HideAndSeekSelectSkillReq) GetSkillList() []uint32 {
	if x != nil {
		return x.SkillList
	}
	return nil
}

type HideAndSeekSelectSkillRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32    `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
	SkillList []uint32 `protobuf:"varint,12,rep,packed,name=skill_list,json=skillList,proto3" json:"skill_list,omitempty"`
}

func (x *HideAndSeekSelectSkillRsp) Reset() {
	*x = HideAndSeekSelectSkillRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekSelectSkillRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekSelectSkillRsp) ProtoMessage() {}

func (x *HideAndSeekSelectSkillRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekSelectSkillRsp.ProtoReflect.Descriptor instead.
func (*HideAndSeekSelectSkillRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{221}
}

func (x *HideAndSeekSelectSkillRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *HideAndSeekSelectSkillRsp) GetSkillList() []uint32 {
	if x != nil {
		return x.SkillList
	}
	return nil
}

type ActivityTakeScoreRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardConfigId uint32 `protobuf:"varint,12,opt,name=reward_config_id,json=rewardConfigId,proto3" json:"reward_config_id,omitempty"`
	ActivityId     uint32 `protobuf:"varint,9,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *ActivityTakeScoreRewardReq) Reset() {
	*x = ActivityTakeScoreRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTakeScoreRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTakeScoreRewardReq) ProtoMessage() {}

func (x *ActivityTakeScoreRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTakeScoreRewardReq.ProtoReflect.Descriptor instead.
func (*ActivityTakeScoreRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{222}
}

func (x *ActivityTakeScoreRewardReq) GetRewardConfigId() uint32 {
	if x != nil {
		return x.RewardConfigId
	}
	return 0
}

func (x *ActivityTakeScoreRewardReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type ActivityTakeScoreRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId     uint32 `protobuf:"varint,13,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Retcode        int32  `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RewardConfigId uint32 `protobuf:"varint,15,opt,name=reward_config_id,json=rewardConfigId,proto3" json:"reward_config_id,omitempty"`
}

func (x *ActivityTakeScoreRewardRsp) Reset() {
	*x = ActivityTakeScoreRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTakeScoreRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTakeScoreRewardRsp) ProtoMessage() {}

func (x *ActivityTakeScoreRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTakeScoreRewardRsp.ProtoReflect.Descriptor instead.
func (*ActivityTakeScoreRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{223}
}

func (x *ActivityTakeScoreRewardRsp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ActivityTakeScoreRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ActivityTakeScoreRewardRsp) GetRewardConfigId() uint32 {
	if x != nil {
		return x.RewardConfigId
	}
	return 0
}

type ActivityTakeAllScoreRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32 `protobuf:"varint,9,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *ActivityTakeAllScoreRewardReq) Reset() {
	*x = ActivityTakeAllScoreRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTakeAllScoreRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTakeAllScoreRewardReq) ProtoMessage() {}

func (x *ActivityTakeAllScoreRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTakeAllScoreRewardReq.ProtoReflect.Descriptor instead.
func (*ActivityTakeAllScoreRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{224}
}

func (x *ActivityTakeAllScoreRewardReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type ActivityTakeAllScoreRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardConfigList []uint32 `protobuf:"varint,14,rep,packed,name=reward_config_list,json=rewardConfigList,proto3" json:"reward_config_list,omitempty"`
	Retcode          int32    `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ActivityId       uint32   `protobuf:"varint,7,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *ActivityTakeAllScoreRewardRsp) Reset() {
	*x = ActivityTakeAllScoreRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityTakeAllScoreRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityTakeAllScoreRewardRsp) ProtoMessage() {}

func (x *ActivityTakeAllScoreRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityTakeAllScoreRewardRsp.ProtoReflect.Descriptor instead.
func (*ActivityTakeAllScoreRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{225}
}

func (x *ActivityTakeAllScoreRewardRsp) GetRewardConfigList() []uint32 {
	if x != nil {
		return x.RewardConfigList
	}
	return nil
}

func (x *ActivityTakeAllScoreRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ActivityTakeAllScoreRewardRsp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type HideAndSeekChooseMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapList []uint32 `protobuf:"varint,3,rep,packed,name=map_list,json=mapList,proto3" json:"map_list,omitempty"`
}

func (x *HideAndSeekChooseMapReq) Reset() {
	*x = HideAndSeekChooseMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekChooseMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekChooseMapReq) ProtoMessage() {}

func (x *HideAndSeekChooseMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekChooseMapReq.ProtoReflect.Descriptor instead.
func (*HideAndSeekChooseMapReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{226}
}

func (x *HideAndSeekChooseMapReq) GetMapList() []uint32 {
	if x != nil {
		return x.MapList
	}
	return nil
}

type HideAndSeekChooseMapRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapList []uint32 `protobuf:"varint,3,rep,packed,name=map_list,json=mapList,proto3" json:"map_list,omitempty"`
	Retcode int32    `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *HideAndSeekChooseMapRsp) Reset() {
	*x = HideAndSeekChooseMapRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideAndSeekChooseMapRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAndSeekChooseMapRsp) ProtoMessage() {}

func (x *HideAndSeekChooseMapRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAndSeekChooseMapRsp.ProtoReflect.Descriptor instead.
func (*HideAndSeekChooseMapRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{227}
}

func (x *HideAndSeekChooseMapRsp) GetMapList() []uint32 {
	if x != nil {
		return x.MapList
	}
	return nil
}

func (x *HideAndSeekChooseMapRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type FindHilichurlDayContentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime uint32 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *FindHilichurlDayContentInfo) Reset() {
	*x = FindHilichurlDayContentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHilichurlDayContentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHilichurlDayContentInfo) ProtoMessage() {}

func (x *FindHilichurlDayContentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHilichurlDayContentInfo.ProtoReflect.Descriptor instead.
func (*FindHilichurlDayContentInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{228}
}

func (x *FindHilichurlDayContentInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type FindHilichurlDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayContentInfoList []*FindHilichurlDayContentInfo `protobuf:"bytes,1,rep,name=day_content_info_list,json=dayContentInfoList,proto3" json:"day_content_info_list,omitempty"`
	MinOpenPlayerLevel uint32                         `protobuf:"varint,12,opt,name=min_open_player_level,json=minOpenPlayerLevel,proto3" json:"min_open_player_level,omitempty"`
	IsEndQuestAccept   bool                           `protobuf:"varint,7,opt,name=is_end_quest_accept,json=isEndQuestAccept,proto3" json:"is_end_quest_accept,omitempty"`
	ContentCloseTime   uint32                         `protobuf:"varint,6,opt,name=content_close_time,json=contentCloseTime,proto3" json:"content_close_time,omitempty"`
	IsContentClosed    bool                           `protobuf:"varint,9,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	PlayerDayIndex     uint32                         `protobuf:"varint,4,opt,name=player_day_index,json=playerDayIndex,proto3" json:"player_day_index,omitempty"`
	DayIndex           uint32                         `protobuf:"varint,15,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
}

func (x *FindHilichurlDetailInfo) Reset() {
	*x = FindHilichurlDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHilichurlDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHilichurlDetailInfo) ProtoMessage() {}

func (x *FindHilichurlDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHilichurlDetailInfo.ProtoReflect.Descriptor instead.
func (*FindHilichurlDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{229}
}

func (x *FindHilichurlDetailInfo) GetDayContentInfoList() []*FindHilichurlDayContentInfo {
	if x != nil {
		return x.DayContentInfoList
	}
	return nil
}

func (x *FindHilichurlDetailInfo) GetMinOpenPlayerLevel() uint32 {
	if x != nil {
		return x.MinOpenPlayerLevel
	}
	return 0
}

func (x *FindHilichurlDetailInfo) GetIsEndQuestAccept() bool {
	if x != nil {
		return x.IsEndQuestAccept
	}
	return false
}

func (x *FindHilichurlDetailInfo) GetContentCloseTime() uint32 {
	if x != nil {
		return x.ContentCloseTime
	}
	return 0
}

func (x *FindHilichurlDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *FindHilichurlDetailInfo) GetPlayerDayIndex() uint32 {
	if x != nil {
		return x.PlayerDayIndex
	}
	return 0
}

func (x *FindHilichurlDetailInfo) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

type CommonPlayerTipsNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyType    uint32   `protobuf:"varint,3,opt,name=notify_type,json=notifyType,proto3" json:"notify_type,omitempty"`
	TextMapIdList []string `protobuf:"bytes,9,rep,name=text_map_id_list,json=textMapIdList,proto3" json:"text_map_id_list,omitempty"`
}

func (x *CommonPlayerTipsNotify) Reset() {
	*x = CommonPlayerTipsNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonPlayerTipsNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonPlayerTipsNotify) ProtoMessage() {}

func (x *CommonPlayerTipsNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonPlayerTipsNotify.ProtoReflect.Descriptor instead.
func (*CommonPlayerTipsNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{230}
}

func (x *CommonPlayerTipsNotify) GetNotifyType() uint32 {
	if x != nil {
		return x.NotifyType
	}
	return 0
}

func (x *CommonPlayerTipsNotify) GetTextMapIdList() []string {
	if x != nil {
		return x.TextMapIdList
	}
	return nil
}

type FindHilichurlFinishSecondQuestNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayIndex uint32 `protobuf:"varint,11,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
}

func (x *FindHilichurlFinishSecondQuestNotify) Reset() {
	*x = FindHilichurlFinishSecondQuestNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHilichurlFinishSecondQuestNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHilichurlFinishSecondQuestNotify) ProtoMessage() {}

func (x *FindHilichurlFinishSecondQuestNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHilichurlFinishSecondQuestNotify.ProtoReflect.Descriptor instead.
func (*FindHilichurlFinishSecondQuestNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{231}
}

func (x *FindHilichurlFinishSecondQuestNotify) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

type FindHilichurlAcceptQuestNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindHilichurlAcceptQuestNotify) Reset() {
	*x = FindHilichurlAcceptQuestNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHilichurlAcceptQuestNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHilichurlAcceptQuestNotify) ProtoMessage() {}

func (x *FindHilichurlAcceptQuestNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHilichurlAcceptQuestNotify.ProtoReflect.Descriptor instead.
func (*FindHilichurlAcceptQuestNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{232}
}

type SummerTimeSprintBoatRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestScore     uint32   `protobuf:"varint,3,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
	StartTime     uint32   `protobuf:"varint,13,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	IsTouched     bool     `protobuf:"varint,7,opt,name=is_touched,json=isTouched,proto3" json:"is_touched,omitempty"`
	WatcherIdList []uint32 `protobuf:"varint,10,rep,packed,name=watcher_id_list,json=watcherIdList,proto3" json:"watcher_id_list,omitempty"`
	GroupId       uint32   `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *SummerTimeSprintBoatRecord) Reset() {
	*x = SummerTimeSprintBoatRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeSprintBoatRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeSprintBoatRecord) ProtoMessage() {}

func (x *SummerTimeSprintBoatRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeSprintBoatRecord.ProtoReflect.Descriptor instead.
func (*SummerTimeSprintBoatRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{233}
}

func (x *SummerTimeSprintBoatRecord) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

func (x *SummerTimeSprintBoatRecord) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SummerTimeSprintBoatRecord) GetIsTouched() bool {
	if x != nil {
		return x.IsTouched
	}
	return false
}

func (x *SummerTimeSprintBoatRecord) GetWatcherIdList() []uint32 {
	if x != nil {
		return x.WatcherIdList
	}
	return nil
}

func (x *SummerTimeSprintBoatRecord) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type SummerTimeSprintBoatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordList []*SummerTimeSprintBoatRecord `protobuf:"bytes,7,rep,name=record_list,json=recordList,proto3" json:"record_list,omitempty"`
}

func (x *SummerTimeSprintBoatInfo) Reset() {
	*x = SummerTimeSprintBoatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeSprintBoatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeSprintBoatInfo) ProtoMessage() {}

func (x *SummerTimeSprintBoatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeSprintBoatInfo.ProtoReflect.Descriptor instead.
func (*SummerTimeSprintBoatInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{234}
}

func (x *SummerTimeSprintBoatInfo) GetRecordList() []*SummerTimeSprintBoatRecord {
	if x != nil {
		return x.RecordList
	}
	return nil
}

type SummerTimeDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageMap         map[uint32]*SummerTimeStageInfo `protobuf:"bytes,3,rep,name=stage_map,json=stageMap,proto3" json:"stage_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContentCloseTime uint32                          `protobuf:"varint,11,opt,name=content_close_time,json=contentCloseTime,proto3" json:"content_close_time,omitempty"`
	IsContentClosed  bool                            `protobuf:"varint,13,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	SprintBoatInfo   *SummerTimeSprintBoatInfo       `protobuf:"bytes,4,opt,name=sprint_boat_info,json=sprintBoatInfo,proto3" json:"sprint_boat_info,omitempty"`
}

func (x *SummerTimeDetailInfo) Reset() {
	*x = SummerTimeDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeDetailInfo) ProtoMessage() {}

func (x *SummerTimeDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeDetailInfo.ProtoReflect.Descriptor instead.
func (*SummerTimeDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{235}
}

func (x *SummerTimeDetailInfo) GetStageMap() map[uint32]*SummerTimeStageInfo {
	if x != nil {
		return x.StageMap
	}
	return nil
}

func (x *SummerTimeDetailInfo) GetContentCloseTime() uint32 {
	if x != nil {
		return x.ContentCloseTime
	}
	return 0
}

func (x *SummerTimeDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *SummerTimeDetailInfo) GetSprintBoatInfo() *SummerTimeSprintBoatInfo {
	if x != nil {
		return x.SprintBoatInfo
	}
	return nil
}

type SummerTimeStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen   bool   `protobuf:"varint,13,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	OpenTime uint32 `protobuf:"varint,10,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	StageId  uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *SummerTimeStageInfo) Reset() {
	*x = SummerTimeStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeStageInfo) ProtoMessage() {}

func (x *SummerTimeStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeStageInfo.ProtoReflect.Descriptor instead.
func (*SummerTimeStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{236}
}

func (x *SummerTimeStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SummerTimeStageInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *SummerTimeStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type SummerTimeFloatSignalPositionNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position         *Vector `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	IsTransferAnchor bool    `protobuf:"varint,5,opt,name=is_transfer_anchor,json=isTransferAnchor,proto3" json:"is_transfer_anchor,omitempty"`
	FloatSignalId    uint32  `protobuf:"varint,7,opt,name=float_signal_id,json=floatSignalId,proto3" json:"float_signal_id,omitempty"`
}

func (x *SummerTimeFloatSignalPositionNotify) Reset() {
	*x = SummerTimeFloatSignalPositionNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeFloatSignalPositionNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeFloatSignalPositionNotify) ProtoMessage() {}

func (x *SummerTimeFloatSignalPositionNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeFloatSignalPositionNotify.ProtoReflect.Descriptor instead.
func (*SummerTimeFloatSignalPositionNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{237}
}

func (x *SummerTimeFloatSignalPositionNotify) GetPosition() *Vector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SummerTimeFloatSignalPositionNotify) GetIsTransferAnchor() bool {
	if x != nil {
		return x.IsTransferAnchor
	}
	return false
}

func (x *SummerTimeFloatSignalPositionNotify) GetFloatSignalId() uint32 {
	if x != nil {
		return x.FloatSignalId
	}
	return 0
}

type SummerTimeFloatSignalUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTransferAnchor bool    `protobuf:"varint,4,opt,name=is_transfer_anchor,json=isTransferAnchor,proto3" json:"is_transfer_anchor,omitempty"`
	FloatSignalId    uint32  `protobuf:"varint,8,opt,name=float_signal_id,json=floatSignalId,proto3" json:"float_signal_id,omitempty"`
	Position         *Vector `protobuf:"bytes,10,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *SummerTimeFloatSignalUpdateNotify) Reset() {
	*x = SummerTimeFloatSignalUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeFloatSignalUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeFloatSignalUpdateNotify) ProtoMessage() {}

func (x *SummerTimeFloatSignalUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeFloatSignalUpdateNotify.ProtoReflect.Descriptor instead.
func (*SummerTimeFloatSignalUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{238}
}

func (x *SummerTimeFloatSignalUpdateNotify) GetIsTransferAnchor() bool {
	if x != nil {
		return x.IsTransferAnchor
	}
	return false
}

func (x *SummerTimeFloatSignalUpdateNotify) GetFloatSignalId() uint32 {
	if x != nil {
		return x.FloatSignalId
	}
	return 0
}

func (x *SummerTimeFloatSignalUpdateNotify) GetPosition() *Vector {
	if x != nil {
		return x.Position
	}
	return nil
}

type SummerTimeSprintBoatSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNum    uint32 `protobuf:"varint,13,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
	GroupId     uint32 `protobuf:"varint,12,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	IsSuccess   bool   `protobuf:"varint,15,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	CollectNum  uint32 `protobuf:"varint,6,opt,name=collect_num,json=collectNum,proto3" json:"collect_num,omitempty"`
	LeftTime    uint32 `protobuf:"varint,8,opt,name=left_time,json=leftTime,proto3" json:"left_time,omitempty"`
	MedalLevel  uint32 `protobuf:"varint,2,opt,name=medal_level,json=medalLevel,proto3" json:"medal_level,omitempty"`
	Score       uint32 `protobuf:"varint,10,opt,name=score,proto3" json:"score,omitempty"`
	IsNewRecord bool   `protobuf:"varint,7,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
}

func (x *SummerTimeSprintBoatSettleNotify) Reset() {
	*x = SummerTimeSprintBoatSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeSprintBoatSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeSprintBoatSettleNotify) ProtoMessage() {}

func (x *SummerTimeSprintBoatSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeSprintBoatSettleNotify.ProtoReflect.Descriptor instead.
func (*SummerTimeSprintBoatSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{239}
}

func (x *SummerTimeSprintBoatSettleNotify) GetTotalNum() uint32 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

func (x *SummerTimeSprintBoatSettleNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SummerTimeSprintBoatSettleNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *SummerTimeSprintBoatSettleNotify) GetCollectNum() uint32 {
	if x != nil {
		return x.CollectNum
	}
	return 0
}

func (x *SummerTimeSprintBoatSettleNotify) GetLeftTime() uint32 {
	if x != nil {
		return x.LeftTime
	}
	return 0
}

func (x *SummerTimeSprintBoatSettleNotify) GetMedalLevel() uint32 {
	if x != nil {
		return x.MedalLevel
	}
	return 0
}

func (x *SummerTimeSprintBoatSettleNotify) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SummerTimeSprintBoatSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

type SummerTimeSprintBoatRestartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    uint32 `protobuf:"varint,10,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ScheduleId uint32 `protobuf:"varint,14,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *SummerTimeSprintBoatRestartReq) Reset() {
	*x = SummerTimeSprintBoatRestartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeSprintBoatRestartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeSprintBoatRestartReq) ProtoMessage() {}

func (x *SummerTimeSprintBoatRestartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeSprintBoatRestartReq.ProtoReflect.Descriptor instead.
func (*SummerTimeSprintBoatRestartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{240}
}

func (x *SummerTimeSprintBoatRestartReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SummerTimeSprintBoatRestartReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type SummerTimeSprintBoatRestartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode    int32  `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ScheduleId uint32 `protobuf:"varint,5,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	GroupId    uint32 `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *SummerTimeSprintBoatRestartRsp) Reset() {
	*x = SummerTimeSprintBoatRestartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeSprintBoatRestartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeSprintBoatRestartRsp) ProtoMessage() {}

func (x *SummerTimeSprintBoatRestartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeSprintBoatRestartRsp.ProtoReflect.Descriptor instead.
func (*SummerTimeSprintBoatRestartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{241}
}

func (x *SummerTimeSprintBoatRestartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *SummerTimeSprintBoatRestartRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *SummerTimeSprintBoatRestartRsp) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type BuoyantCombatDailyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime uint32 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	BestScore uint32 `protobuf:"varint,13,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *BuoyantCombatDailyInfo) Reset() {
	*x = BuoyantCombatDailyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuoyantCombatDailyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuoyantCombatDailyInfo) ProtoMessage() {}

func (x *BuoyantCombatDailyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuoyantCombatDailyInfo.ProtoReflect.Descriptor instead.
func (*BuoyantCombatDailyInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{242}
}

func (x *BuoyantCombatDailyInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BuoyantCombatDailyInfo) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type BuoyantCombatDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyInfoList []*BuoyantCombatDailyInfo `protobuf:"bytes,8,rep,name=daily_info_list,json=dailyInfoList,proto3" json:"daily_info_list,omitempty"`
}

func (x *BuoyantCombatDetailInfo) Reset() {
	*x = BuoyantCombatDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuoyantCombatDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuoyantCombatDetailInfo) ProtoMessage() {}

func (x *BuoyantCombatDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuoyantCombatDetailInfo.ProtoReflect.Descriptor instead.
func (*BuoyantCombatDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{243}
}

func (x *BuoyantCombatDetailInfo) GetDailyInfoList() []*BuoyantCombatDailyInfo {
	if x != nil {
		return x.DailyInfoList
	}
	return nil
}

type StartBuoyantCombatGalleryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId    uint32 `protobuf:"varint,15,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	GalleryLevel uint32 `protobuf:"varint,13,opt,name=gallery_level,json=galleryLevel,proto3" json:"gallery_level,omitempty"`
}

func (x *StartBuoyantCombatGalleryReq) Reset() {
	*x = StartBuoyantCombatGalleryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBuoyantCombatGalleryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBuoyantCombatGalleryReq) ProtoMessage() {}

func (x *StartBuoyantCombatGalleryReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBuoyantCombatGalleryReq.ProtoReflect.Descriptor instead.
func (*StartBuoyantCombatGalleryReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{244}
}

func (x *StartBuoyantCombatGalleryReq) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *StartBuoyantCombatGalleryReq) GetGalleryLevel() uint32 {
	if x != nil {
		return x.GalleryLevel
	}
	return 0
}

type StartBuoyantCombatGalleryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryLevel uint32 `protobuf:"varint,12,opt,name=gallery_level,json=galleryLevel,proto3" json:"gallery_level,omitempty"`
	Retcode      int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GalleryId    uint32 `protobuf:"varint,8,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *StartBuoyantCombatGalleryRsp) Reset() {
	*x = StartBuoyantCombatGalleryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBuoyantCombatGalleryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBuoyantCombatGalleryRsp) ProtoMessage() {}

func (x *StartBuoyantCombatGalleryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBuoyantCombatGalleryRsp.ProtoReflect.Descriptor instead.
func (*StartBuoyantCombatGalleryRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{245}
}

func (x *StartBuoyantCombatGalleryRsp) GetGalleryLevel() uint32 {
	if x != nil {
		return x.GalleryLevel
	}
	return 0
}

func (x *StartBuoyantCombatGalleryRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *StartBuoyantCombatGalleryRsp) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type BuoyantCombatSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNewRecord bool                            `protobuf:"varint,1,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	SettleInfo  *BuoyantCombatGallerySettleInfo `protobuf:"bytes,3,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
}

func (x *BuoyantCombatSettleInfo) Reset() {
	*x = BuoyantCombatSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuoyantCombatSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuoyantCombatSettleInfo) ProtoMessage() {}

func (x *BuoyantCombatSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuoyantCombatSettleInfo.ProtoReflect.Descriptor instead.
func (*BuoyantCombatSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{246}
}

func (x *BuoyantCombatSettleInfo) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *BuoyantCombatSettleInfo) GetSettleInfo() *BuoyantCombatGallerySettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

type BuoyantCombatSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId  uint32                   `protobuf:"varint,8,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	SettleInfo *BuoyantCombatSettleInfo `protobuf:"bytes,11,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
}

func (x *BuoyantCombatSettleNotify) Reset() {
	*x = BuoyantCombatSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuoyantCombatSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuoyantCombatSettleNotify) ProtoMessage() {}

func (x *BuoyantCombatSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuoyantCombatSettleNotify.ProtoReflect.Descriptor instead.
func (*BuoyantCombatSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{247}
}

func (x *BuoyantCombatSettleNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *BuoyantCombatSettleNotify) GetSettleInfo() *BuoyantCombatSettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

type SetLimitOptimizationNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive bool `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *SetLimitOptimizationNotify) Reset() {
	*x = SetLimitOptimizationNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLimitOptimizationNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLimitOptimizationNotify) ProtoMessage() {}

func (x *SetLimitOptimizationNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLimitOptimizationNotify.ProtoReflect.Descriptor instead.
func (*SetLimitOptimizationNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{248}
}

func (x *SetLimitOptimizationNotify) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type SummerTimeDungeonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakenChestCount uint32 `protobuf:"varint,15,opt,name=taken_chest_count,json=takenChestCount,proto3" json:"taken_chest_count,omitempty"`
	TotalChestCount uint32 `protobuf:"varint,12,opt,name=total_chest_count,json=totalChestCount,proto3" json:"total_chest_count,omitempty"`
	TakenShellCount uint32 `protobuf:"varint,14,opt,name=taken_shell_count,json=takenShellCount,proto3" json:"taken_shell_count,omitempty"`
	DungeonId       uint32 `protobuf:"varint,4,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	TotalShellCount uint32 `protobuf:"varint,13,opt,name=total_shell_count,json=totalShellCount,proto3" json:"total_shell_count,omitempty"`
}

func (x *SummerTimeDungeonInfo) Reset() {
	*x = SummerTimeDungeonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeDungeonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeDungeonInfo) ProtoMessage() {}

func (x *SummerTimeDungeonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeDungeonInfo.ProtoReflect.Descriptor instead.
func (*SummerTimeDungeonInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{249}
}

func (x *SummerTimeDungeonInfo) GetTakenChestCount() uint32 {
	if x != nil {
		return x.TakenChestCount
	}
	return 0
}

func (x *SummerTimeDungeonInfo) GetTotalChestCount() uint32 {
	if x != nil {
		return x.TotalChestCount
	}
	return 0
}

func (x *SummerTimeDungeonInfo) GetTakenShellCount() uint32 {
	if x != nil {
		return x.TakenShellCount
	}
	return 0
}

func (x *SummerTimeDungeonInfo) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *SummerTimeDungeonInfo) GetTotalShellCount() uint32 {
	if x != nil {
		return x.TotalShellCount
	}
	return 0
}

type EchoShellDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SummerTimeDungeonList []*SummerTimeDungeonInfo `protobuf:"bytes,8,rep,name=summer_time_dungeon_list,json=summerTimeDungeonList,proto3" json:"summer_time_dungeon_list,omitempty"`
	ShellList             []uint32                 `protobuf:"varint,13,rep,packed,name=shell_list,json=shellList,proto3" json:"shell_list,omitempty"`
	PassDungeonList       []uint32                 `protobuf:"varint,4,rep,packed,name=pass_dungeon_list,json=passDungeonList,proto3" json:"pass_dungeon_list,omitempty"`
	TakenRewardList       []uint32                 `protobuf:"varint,2,rep,packed,name=taken_reward_list,json=takenRewardList,proto3" json:"taken_reward_list,omitempty"`
}

func (x *EchoShellDetailInfo) Reset() {
	*x = EchoShellDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoShellDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoShellDetailInfo) ProtoMessage() {}

func (x *EchoShellDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoShellDetailInfo.ProtoReflect.Descriptor instead.
func (*EchoShellDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{250}
}

func (x *EchoShellDetailInfo) GetSummerTimeDungeonList() []*SummerTimeDungeonInfo {
	if x != nil {
		return x.SummerTimeDungeonList
	}
	return nil
}

func (x *EchoShellDetailInfo) GetShellList() []uint32 {
	if x != nil {
		return x.ShellList
	}
	return nil
}

func (x *EchoShellDetailInfo) GetPassDungeonList() []uint32 {
	if x != nil {
		return x.PassDungeonList
	}
	return nil
}

func (x *EchoShellDetailInfo) GetTakenRewardList() []uint32 {
	if x != nil {
		return x.TakenRewardList
	}
	return nil
}

type EchoShellUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShellId uint32 `protobuf:"varint,1,opt,name=shell_id,json=shellId,proto3" json:"shell_id,omitempty"`
}

func (x *EchoShellUpdateNotify) Reset() {
	*x = EchoShellUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoShellUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoShellUpdateNotify) ProtoMessage() {}

func (x *EchoShellUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoShellUpdateNotify.ProtoReflect.Descriptor instead.
func (*EchoShellUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{251}
}

func (x *EchoShellUpdateNotify) GetShellId() uint32 {
	if x != nil {
		return x.ShellId
	}
	return 0
}

type EchoShellTakeRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId uint32 `protobuf:"varint,10,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (x *EchoShellTakeRewardReq) Reset() {
	*x = EchoShellTakeRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoShellTakeRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoShellTakeRewardReq) ProtoMessage() {}

func (x *EchoShellTakeRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoShellTakeRewardReq.ProtoReflect.Descriptor instead.
func (*EchoShellTakeRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{252}
}

func (x *EchoShellTakeRewardReq) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

type EchoShellTakeRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId uint32 `protobuf:"varint,6,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Retcode  int32  `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *EchoShellTakeRewardRsp) Reset() {
	*x = EchoShellTakeRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoShellTakeRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoShellTakeRewardRsp) ProtoMessage() {}

func (x *EchoShellTakeRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoShellTakeRewardRsp.ProtoReflect.Descriptor instead.
func (*EchoShellTakeRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{253}
}

func (x *EchoShellTakeRewardRsp) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *EchoShellTakeRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type BounceConjuringChapterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestScore uint32 `protobuf:"varint,12,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
	OpenTime  uint32 `protobuf:"varint,9,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	ChapterId uint32 `protobuf:"varint,13,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
}

func (x *BounceConjuringChapterInfo) Reset() {
	*x = BounceConjuringChapterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BounceConjuringChapterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BounceConjuringChapterInfo) ProtoMessage() {}

func (x *BounceConjuringChapterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BounceConjuringChapterInfo.ProtoReflect.Descriptor instead.
func (*BounceConjuringChapterInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{254}
}

func (x *BounceConjuringChapterInfo) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

func (x *BounceConjuringChapterInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *BounceConjuringChapterInfo) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

type BounceConjuringActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChapterInfoList  []*BounceConjuringChapterInfo `protobuf:"bytes,8,rep,name=chapter_info_list,json=chapterInfoList,proto3" json:"chapter_info_list,omitempty"`
	IsContentClosed  bool                          `protobuf:"varint,12,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	ContentCloseTime uint32                        `protobuf:"varint,7,opt,name=content_close_time,json=contentCloseTime,proto3" json:"content_close_time,omitempty"`
}

func (x *BounceConjuringActivityDetailInfo) Reset() {
	*x = BounceConjuringActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BounceConjuringActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BounceConjuringActivityDetailInfo) ProtoMessage() {}

func (x *BounceConjuringActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BounceConjuringActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*BounceConjuringActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{255}
}

func (x *BounceConjuringActivityDetailInfo) GetChapterInfoList() []*BounceConjuringChapterInfo {
	if x != nil {
		return x.ChapterInfoList
	}
	return nil
}

func (x *BounceConjuringActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *BounceConjuringActivityDetailInfo) GetContentCloseTime() uint32 {
	if x != nil {
		return x.ContentCloseTime
	}
	return 0
}

type BounceConjuringSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNewRecord   bool                                         `protobuf:"varint,14,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	SettleInfoMap map[uint32]*BounceConjuringGallerySettleInfo `protobuf:"bytes,4,rep,name=settle_info_map,json=settleInfoMap,proto3" json:"settle_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalScore    uint32                                       `protobuf:"varint,2,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	ChapterId     uint32                                       `protobuf:"varint,13,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
}

func (x *BounceConjuringSettleNotify) Reset() {
	*x = BounceConjuringSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BounceConjuringSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BounceConjuringSettleNotify) ProtoMessage() {}

func (x *BounceConjuringSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BounceConjuringSettleNotify.ProtoReflect.Descriptor instead.
func (*BounceConjuringSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{256}
}

func (x *BounceConjuringSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *BounceConjuringSettleNotify) GetSettleInfoMap() map[uint32]*BounceConjuringGallerySettleInfo {
	if x != nil {
		return x.SettleInfoMap
	}
	return nil
}

func (x *BounceConjuringSettleNotify) GetTotalScore() uint32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *BounceConjuringSettleNotify) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

type BlitzRushStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen   bool   `protobuf:"varint,13,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	OpenTime uint32 `protobuf:"varint,11,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
}

func (x *BlitzRushStage) Reset() {
	*x = BlitzRushStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlitzRushStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlitzRushStage) ProtoMessage() {}

func (x *BlitzRushStage) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlitzRushStage.ProtoReflect.Descriptor instead.
func (*BlitzRushStage) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{257}
}

func (x *BlitzRushStage) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *BlitzRushStage) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

type ParkourLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestRecord uint32  `protobuf:"varint,12,opt,name=best_record,json=bestRecord,proto3" json:"best_record,omitempty"`
	IsOpen     bool    `protobuf:"varint,9,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	OpenTime   uint32  `protobuf:"varint,7,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	Pos        *Vector `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *ParkourLevelInfo) Reset() {
	*x = ParkourLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkourLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkourLevelInfo) ProtoMessage() {}

func (x *ParkourLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkourLevelInfo.ProtoReflect.Descriptor instead.
func (*ParkourLevelInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{258}
}

func (x *ParkourLevelInfo) GetBestRecord() uint32 {
	if x != nil {
		return x.BestRecord
	}
	return 0
}

func (x *ParkourLevelInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *ParkourLevelInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *ParkourLevelInfo) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

type BlitzRushActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageList            []*BlitzRushStage   `protobuf:"bytes,10,rep,name=stage_list,json=stageList,proto3" json:"stage_list,omitempty"`
	ContentCloseTime     uint32              `protobuf:"varint,14,opt,name=content_close_time,json=contentCloseTime,proto3" json:"content_close_time,omitempty"`
	IsContentClosed      bool                `protobuf:"varint,2,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	ParkourLevelInfoList []*ParkourLevelInfo `protobuf:"bytes,6,rep,name=parkour_level_info_list,json=parkourLevelInfoList,proto3" json:"parkour_level_info_list,omitempty"`
}

func (x *BlitzRushActivityDetailInfo) Reset() {
	*x = BlitzRushActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlitzRushActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlitzRushActivityDetailInfo) ProtoMessage() {}

func (x *BlitzRushActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlitzRushActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*BlitzRushActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{259}
}

func (x *BlitzRushActivityDetailInfo) GetStageList() []*BlitzRushStage {
	if x != nil {
		return x.StageList
	}
	return nil
}

func (x *BlitzRushActivityDetailInfo) GetContentCloseTime() uint32 {
	if x != nil {
		return x.ContentCloseTime
	}
	return 0
}

func (x *BlitzRushActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *BlitzRushActivityDetailInfo) GetParkourLevelInfoList() []*ParkourLevelInfo {
	if x != nil {
		return x.ParkourLevelInfoList
	}
	return nil
}

type BlitzRushParkourRestartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,13,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	GroupId    uint32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *BlitzRushParkourRestartReq) Reset() {
	*x = BlitzRushParkourRestartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlitzRushParkourRestartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlitzRushParkourRestartReq) ProtoMessage() {}

func (x *BlitzRushParkourRestartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlitzRushParkourRestartReq.ProtoReflect.Descriptor instead.
func (*BlitzRushParkourRestartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{260}
}

func (x *BlitzRushParkourRestartReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *BlitzRushParkourRestartReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type BlitzRushParkourRestartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode    int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GroupId    uint32 `protobuf:"varint,15,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ScheduleId uint32 `protobuf:"varint,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *BlitzRushParkourRestartRsp) Reset() {
	*x = BlitzRushParkourRestartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlitzRushParkourRestartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlitzRushParkourRestartRsp) ProtoMessage() {}

func (x *BlitzRushParkourRestartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlitzRushParkourRestartRsp.ProtoReflect.Descriptor instead.
func (*BlitzRushParkourRestartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{261}
}

func (x *BlitzRushParkourRestartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BlitzRushParkourRestartRsp) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *BlitzRushParkourRestartRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type ChessActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                  uint32   `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	IsTeachDungeonFinished bool     `protobuf:"varint,9,opt,name=is_teach_dungeon_finished,json=isTeachDungeonFinished,proto3" json:"is_teach_dungeon_finished,omitempty"`
	ContentCloseTime       uint32   `protobuf:"varint,14,opt,name=content_close_time,json=contentCloseTime,proto3" json:"content_close_time,omitempty"`
	ObtainedExp            uint32   `protobuf:"varint,8,opt,name=obtained_exp,json=obtainedExp,proto3" json:"obtained_exp,omitempty"`
	IsContentClosed        bool     `protobuf:"varint,5,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	AvailableExp           uint32   `protobuf:"varint,2,opt,name=available_exp,json=availableExp,proto3" json:"available_exp,omitempty"`
	Exp                    uint32   `protobuf:"varint,13,opt,name=exp,proto3" json:"exp,omitempty"`
	FinishedMapIdList      []uint32 `protobuf:"varint,1,rep,packed,name=finished_map_id_list,json=finishedMapIdList,proto3" json:"finished_map_id_list,omitempty"`
	PunishOverTime         uint32   `protobuf:"varint,3,opt,name=punish_over_time,json=punishOverTime,proto3" json:"punish_over_time,omitempty"`
}

func (x *ChessActivityDetailInfo) Reset() {
	*x = ChessActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessActivityDetailInfo) ProtoMessage() {}

func (x *ChessActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*ChessActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{262}
}

func (x *ChessActivityDetailInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ChessActivityDetailInfo) GetIsTeachDungeonFinished() bool {
	if x != nil {
		return x.IsTeachDungeonFinished
	}
	return false
}

func (x *ChessActivityDetailInfo) GetContentCloseTime() uint32 {
	if x != nil {
		return x.ContentCloseTime
	}
	return 0
}

func (x *ChessActivityDetailInfo) GetObtainedExp() uint32 {
	if x != nil {
		return x.ObtainedExp
	}
	return 0
}

func (x *ChessActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *ChessActivityDetailInfo) GetAvailableExp() uint32 {
	if x != nil {
		return x.AvailableExp
	}
	return 0
}

func (x *ChessActivityDetailInfo) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *ChessActivityDetailInfo) GetFinishedMapIdList() []uint32 {
	if x != nil {
		return x.FinishedMapIdList
	}
	return nil
}

func (x *ChessActivityDetailInfo) GetPunishOverTime() uint32 {
	if x != nil {
		return x.PunishOverTime
	}
	return 0
}

type EnterChessDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId uint32 `protobuf:"varint,12,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (x *EnterChessDungeonReq) Reset() {
	*x = EnterChessDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterChessDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterChessDungeonReq) ProtoMessage() {}

func (x *EnterChessDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterChessDungeonReq.ProtoReflect.Descriptor instead.
func (*EnterChessDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{263}
}

func (x *EnterChessDungeonReq) GetMapId() uint32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

type EnterChessDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
	MapId   uint32 `protobuf:"varint,13,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (x *EnterChessDungeonRsp) Reset() {
	*x = EnterChessDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterChessDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterChessDungeonRsp) ProtoMessage() {}

func (x *EnterChessDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterChessDungeonRsp.ProtoReflect.Descriptor instead.
func (*EnterChessDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{264}
}

func (x *EnterChessDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *EnterChessDungeonRsp) GetMapId() uint32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

type TreasureMapHostInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpChallengeRegionList []uint32 `protobuf:"varint,8,rep,packed,name=mp_challenge_region_list,json=mpChallengeRegionList,proto3" json:"mp_challenge_region_list,omitempty"`
}

func (x *TreasureMapHostInfoNotify) Reset() {
	*x = TreasureMapHostInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureMapHostInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureMapHostInfoNotify) ProtoMessage() {}

func (x *TreasureMapHostInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureMapHostInfoNotify.ProtoReflect.Descriptor instead.
func (*TreasureMapHostInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{265}
}

func (x *TreasureMapHostInfoNotify) GetMpChallengeRegionList() []uint32 {
	if x != nil {
		return x.MpChallengeRegionList
	}
	return nil
}

type SumoActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DifficultyId uint32                    `protobuf:"varint,11,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	SumoStageMap map[uint32]*SumoStageData `protobuf:"bytes,13,rep,name=sumo_stage_map,json=sumoStageMap,proto3" json:"sumo_stage_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastStageId  uint32                    `protobuf:"varint,14,opt,name=last_stage_id,json=lastStageId,proto3" json:"last_stage_id,omitempty"`
}

func (x *SumoActivityDetailInfo) Reset() {
	*x = SumoActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoActivityDetailInfo) ProtoMessage() {}

func (x *SumoActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*SumoActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{266}
}

func (x *SumoActivityDetailInfo) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *SumoActivityDetailInfo) GetSumoStageMap() map[uint32]*SumoStageData {
	if x != nil {
		return x.SumoStageMap
	}
	return nil
}

func (x *SumoActivityDetailInfo) GetLastStageId() uint32 {
	if x != nil {
		return x.LastStageId
	}
	return 0
}

type SumoAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTrial  bool   `protobuf:"varint,2,opt,name=is_trial,json=isTrial,proto3" json:"is_trial,omitempty"`
	AvatarId uint64 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *SumoAvatarInfo) Reset() {
	*x = SumoAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoAvatarInfo) ProtoMessage() {}

func (x *SumoAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoAvatarInfo.ProtoReflect.Descriptor instead.
func (*SumoAvatarInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{267}
}

func (x *SumoAvatarInfo) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

func (x *SumoAvatarInfo) GetAvatarId() uint64 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type SumoTeamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillIdList    []uint32          `protobuf:"varint,14,rep,packed,name=skill_id_list,json=skillIdList,proto3" json:"skill_id_list,omitempty"`
	AvatarInfoList []*SumoAvatarInfo `protobuf:"bytes,3,rep,name=avatar_info_list,json=avatarInfoList,proto3" json:"avatar_info_list,omitempty"`
}

func (x *SumoTeamData) Reset() {
	*x = SumoTeamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoTeamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoTeamData) ProtoMessage() {}

func (x *SumoTeamData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoTeamData.ProtoReflect.Descriptor instead.
func (*SumoTeamData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{268}
}

func (x *SumoTeamData) GetSkillIdList() []uint32 {
	if x != nil {
		return x.SkillIdList
	}
	return nil
}

func (x *SumoTeamData) GetAvatarInfoList() []*SumoAvatarInfo {
	if x != nil {
		return x.AvatarInfoList
	}
	return nil
}

type SumoStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxScore uint32          `protobuf:"varint,1,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	OpenTime uint32          `protobuf:"varint,5,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	StageId  uint32          `protobuf:"varint,3,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	TeamList []*SumoTeamData `protobuf:"bytes,7,rep,name=team_list,json=teamList,proto3" json:"team_list,omitempty"`
	IsOpen   bool            `protobuf:"varint,11,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *SumoStageData) Reset() {
	*x = SumoStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoStageData) ProtoMessage() {}

func (x *SumoStageData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoStageData.ProtoReflect.Descriptor instead.
func (*SumoStageData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{269}
}

func (x *SumoStageData) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *SumoStageData) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *SumoStageData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SumoStageData) GetTeamList() []*SumoTeamData {
	if x != nil {
		return x.TeamList
	}
	return nil
}

func (x *SumoStageData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type SumoSaveTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId   uint32          `protobuf:"varint,11,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	StageId      uint32          `protobuf:"varint,13,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	DifficultyId uint32          `protobuf:"varint,7,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	TeamList     []*SumoTeamData `protobuf:"bytes,12,rep,name=team_list,json=teamList,proto3" json:"team_list,omitempty"`
}

func (x *SumoSaveTeamReq) Reset() {
	*x = SumoSaveTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoSaveTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoSaveTeamReq) ProtoMessage() {}

func (x *SumoSaveTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoSaveTeamReq.ProtoReflect.Descriptor instead.
func (*SumoSaveTeamReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{270}
}

func (x *SumoSaveTeamReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *SumoSaveTeamReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SumoSaveTeamReq) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *SumoSaveTeamReq) GetTeamList() []*SumoTeamData {
	if x != nil {
		return x.TeamList
	}
	return nil
}

type SumoSaveTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId      uint32          `protobuf:"varint,9,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Retcode      int32           `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ActivityId   uint32          `protobuf:"varint,11,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	TeamList     []*SumoTeamData `protobuf:"bytes,13,rep,name=team_list,json=teamList,proto3" json:"team_list,omitempty"`
	DifficultyId uint32          `protobuf:"varint,10,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
}

func (x *SumoSaveTeamRsp) Reset() {
	*x = SumoSaveTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoSaveTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoSaveTeamRsp) ProtoMessage() {}

func (x *SumoSaveTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoSaveTeamRsp.ProtoReflect.Descriptor instead.
func (*SumoSaveTeamRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{271}
}

func (x *SumoSaveTeamRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SumoSaveTeamRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *SumoSaveTeamRsp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *SumoSaveTeamRsp) GetTeamList() []*SumoTeamData {
	if x != nil {
		return x.TeamList
	}
	return nil
}

func (x *SumoSaveTeamRsp) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

type SumoSelectTeamAndEnterDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId   uint32          `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	StageId      uint32          `protobuf:"varint,7,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	DifficultyId uint32          `protobuf:"varint,4,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	TeamList     []*SumoTeamData `protobuf:"bytes,10,rep,name=team_list,json=teamList,proto3" json:"team_list,omitempty"`
}

func (x *SumoSelectTeamAndEnterDungeonReq) Reset() {
	*x = SumoSelectTeamAndEnterDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoSelectTeamAndEnterDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoSelectTeamAndEnterDungeonReq) ProtoMessage() {}

func (x *SumoSelectTeamAndEnterDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoSelectTeamAndEnterDungeonReq.ProtoReflect.Descriptor instead.
func (*SumoSelectTeamAndEnterDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{272}
}

func (x *SumoSelectTeamAndEnterDungeonReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *SumoSelectTeamAndEnterDungeonReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SumoSelectTeamAndEnterDungeonReq) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *SumoSelectTeamAndEnterDungeonReq) GetTeamList() []*SumoTeamData {
	if x != nil {
		return x.TeamList
	}
	return nil
}

type SumoSelectTeamAndEnterDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode      int32           `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ActivityId   uint32          `protobuf:"varint,14,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	DifficultyId uint32          `protobuf:"varint,12,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	StageId      uint32          `protobuf:"varint,9,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	TeamList     []*SumoTeamData `protobuf:"bytes,2,rep,name=team_list,json=teamList,proto3" json:"team_list,omitempty"`
}

func (x *SumoSelectTeamAndEnterDungeonRsp) Reset() {
	*x = SumoSelectTeamAndEnterDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoSelectTeamAndEnterDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoSelectTeamAndEnterDungeonRsp) ProtoMessage() {}

func (x *SumoSelectTeamAndEnterDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoSelectTeamAndEnterDungeonRsp.ProtoReflect.Descriptor instead.
func (*SumoSelectTeamAndEnterDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{273}
}

func (x *SumoSelectTeamAndEnterDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *SumoSelectTeamAndEnterDungeonRsp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *SumoSelectTeamAndEnterDungeonRsp) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *SumoSelectTeamAndEnterDungeonRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SumoSelectTeamAndEnterDungeonRsp) GetTeamList() []*SumoTeamData {
	if x != nil {
		return x.TeamList
	}
	return nil
}

type SumoDungeonSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinalScore          uint32 `protobuf:"varint,7,opt,name=final_score,json=finalScore,proto3" json:"final_score,omitempty"`
	DifficultyId        uint32 `protobuf:"varint,14,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	KillEliteMonsterNum uint32 `protobuf:"varint,15,opt,name=kill_elite_monster_num,json=killEliteMonsterNum,proto3" json:"kill_elite_monster_num,omitempty"`
	StageId             uint32 `protobuf:"varint,12,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	KillMonsterNum      uint32 `protobuf:"varint,4,opt,name=kill_monster_num,json=killMonsterNum,proto3" json:"kill_monster_num,omitempty"`
	IsNewRecord         bool   `protobuf:"varint,5,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
}

func (x *SumoDungeonSettleNotify) Reset() {
	*x = SumoDungeonSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoDungeonSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoDungeonSettleNotify) ProtoMessage() {}

func (x *SumoDungeonSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoDungeonSettleNotify.ProtoReflect.Descriptor instead.
func (*SumoDungeonSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{274}
}

func (x *SumoDungeonSettleNotify) GetFinalScore() uint32 {
	if x != nil {
		return x.FinalScore
	}
	return 0
}

func (x *SumoDungeonSettleNotify) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *SumoDungeonSettleNotify) GetKillEliteMonsterNum() uint32 {
	if x != nil {
		return x.KillEliteMonsterNum
	}
	return 0
}

func (x *SumoDungeonSettleNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SumoDungeonSettleNotify) GetKillMonsterNum() uint32 {
	if x != nil {
		return x.KillMonsterNum
	}
	return 0
}

func (x *SumoDungeonSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

type SumoDungeonAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarGuid uint64 `protobuf:"varint,11,opt,name=avatar_guid,json=avatarGuid,proto3" json:"avatar_guid,omitempty"`
	IsAvlive   bool   `protobuf:"varint,13,opt,name=is_avlive,json=isAvlive,proto3" json:"is_avlive,omitempty"`
	IsTrial    bool   `protobuf:"varint,4,opt,name=is_trial,json=isTrial,proto3" json:"is_trial,omitempty"`
}

func (x *SumoDungeonAvatar) Reset() {
	*x = SumoDungeonAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoDungeonAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoDungeonAvatar) ProtoMessage() {}

func (x *SumoDungeonAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoDungeonAvatar.ProtoReflect.Descriptor instead.
func (*SumoDungeonAvatar) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{275}
}

func (x *SumoDungeonAvatar) GetAvatarGuid() uint64 {
	if x != nil {
		return x.AvatarGuid
	}
	return 0
}

func (x *SumoDungeonAvatar) GetIsAvlive() bool {
	if x != nil {
		return x.IsAvlive
	}
	return false
}

func (x *SumoDungeonAvatar) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

type SumoDungeonTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonAvatarList []*SumoDungeonAvatar `protobuf:"bytes,15,rep,name=dungeon_avatar_list,json=dungeonAvatarList,proto3" json:"dungeon_avatar_list,omitempty"`
}

func (x *SumoDungeonTeam) Reset() {
	*x = SumoDungeonTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoDungeonTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoDungeonTeam) ProtoMessage() {}

func (x *SumoDungeonTeam) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoDungeonTeam.ProtoReflect.Descriptor instead.
func (*SumoDungeonTeam) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{276}
}

func (x *SumoDungeonTeam) GetDungeonAvatarList() []*SumoDungeonAvatar {
	if x != nil {
		return x.DungeonAvatarList
	}
	return nil
}

type SumoEnterDungeonNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId          uint32             `protobuf:"varint,15,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	DungeonTeamList     []*SumoDungeonTeam `protobuf:"bytes,11,rep,name=dungeon_team_list,json=dungeonTeamList,proto3" json:"dungeon_team_list,omitempty"`
	NoSwitchPunishTime  uint32             `protobuf:"varint,10,opt,name=no_switch_punish_time,json=noSwitchPunishTime,proto3" json:"no_switch_punish_time,omitempty"`
	NextValidSwitchTime uint32             `protobuf:"varint,13,opt,name=next_valid_switch_time,json=nextValidSwitchTime,proto3" json:"next_valid_switch_time,omitempty"`
	StageId             uint32             `protobuf:"varint,7,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	CurTeamIndex        uint32             `protobuf:"varint,5,opt,name=cur_team_index,json=curTeamIndex,proto3" json:"cur_team_index,omitempty"`
}

func (x *SumoEnterDungeonNotify) Reset() {
	*x = SumoEnterDungeonNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoEnterDungeonNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoEnterDungeonNotify) ProtoMessage() {}

func (x *SumoEnterDungeonNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoEnterDungeonNotify.ProtoReflect.Descriptor instead.
func (*SumoEnterDungeonNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{277}
}

func (x *SumoEnterDungeonNotify) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *SumoEnterDungeonNotify) GetDungeonTeamList() []*SumoDungeonTeam {
	if x != nil {
		return x.DungeonTeamList
	}
	return nil
}

func (x *SumoEnterDungeonNotify) GetNoSwitchPunishTime() uint32 {
	if x != nil {
		return x.NoSwitchPunishTime
	}
	return 0
}

func (x *SumoEnterDungeonNotify) GetNextValidSwitchTime() uint32 {
	if x != nil {
		return x.NextValidSwitchTime
	}
	return 0
}

func (x *SumoEnterDungeonNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SumoEnterDungeonNotify) GetCurTeamIndex() uint32 {
	if x != nil {
		return x.CurTeamIndex
	}
	return 0
}

type SumoSwitchTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId    uint32 `protobuf:"varint,9,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	ActivityId uint32 `protobuf:"varint,5,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *SumoSwitchTeamReq) Reset() {
	*x = SumoSwitchTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoSwitchTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoSwitchTeamReq) ProtoMessage() {}

func (x *SumoSwitchTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoSwitchTeamReq.ProtoReflect.Descriptor instead.
func (*SumoSwitchTeamReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{278}
}

func (x *SumoSwitchTeamReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SumoSwitchTeamReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type SumoSwitchTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextValidSwitchTime uint32             `protobuf:"varint,7,opt,name=next_valid_switch_time,json=nextValidSwitchTime,proto3" json:"next_valid_switch_time,omitempty"`
	DungeonTeamList     []*SumoDungeonTeam `protobuf:"bytes,10,rep,name=dungeon_team_list,json=dungeonTeamList,proto3" json:"dungeon_team_list,omitempty"`
	ActivityId          uint32             `protobuf:"varint,6,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Retcode             int32              `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
	CurTeamIndex        uint32             `protobuf:"varint,11,opt,name=cur_team_index,json=curTeamIndex,proto3" json:"cur_team_index,omitempty"`
	StageId             uint32             `protobuf:"varint,5,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *SumoSwitchTeamRsp) Reset() {
	*x = SumoSwitchTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoSwitchTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoSwitchTeamRsp) ProtoMessage() {}

func (x *SumoSwitchTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoSwitchTeamRsp.ProtoReflect.Descriptor instead.
func (*SumoSwitchTeamRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{279}
}

func (x *SumoSwitchTeamRsp) GetNextValidSwitchTime() uint32 {
	if x != nil {
		return x.NextValidSwitchTime
	}
	return 0
}

func (x *SumoSwitchTeamRsp) GetDungeonTeamList() []*SumoDungeonTeam {
	if x != nil {
		return x.DungeonTeamList
	}
	return nil
}

func (x *SumoSwitchTeamRsp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *SumoSwitchTeamRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *SumoSwitchTeamRsp) GetCurTeamIndex() uint32 {
	if x != nil {
		return x.CurTeamIndex
	}
	return 0
}

func (x *SumoSwitchTeamRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type SumoLeaveDungeonNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SumoLeaveDungeonNotify) Reset() {
	*x = SumoLeaveDungeonNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoLeaveDungeonNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoLeaveDungeonNotify) ProtoMessage() {}

func (x *SumoLeaveDungeonNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoLeaveDungeonNotify.ProtoReflect.Descriptor instead.
func (*SumoLeaveDungeonNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{280}
}

type SumoRestartDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SumoRestartDungeonReq) Reset() {
	*x = SumoRestartDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoRestartDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoRestartDungeonReq) ProtoMessage() {}

func (x *SumoRestartDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoRestartDungeonReq.ProtoReflect.Descriptor instead.
func (*SumoRestartDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{281}
}

type SumoRestartDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	DungeonId uint32 `protobuf:"varint,4,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	PointId   uint32 `protobuf:"varint,12,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"`
}

func (x *SumoRestartDungeonRsp) Reset() {
	*x = SumoRestartDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoRestartDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoRestartDungeonRsp) ProtoMessage() {}

func (x *SumoRestartDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoRestartDungeonRsp.ProtoReflect.Descriptor instead.
func (*SumoRestartDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{282}
}

func (x *SumoRestartDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *SumoRestartDungeonRsp) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *SumoRestartDungeonRsp) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

type ActivityDisableTransferPointInteractionNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDisable      bool        `protobuf:"varint,10,opt,name=is_disable,json=isDisable,proto3" json:"is_disable,omitempty"`
	ScenePointPair *Uint32Pair `protobuf:"bytes,5,opt,name=scene_point_pair,json=scenePointPair,proto3" json:"scene_point_pair,omitempty"`
}

func (x *ActivityDisableTransferPointInteractionNotify) Reset() {
	*x = ActivityDisableTransferPointInteractionNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDisableTransferPointInteractionNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDisableTransferPointInteractionNotify) ProtoMessage() {}

func (x *ActivityDisableTransferPointInteractionNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDisableTransferPointInteractionNotify.ProtoReflect.Descriptor instead.
func (*ActivityDisableTransferPointInteractionNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{283}
}

func (x *ActivityDisableTransferPointInteractionNotify) GetIsDisable() bool {
	if x != nil {
		return x.IsDisable
	}
	return false
}

func (x *ActivityDisableTransferPointInteractionNotify) GetScenePointPair() *Uint32Pair {
	if x != nil {
		return x.ScenePointPair
	}
	return nil
}

type SumoSetNoSwitchPunishTimeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurTeamIndex        uint32             `protobuf:"varint,15,opt,name=cur_team_index,json=curTeamIndex,proto3" json:"cur_team_index,omitempty"`
	StageId             uint32             `protobuf:"varint,13,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	DungeonTeamList     []*SumoDungeonTeam `protobuf:"bytes,11,rep,name=dungeon_team_list,json=dungeonTeamList,proto3" json:"dungeon_team_list,omitempty"`
	NoSwitchPunishTime  uint32             `protobuf:"varint,2,opt,name=no_switch_punish_time,json=noSwitchPunishTime,proto3" json:"no_switch_punish_time,omitempty"`
	NextValidSwitchTime uint32             `protobuf:"varint,14,opt,name=next_valid_switch_time,json=nextValidSwitchTime,proto3" json:"next_valid_switch_time,omitempty"`
	ActivityId          uint32             `protobuf:"varint,9,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *SumoSetNoSwitchPunishTimeNotify) Reset() {
	*x = SumoSetNoSwitchPunishTimeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoSetNoSwitchPunishTimeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoSetNoSwitchPunishTimeNotify) ProtoMessage() {}

func (x *SumoSetNoSwitchPunishTimeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoSetNoSwitchPunishTimeNotify.ProtoReflect.Descriptor instead.
func (*SumoSetNoSwitchPunishTimeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{284}
}

func (x *SumoSetNoSwitchPunishTimeNotify) GetCurTeamIndex() uint32 {
	if x != nil {
		return x.CurTeamIndex
	}
	return 0
}

func (x *SumoSetNoSwitchPunishTimeNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SumoSetNoSwitchPunishTimeNotify) GetDungeonTeamList() []*SumoDungeonTeam {
	if x != nil {
		return x.DungeonTeamList
	}
	return nil
}

func (x *SumoSetNoSwitchPunishTimeNotify) GetNoSwitchPunishTime() uint32 {
	if x != nil {
		return x.NoSwitchPunishTime
	}
	return 0
}

func (x *SumoSetNoSwitchPunishTimeNotify) GetNextValidSwitchTime() uint32 {
	if x != nil {
		return x.NextValidSwitchTime
	}
	return 0
}

func (x *SumoSetNoSwitchPunishTimeNotify) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type MoonfinTrialLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestRecord uint32 `protobuf:"varint,3,opt,name=best_record,json=bestRecord,proto3" json:"best_record,omitempty"`
	OpenTime   uint32 `protobuf:"varint,1,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
}

func (x *MoonfinTrialLevelInfo) Reset() {
	*x = MoonfinTrialLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoonfinTrialLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoonfinTrialLevelInfo) ProtoMessage() {}

func (x *MoonfinTrialLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoonfinTrialLevelInfo.ProtoReflect.Descriptor instead.
func (*MoonfinTrialLevelInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{285}
}

func (x *MoonfinTrialLevelInfo) GetBestRecord() uint32 {
	if x != nil {
		return x.BestRecord
	}
	return 0
}

func (x *MoonfinTrialLevelInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

type MoonfinTrialActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelInfoMap     map[uint32]*MoonfinTrialLevelInfo `protobuf:"bytes,5,rep,name=level_info_map,json=levelInfoMap,proto3" json:"level_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SpecialFishCount uint32                            `protobuf:"varint,11,opt,name=special_fish_count,json=specialFishCount,proto3" json:"special_fish_count,omitempty"`
}

func (x *MoonfinTrialActivityDetailInfo) Reset() {
	*x = MoonfinTrialActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoonfinTrialActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoonfinTrialActivityDetailInfo) ProtoMessage() {}

func (x *MoonfinTrialActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoonfinTrialActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*MoonfinTrialActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{286}
}

func (x *MoonfinTrialActivityDetailInfo) GetLevelInfoMap() map[uint32]*MoonfinTrialLevelInfo {
	if x != nil {
		return x.LevelInfoMap
	}
	return nil
}

func (x *MoonfinTrialActivityDetailInfo) GetSpecialFishCount() uint32 {
	if x != nil {
		return x.SpecialFishCount
	}
	return 0
}

type FishingGallerySettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId  uint32                    `protobuf:"varint,6,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	LevelId    uint32                    `protobuf:"varint,15,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	SettleInfo *FishingGallerySettleInfo `protobuf:"bytes,13,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
}

func (x *FishingGallerySettleNotify) Reset() {
	*x = FishingGallerySettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishingGallerySettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishingGallerySettleNotify) ProtoMessage() {}

func (x *FishingGallerySettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishingGallerySettleNotify.ProtoReflect.Descriptor instead.
func (*FishingGallerySettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{287}
}

func (x *FishingGallerySettleNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *FishingGallerySettleNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *FishingGallerySettleNotify) GetSettleInfo() *FishingGallerySettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

type LunaRiteHintPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId uint32                `protobuf:"varint,11,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	Index  uint32                `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
	Type   LunaRiteHintPointType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.LunaRiteHintPointType" json:"type,omitempty"`
	Pos    *Vector               `protobuf:"bytes,10,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *LunaRiteHintPoint) Reset() {
	*x = LunaRiteHintPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteHintPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteHintPoint) ProtoMessage() {}

func (x *LunaRiteHintPoint) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteHintPoint.ProtoReflect.Descriptor instead.
func (*LunaRiteHintPoint) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{288}
}

func (x *LunaRiteHintPoint) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *LunaRiteHintPoint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LunaRiteHintPoint) GetType() LunaRiteHintPointType {
	if x != nil {
		return x.Type
	}
	return LunaRiteHintPointType_LUNA_RITE_HINT_TYPE_NONE
}

func (x *LunaRiteHintPoint) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

type LunaRiteAreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SacrificeList       []uint32               `protobuf:"varint,11,rep,packed,name=sacrifice_list,json=sacrificeList,proto3" json:"sacrifice_list,omitempty"`
	HintStatus          LunaRiteHintStatusType `protobuf:"varint,7,opt,name=hint_status,json=hintStatus,proto3,enum=proto.LunaRiteHintStatusType" json:"hint_status,omitempty"`
	SacrificeRewardList []uint32               `protobuf:"varint,4,rep,packed,name=sacrifice_reward_list,json=sacrificeRewardList,proto3" json:"sacrifice_reward_list,omitempty"`
	AreaId              uint32                 `protobuf:"varint,8,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	ChallengeIndex      uint32                 `protobuf:"varint,6,opt,name=challenge_index,json=challengeIndex,proto3" json:"challenge_index,omitempty"`
}

func (x *LunaRiteAreaInfo) Reset() {
	*x = LunaRiteAreaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteAreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteAreaInfo) ProtoMessage() {}

func (x *LunaRiteAreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteAreaInfo.ProtoReflect.Descriptor instead.
func (*LunaRiteAreaInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{289}
}

func (x *LunaRiteAreaInfo) GetSacrificeList() []uint32 {
	if x != nil {
		return x.SacrificeList
	}
	return nil
}

func (x *LunaRiteAreaInfo) GetHintStatus() LunaRiteHintStatusType {
	if x != nil {
		return x.HintStatus
	}
	return LunaRiteHintStatusType_LUNA_RITE_HINT_STATUS_DEFAULT
}

func (x *LunaRiteAreaInfo) GetSacrificeRewardList() []uint32 {
	if x != nil {
		return x.SacrificeRewardList
	}
	return nil
}

func (x *LunaRiteAreaInfo) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *LunaRiteAreaInfo) GetChallengeIndex() uint32 {
	if x != nil {
		return x.ChallengeIndex
	}
	return 0
}

type LunaRiteDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HintPoint    []*LunaRiteHintPoint `protobuf:"bytes,3,rep,name=hint_point,json=hintPoint,proto3" json:"hint_point,omitempty"`
	AreaInfoList []*LunaRiteAreaInfo  `protobuf:"bytes,13,rep,name=area_info_list,json=areaInfoList,proto3" json:"area_info_list,omitempty"`
}

func (x *LunaRiteDetailInfo) Reset() {
	*x = LunaRiteDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteDetailInfo) ProtoMessage() {}

func (x *LunaRiteDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteDetailInfo.ProtoReflect.Descriptor instead.
func (*LunaRiteDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{290}
}

func (x *LunaRiteDetailInfo) GetHintPoint() []*LunaRiteHintPoint {
	if x != nil {
		return x.HintPoint
	}
	return nil
}

func (x *LunaRiteDetailInfo) GetAreaInfoList() []*LunaRiteAreaInfo {
	if x != nil {
		return x.AreaInfoList
	}
	return nil
}

type LunaRiteSacrificeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId uint32 `protobuf:"varint,15,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	Index  uint32 `protobuf:"varint,14,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *LunaRiteSacrificeReq) Reset() {
	*x = LunaRiteSacrificeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteSacrificeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteSacrificeReq) ProtoMessage() {}

func (x *LunaRiteSacrificeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteSacrificeReq.ProtoReflect.Descriptor instead.
func (*LunaRiteSacrificeReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{291}
}

func (x *LunaRiteSacrificeReq) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *LunaRiteSacrificeReq) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type LunaRiteSacrificeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId        uint32   `protobuf:"varint,13,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	SacrificeList []uint32 `protobuf:"varint,14,rep,packed,name=sacrifice_list,json=sacrificeList,proto3" json:"sacrifice_list,omitempty"`
	Index         uint32   `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
	Retcode       int32    `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *LunaRiteSacrificeRsp) Reset() {
	*x = LunaRiteSacrificeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteSacrificeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteSacrificeRsp) ProtoMessage() {}

func (x *LunaRiteSacrificeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteSacrificeRsp.ProtoReflect.Descriptor instead.
func (*LunaRiteSacrificeRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{292}
}

func (x *LunaRiteSacrificeRsp) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *LunaRiteSacrificeRsp) GetSacrificeList() []uint32 {
	if x != nil {
		return x.SacrificeList
	}
	return nil
}

func (x *LunaRiteSacrificeRsp) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LunaRiteSacrificeRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type LunaRiteTakeSacrificeRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId uint32 `protobuf:"varint,11,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	Index  uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *LunaRiteTakeSacrificeRewardReq) Reset() {
	*x = LunaRiteTakeSacrificeRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteTakeSacrificeRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteTakeSacrificeRewardReq) ProtoMessage() {}

func (x *LunaRiteTakeSacrificeRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteTakeSacrificeRewardReq.ProtoReflect.Descriptor instead.
func (*LunaRiteTakeSacrificeRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{293}
}

func (x *LunaRiteTakeSacrificeRewardReq) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *LunaRiteTakeSacrificeRewardReq) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type LunaRiteTakeSacrificeRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                uint32   `protobuf:"varint,11,opt,name=index,proto3" json:"index,omitempty"`
	SacrificeRewardList  []uint32 `protobuf:"varint,2,rep,packed,name=sacrifice_reward_list,json=sacrificeRewardList,proto3" json:"sacrifice_reward_list,omitempty"`
	SacrificeRewardIndex uint32   `protobuf:"varint,14,opt,name=sacrifice_reward_index,json=sacrificeRewardIndex,proto3" json:"sacrifice_reward_index,omitempty"`
	AreaId               uint32   `protobuf:"varint,6,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	Retcode              int32    `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *LunaRiteTakeSacrificeRewardRsp) Reset() {
	*x = LunaRiteTakeSacrificeRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteTakeSacrificeRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteTakeSacrificeRewardRsp) ProtoMessage() {}

func (x *LunaRiteTakeSacrificeRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteTakeSacrificeRewardRsp.ProtoReflect.Descriptor instead.
func (*LunaRiteTakeSacrificeRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{294}
}

func (x *LunaRiteTakeSacrificeRewardRsp) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LunaRiteTakeSacrificeRewardRsp) GetSacrificeRewardList() []uint32 {
	if x != nil {
		return x.SacrificeRewardList
	}
	return nil
}

func (x *LunaRiteTakeSacrificeRewardRsp) GetSacrificeRewardIndex() uint32 {
	if x != nil {
		return x.SacrificeRewardIndex
	}
	return 0
}

func (x *LunaRiteTakeSacrificeRewardRsp) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *LunaRiteTakeSacrificeRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type LunaRiteHintPointReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId uint32 `protobuf:"varint,13,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
}

func (x *LunaRiteHintPointReq) Reset() {
	*x = LunaRiteHintPointReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteHintPointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteHintPointReq) ProtoMessage() {}

func (x *LunaRiteHintPointReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteHintPointReq.ProtoReflect.Descriptor instead.
func (*LunaRiteHintPointReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{295}
}

func (x *LunaRiteHintPointReq) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

type LunaRiteHintPointRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HintStatus LunaRiteHintStatusType `protobuf:"varint,4,opt,name=hint_status,json=hintStatus,proto3,enum=proto.LunaRiteHintStatusType" json:"hint_status,omitempty"`
	AreaId     uint32                 `protobuf:"varint,5,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	Retcode    int32                  `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
	HintPoint  []*LunaRiteHintPoint   `protobuf:"bytes,9,rep,name=hint_point,json=hintPoint,proto3" json:"hint_point,omitempty"`
}

func (x *LunaRiteHintPointRsp) Reset() {
	*x = LunaRiteHintPointRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteHintPointRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteHintPointRsp) ProtoMessage() {}

func (x *LunaRiteHintPointRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteHintPointRsp.ProtoReflect.Descriptor instead.
func (*LunaRiteHintPointRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{296}
}

func (x *LunaRiteHintPointRsp) GetHintStatus() LunaRiteHintStatusType {
	if x != nil {
		return x.HintStatus
	}
	return LunaRiteHintStatusType_LUNA_RITE_HINT_STATUS_DEFAULT
}

func (x *LunaRiteHintPointRsp) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *LunaRiteHintPointRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *LunaRiteHintPointRsp) GetHintPoint() []*LunaRiteHintPoint {
	if x != nil {
		return x.HintPoint
	}
	return nil
}

type LunaRiteHintPointRemoveNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HintPointIndex []uint32 `protobuf:"varint,14,rep,packed,name=hint_point_index,json=hintPointIndex,proto3" json:"hint_point_index,omitempty"`
}

func (x *LunaRiteHintPointRemoveNotify) Reset() {
	*x = LunaRiteHintPointRemoveNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteHintPointRemoveNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteHintPointRemoveNotify) ProtoMessage() {}

func (x *LunaRiteHintPointRemoveNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteHintPointRemoveNotify.ProtoReflect.Descriptor instead.
func (*LunaRiteHintPointRemoveNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{297}
}

func (x *LunaRiteHintPointRemoveNotify) GetHintPointIndex() []uint32 {
	if x != nil {
		return x.HintPointIndex
	}
	return nil
}

type LunaRiteGroupBundleRegisterNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupLinkBundleId uint32 `protobuf:"varint,11,opt,name=group_link_bundle_id,json=groupLinkBundleId,proto3" json:"group_link_bundle_id,omitempty"`
}

func (x *LunaRiteGroupBundleRegisterNotify) Reset() {
	*x = LunaRiteGroupBundleRegisterNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteGroupBundleRegisterNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteGroupBundleRegisterNotify) ProtoMessage() {}

func (x *LunaRiteGroupBundleRegisterNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteGroupBundleRegisterNotify.ProtoReflect.Descriptor instead.
func (*LunaRiteGroupBundleRegisterNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{298}
}

func (x *LunaRiteGroupBundleRegisterNotify) GetGroupLinkBundleId() uint32 {
	if x != nil {
		return x.GroupLinkBundleId
	}
	return 0
}

type LunaRiteAreaFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId uint32 `protobuf:"varint,2,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
}

func (x *LunaRiteAreaFinishNotify) Reset() {
	*x = LunaRiteAreaFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LunaRiteAreaFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LunaRiteAreaFinishNotify) ProtoMessage() {}

func (x *LunaRiteAreaFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LunaRiteAreaFinishNotify.ProtoReflect.Descriptor instead.
func (*LunaRiteAreaFinishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{299}
}

func (x *LunaRiteAreaFinishNotify) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

type PlantFlowerActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsContentClosed   bool              `protobuf:"varint,3,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	WishFlowerNumMap  map[uint32]uint32 `protobuf:"bytes,10,rep,name=wish_flower_num_map,json=wishFlowerNumMap,proto3" json:"wish_flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TodaySeedRewardId uint32            `protobuf:"varint,11,opt,name=today_seed_reward_id,json=todaySeedRewardId,proto3" json:"today_seed_reward_id,omitempty"`
	DayIndex          uint32            `protobuf:"varint,1,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	IsTodayHasAwarded bool              `protobuf:"varint,13,opt,name=is_today_has_awarded,json=isTodayHasAwarded,proto3" json:"is_today_has_awarded,omitempty"`
	UsedFlowerNumMap  map[uint32]uint32 `protobuf:"bytes,7,rep,name=used_flower_num_map,json=usedFlowerNumMap,proto3" json:"used_flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlantFlowerActivityDetailInfo) Reset() {
	*x = PlantFlowerActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerActivityDetailInfo) ProtoMessage() {}

func (x *PlantFlowerActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*PlantFlowerActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{300}
}

func (x *PlantFlowerActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *PlantFlowerActivityDetailInfo) GetWishFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.WishFlowerNumMap
	}
	return nil
}

func (x *PlantFlowerActivityDetailInfo) GetTodaySeedRewardId() uint32 {
	if x != nil {
		return x.TodaySeedRewardId
	}
	return 0
}

func (x *PlantFlowerActivityDetailInfo) GetDayIndex() uint32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *PlantFlowerActivityDetailInfo) GetIsTodayHasAwarded() bool {
	if x != nil {
		return x.IsTodayHasAwarded
	}
	return false
}

func (x *PlantFlowerActivityDetailInfo) GetUsedFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.UsedFlowerNumMap
	}
	return nil
}

type PlantFlowerGetSeedInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,6,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlantFlowerGetSeedInfoReq) Reset() {
	*x = PlantFlowerGetSeedInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerGetSeedInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerGetSeedInfoReq) ProtoMessage() {}

func (x *PlantFlowerGetSeedInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerGetSeedInfoReq.ProtoReflect.Descriptor instead.
func (*PlantFlowerGetSeedInfoReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{301}
}

func (x *PlantFlowerGetSeedInfoReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlantFlowerGetSeedInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode      int32  `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ScheduleId   uint32 `protobuf:"varint,12,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	SeedRewardId uint32 `protobuf:"varint,5,opt,name=seed_reward_id,json=seedRewardId,proto3" json:"seed_reward_id,omitempty"`
}

func (x *PlantFlowerGetSeedInfoRsp) Reset() {
	*x = PlantFlowerGetSeedInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerGetSeedInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerGetSeedInfoRsp) ProtoMessage() {}

func (x *PlantFlowerGetSeedInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerGetSeedInfoRsp.ProtoReflect.Descriptor instead.
func (*PlantFlowerGetSeedInfoRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{302}
}

func (x *PlantFlowerGetSeedInfoRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlantFlowerGetSeedInfoRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *PlantFlowerGetSeedInfoRsp) GetSeedRewardId() uint32 {
	if x != nil {
		return x.SeedRewardId
	}
	return 0
}

type PlantFlowerTakeSeedRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,12,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlantFlowerTakeSeedRewardReq) Reset() {
	*x = PlantFlowerTakeSeedRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerTakeSeedRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerTakeSeedRewardReq) ProtoMessage() {}

func (x *PlantFlowerTakeSeedRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerTakeSeedRewardReq.ProtoReflect.Descriptor instead.
func (*PlantFlowerTakeSeedRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{303}
}

func (x *PlantFlowerTakeSeedRewardReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlantFlowerTakeSeedRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode    int32  `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ScheduleId uint32 `protobuf:"varint,13,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlantFlowerTakeSeedRewardRsp) Reset() {
	*x = PlantFlowerTakeSeedRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerTakeSeedRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerTakeSeedRewardRsp) ProtoMessage() {}

func (x *PlantFlowerTakeSeedRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerTakeSeedRewardRsp.ProtoReflect.Descriptor instead.
func (*PlantFlowerTakeSeedRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{304}
}

func (x *PlantFlowerTakeSeedRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlantFlowerTakeSeedRewardRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlantFlowerSetFlowerWishReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowerNumMap map[uint32]uint32 `protobuf:"bytes,12,rep,name=flower_num_map,json=flowerNumMap,proto3" json:"flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ScheduleId   uint32            `protobuf:"varint,5,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlantFlowerSetFlowerWishReq) Reset() {
	*x = PlantFlowerSetFlowerWishReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerSetFlowerWishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerSetFlowerWishReq) ProtoMessage() {}

func (x *PlantFlowerSetFlowerWishReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerSetFlowerWishReq.ProtoReflect.Descriptor instead.
func (*PlantFlowerSetFlowerWishReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{305}
}

func (x *PlantFlowerSetFlowerWishReq) GetFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.FlowerNumMap
	}
	return nil
}

func (x *PlantFlowerSetFlowerWishReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlantFlowerSetFlowerWishRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,7,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode    int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *PlantFlowerSetFlowerWishRsp) Reset() {
	*x = PlantFlowerSetFlowerWishRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerSetFlowerWishRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerSetFlowerWishRsp) ProtoMessage() {}

func (x *PlantFlowerSetFlowerWishRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerSetFlowerWishRsp.ProtoReflect.Descriptor instead.
func (*PlantFlowerSetFlowerWishRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{306}
}

func (x *PlantFlowerSetFlowerWishRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *PlantFlowerSetFlowerWishRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type PlantFlowerGetFriendFlowerWishListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,7,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlantFlowerGetFriendFlowerWishListReq) Reset() {
	*x = PlantFlowerGetFriendFlowerWishListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerGetFriendFlowerWishListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerGetFriendFlowerWishListReq) ProtoMessage() {}

func (x *PlantFlowerGetFriendFlowerWishListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerGetFriendFlowerWishListReq.ProtoReflect.Descriptor instead.
func (*PlantFlowerGetFriendFlowerWishListReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{307}
}

func (x *PlantFlowerGetFriendFlowerWishListReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlantFlowerFriendFlowerWishData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfilePicture *ProfilePicture   `protobuf:"bytes,3,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	Uid            uint32            `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname       string            `protobuf:"bytes,14,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FlowerNumMap   map[uint32]uint32 `protobuf:"bytes,12,rep,name=flower_num_map,json=flowerNumMap,proto3" json:"flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlantFlowerFriendFlowerWishData) Reset() {
	*x = PlantFlowerFriendFlowerWishData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerFriendFlowerWishData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerFriendFlowerWishData) ProtoMessage() {}

func (x *PlantFlowerFriendFlowerWishData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerFriendFlowerWishData.ProtoReflect.Descriptor instead.
func (*PlantFlowerFriendFlowerWishData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{308}
}

func (x *PlantFlowerFriendFlowerWishData) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *PlantFlowerFriendFlowerWishData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlantFlowerFriendFlowerWishData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PlantFlowerFriendFlowerWishData) GetFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.FlowerNumMap
	}
	return nil
}

type PlantFlowerGetFriendFlowerWishListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode              int32                              `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ScheduleId           uint32                             `protobuf:"varint,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	FriendFlowerWishList []*PlantFlowerFriendFlowerWishData `protobuf:"bytes,9,rep,name=friend_flower_wish_list,json=friendFlowerWishList,proto3" json:"friend_flower_wish_list,omitempty"`
}

func (x *PlantFlowerGetFriendFlowerWishListRsp) Reset() {
	*x = PlantFlowerGetFriendFlowerWishListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerGetFriendFlowerWishListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerGetFriendFlowerWishListRsp) ProtoMessage() {}

func (x *PlantFlowerGetFriendFlowerWishListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerGetFriendFlowerWishListRsp.ProtoReflect.Descriptor instead.
func (*PlantFlowerGetFriendFlowerWishListRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{309}
}

func (x *PlantFlowerGetFriendFlowerWishListRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlantFlowerGetFriendFlowerWishListRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *PlantFlowerGetFriendFlowerWishListRsp) GetFriendFlowerWishList() []*PlantFlowerFriendFlowerWishData {
	if x != nil {
		return x.FriendFlowerWishList
	}
	return nil
}

type PlantFlowerGiveFriendFlowerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId   uint32            `protobuf:"varint,11,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Uid          uint32            `protobuf:"varint,13,opt,name=uid,proto3" json:"uid,omitempty"`
	FlowerNumMap map[uint32]uint32 `protobuf:"bytes,12,rep,name=flower_num_map,json=flowerNumMap,proto3" json:"flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlantFlowerGiveFriendFlowerReq) Reset() {
	*x = PlantFlowerGiveFriendFlowerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerGiveFriendFlowerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerGiveFriendFlowerReq) ProtoMessage() {}

func (x *PlantFlowerGiveFriendFlowerReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerGiveFriendFlowerReq.ProtoReflect.Descriptor instead.
func (*PlantFlowerGiveFriendFlowerReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{310}
}

func (x *PlantFlowerGiveFriendFlowerReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *PlantFlowerGiveFriendFlowerReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlantFlowerGiveFriendFlowerReq) GetFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.FlowerNumMap
	}
	return nil
}

type PlantFlowerGiveFriendFlowerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitFlowerList []uint32 `protobuf:"varint,5,rep,packed,name=limit_flower_list,json=limitFlowerList,proto3" json:"limit_flower_list,omitempty"`
	Retcode         int32    `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ScheduleId      uint32   `protobuf:"varint,14,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlantFlowerGiveFriendFlowerRsp) Reset() {
	*x = PlantFlowerGiveFriendFlowerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerGiveFriendFlowerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerGiveFriendFlowerRsp) ProtoMessage() {}

func (x *PlantFlowerGiveFriendFlowerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerGiveFriendFlowerRsp.ProtoReflect.Descriptor instead.
func (*PlantFlowerGiveFriendFlowerRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{311}
}

func (x *PlantFlowerGiveFriendFlowerRsp) GetLimitFlowerList() []uint32 {
	if x != nil {
		return x.LimitFlowerList
	}
	return nil
}

func (x *PlantFlowerGiveFriendFlowerRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlantFlowerGiveFriendFlowerRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlantFlowerGetRecvFlowerListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlantFlowerGetRecvFlowerListReq) Reset() {
	*x = PlantFlowerGetRecvFlowerListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerGetRecvFlowerListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerGetRecvFlowerListReq) ProtoMessage() {}

func (x *PlantFlowerGetRecvFlowerListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerGetRecvFlowerListReq.ProtoReflect.Descriptor instead.
func (*PlantFlowerGetRecvFlowerListReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{312}
}

func (x *PlantFlowerGetRecvFlowerListReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlantFlowerRecvFlowerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfilePicture *ProfilePicture   `protobuf:"bytes,13,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	Nickname       string            `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Uid            uint32            `protobuf:"varint,9,opt,name=uid,proto3" json:"uid,omitempty"`
	FlowerNumMap   map[uint32]uint32 `protobuf:"bytes,14,rep,name=flower_num_map,json=flowerNumMap,proto3" json:"flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlantFlowerRecvFlowerData) Reset() {
	*x = PlantFlowerRecvFlowerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerRecvFlowerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerRecvFlowerData) ProtoMessage() {}

func (x *PlantFlowerRecvFlowerData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerRecvFlowerData.ProtoReflect.Descriptor instead.
func (*PlantFlowerRecvFlowerData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{313}
}

func (x *PlantFlowerRecvFlowerData) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *PlantFlowerRecvFlowerData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PlantFlowerRecvFlowerData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlantFlowerRecvFlowerData) GetFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.FlowerNumMap
	}
	return nil
}

type PlantFlowerGetRecvFlowerListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId     uint32                       `protobuf:"varint,6,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode        int32                        `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RecvFlowerList []*PlantFlowerRecvFlowerData `protobuf:"bytes,4,rep,name=recv_flower_list,json=recvFlowerList,proto3" json:"recv_flower_list,omitempty"`
}

func (x *PlantFlowerGetRecvFlowerListRsp) Reset() {
	*x = PlantFlowerGetRecvFlowerListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerGetRecvFlowerListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerGetRecvFlowerListRsp) ProtoMessage() {}

func (x *PlantFlowerGetRecvFlowerListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerGetRecvFlowerListRsp.ProtoReflect.Descriptor instead.
func (*PlantFlowerGetRecvFlowerListRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{314}
}

func (x *PlantFlowerGetRecvFlowerListRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *PlantFlowerGetRecvFlowerListRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlantFlowerGetRecvFlowerListRsp) GetRecvFlowerList() []*PlantFlowerRecvFlowerData {
	if x != nil {
		return x.RecvFlowerList
	}
	return nil
}

type PlantFlowerHaveRecvFlowerNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,10,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlantFlowerHaveRecvFlowerNotify) Reset() {
	*x = PlantFlowerHaveRecvFlowerNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerHaveRecvFlowerNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerHaveRecvFlowerNotify) ProtoMessage() {}

func (x *PlantFlowerHaveRecvFlowerNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerHaveRecvFlowerNotify.ProtoReflect.Descriptor instead.
func (*PlantFlowerHaveRecvFlowerNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{315}
}

func (x *PlantFlowerHaveRecvFlowerNotify) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlantFlowerAcceptGiveFlowerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Uid        uint32 `protobuf:"varint,12,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *PlantFlowerAcceptGiveFlowerReq) Reset() {
	*x = PlantFlowerAcceptGiveFlowerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerAcceptGiveFlowerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerAcceptGiveFlowerReq) ProtoMessage() {}

func (x *PlantFlowerAcceptGiveFlowerReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerAcceptGiveFlowerReq.ProtoReflect.Descriptor instead.
func (*PlantFlowerAcceptGiveFlowerReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{316}
}

func (x *PlantFlowerAcceptGiveFlowerReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *PlantFlowerAcceptGiveFlowerReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type PlantFlowerAcceptFlowerResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnacceptFlowerNumMap map[uint32]uint32 `protobuf:"bytes,4,rep,name=unaccept_flower_num_map,json=unacceptFlowerNumMap,proto3" json:"unaccept_flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Uid                  uint32            `protobuf:"varint,7,opt,name=uid,proto3" json:"uid,omitempty"`
	AcceptFlowerNumMap   map[uint32]uint32 `protobuf:"bytes,10,rep,name=accept_flower_num_map,json=acceptFlowerNumMap,proto3" json:"accept_flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlantFlowerAcceptFlowerResultInfo) Reset() {
	*x = PlantFlowerAcceptFlowerResultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerAcceptFlowerResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerAcceptFlowerResultInfo) ProtoMessage() {}

func (x *PlantFlowerAcceptFlowerResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerAcceptFlowerResultInfo.ProtoReflect.Descriptor instead.
func (*PlantFlowerAcceptFlowerResultInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{317}
}

func (x *PlantFlowerAcceptFlowerResultInfo) GetUnacceptFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.UnacceptFlowerNumMap
	}
	return nil
}

func (x *PlantFlowerAcceptFlowerResultInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlantFlowerAcceptFlowerResultInfo) GetAcceptFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.AcceptFlowerNumMap
	}
	return nil
}

type PlantFlowerAcceptGiveFlowerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId             uint32                             `protobuf:"varint,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	AcceptFlowerResultInfo *PlantFlowerAcceptFlowerResultInfo `protobuf:"bytes,15,opt,name=accept_flower_result_info,json=acceptFlowerResultInfo,proto3" json:"accept_flower_result_info,omitempty"`
	Retcode                int32                              `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *PlantFlowerAcceptGiveFlowerRsp) Reset() {
	*x = PlantFlowerAcceptGiveFlowerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerAcceptGiveFlowerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerAcceptGiveFlowerRsp) ProtoMessage() {}

func (x *PlantFlowerAcceptGiveFlowerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerAcceptGiveFlowerRsp.ProtoReflect.Descriptor instead.
func (*PlantFlowerAcceptGiveFlowerRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{318}
}

func (x *PlantFlowerAcceptGiveFlowerRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *PlantFlowerAcceptGiveFlowerRsp) GetAcceptFlowerResultInfo() *PlantFlowerAcceptFlowerResultInfo {
	if x != nil {
		return x.AcceptFlowerResultInfo
	}
	return nil
}

func (x *PlantFlowerAcceptGiveFlowerRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type PlantFlowerAcceptAllGiveFlowerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,11,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlantFlowerAcceptAllGiveFlowerReq) Reset() {
	*x = PlantFlowerAcceptAllGiveFlowerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerAcceptAllGiveFlowerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerAcceptAllGiveFlowerReq) ProtoMessage() {}

func (x *PlantFlowerAcceptAllGiveFlowerReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerAcceptAllGiveFlowerReq.ProtoReflect.Descriptor instead.
func (*PlantFlowerAcceptAllGiveFlowerReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{319}
}

func (x *PlantFlowerAcceptAllGiveFlowerReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlantFlowerAcceptAllGiveFlowerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId                 uint32                               `protobuf:"varint,10,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode                    int32                                `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	AcceptFlowerResultInfoList []*PlantFlowerAcceptFlowerResultInfo `protobuf:"bytes,13,rep,name=accept_flower_result_info_list,json=acceptFlowerResultInfoList,proto3" json:"accept_flower_result_info_list,omitempty"`
}

func (x *PlantFlowerAcceptAllGiveFlowerRsp) Reset() {
	*x = PlantFlowerAcceptAllGiveFlowerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerAcceptAllGiveFlowerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerAcceptAllGiveFlowerRsp) ProtoMessage() {}

func (x *PlantFlowerAcceptAllGiveFlowerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerAcceptAllGiveFlowerRsp.ProtoReflect.Descriptor instead.
func (*PlantFlowerAcceptAllGiveFlowerRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{320}
}

func (x *PlantFlowerAcceptAllGiveFlowerRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *PlantFlowerAcceptAllGiveFlowerRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlantFlowerAcceptAllGiveFlowerRsp) GetAcceptFlowerResultInfoList() []*PlantFlowerAcceptFlowerResultInfo {
	if x != nil {
		return x.AcceptFlowerResultInfoList
	}
	return nil
}

type PlantFlowerGetCanGiveFriendFlowerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,15,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlantFlowerGetCanGiveFriendFlowerReq) Reset() {
	*x = PlantFlowerGetCanGiveFriendFlowerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerGetCanGiveFriendFlowerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerGetCanGiveFriendFlowerReq) ProtoMessage() {}

func (x *PlantFlowerGetCanGiveFriendFlowerReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerGetCanGiveFriendFlowerReq.ProtoReflect.Descriptor instead.
func (*PlantFlowerGetCanGiveFriendFlowerReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{321}
}

func (x *PlantFlowerGetCanGiveFriendFlowerReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlantFlowerGetCanGiveFriendFlowerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowerNumMap map[uint32]uint32 `protobuf:"bytes,6,rep,name=flower_num_map,json=flowerNumMap,proto3" json:"flower_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ScheduleId   uint32            `protobuf:"varint,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode      int32             `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *PlantFlowerGetCanGiveFriendFlowerRsp) Reset() {
	*x = PlantFlowerGetCanGiveFriendFlowerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerGetCanGiveFriendFlowerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerGetCanGiveFriendFlowerRsp) ProtoMessage() {}

func (x *PlantFlowerGetCanGiveFriendFlowerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerGetCanGiveFriendFlowerRsp.ProtoReflect.Descriptor instead.
func (*PlantFlowerGetCanGiveFriendFlowerRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{322}
}

func (x *PlantFlowerGetCanGiveFriendFlowerRsp) GetFlowerNumMap() map[uint32]uint32 {
	if x != nil {
		return x.FlowerNumMap
	}
	return nil
}

func (x *PlantFlowerGetCanGiveFriendFlowerRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *PlantFlowerGetCanGiveFriendFlowerRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type PlantFlowerEditFlowerCombinationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowerCombinationInfo *CustomGadgetTreeInfo `protobuf:"bytes,10,opt,name=flower_combination_info,json=flowerCombinationInfo,proto3" json:"flower_combination_info,omitempty"`
	EntityId              uint32                `protobuf:"varint,14,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	ScheduleId            uint32                `protobuf:"varint,9,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *PlantFlowerEditFlowerCombinationReq) Reset() {
	*x = PlantFlowerEditFlowerCombinationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerEditFlowerCombinationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerEditFlowerCombinationReq) ProtoMessage() {}

func (x *PlantFlowerEditFlowerCombinationReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerEditFlowerCombinationReq.ProtoReflect.Descriptor instead.
func (*PlantFlowerEditFlowerCombinationReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{323}
}

func (x *PlantFlowerEditFlowerCombinationReq) GetFlowerCombinationInfo() *CustomGadgetTreeInfo {
	if x != nil {
		return x.FlowerCombinationInfo
	}
	return nil
}

func (x *PlantFlowerEditFlowerCombinationReq) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *PlantFlowerEditFlowerCombinationReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type PlantFlowerEditFlowerCombinationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,13,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode    int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *PlantFlowerEditFlowerCombinationRsp) Reset() {
	*x = PlantFlowerEditFlowerCombinationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantFlowerEditFlowerCombinationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantFlowerEditFlowerCombinationRsp) ProtoMessage() {}

func (x *PlantFlowerEditFlowerCombinationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantFlowerEditFlowerCombinationRsp.ProtoReflect.Descriptor instead.
func (*PlantFlowerEditFlowerCombinationRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{324}
}

func (x *PlantFlowerEditFlowerCombinationRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *PlantFlowerEditFlowerCombinationRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type MusicGameRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsUnlock bool   `protobuf:"varint,9,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
	MaxScore uint32 `protobuf:"varint,11,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	MaxCombo uint32 `protobuf:"varint,6,opt,name=max_combo,json=maxCombo,proto3" json:"max_combo,omitempty"`
}

func (x *MusicGameRecord) Reset() {
	*x = MusicGameRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicGameRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicGameRecord) ProtoMessage() {}

func (x *MusicGameRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicGameRecord.ProtoReflect.Descriptor instead.
func (*MusicGameRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{325}
}

func (x *MusicGameRecord) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

func (x *MusicGameRecord) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *MusicGameRecord) GetMaxCombo() uint32 {
	if x != nil {
		return x.MaxCombo
	}
	return 0
}

type MusicGameActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UgcRecordList      []*UgcMusicBriefInfo        `protobuf:"bytes,4,rep,name=ugc_record_list,json=ugcRecordList,proto3" json:"ugc_record_list,omitempty"`
	UgcSearchList      []*UgcMusicBriefInfo        `protobuf:"bytes,7,rep,name=ugc_search_list,json=ugcSearchList,proto3" json:"ugc_search_list,omitempty"`
	MusicGameRecordMap map[uint32]*MusicGameRecord `protobuf:"bytes,8,rep,name=music_game_record_map,json=musicGameRecordMap,proto3" json:"music_game_record_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MusicGameActivityDetailInfo) Reset() {
	*x = MusicGameActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicGameActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicGameActivityDetailInfo) ProtoMessage() {}

func (x *MusicGameActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicGameActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*MusicGameActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{326}
}

func (x *MusicGameActivityDetailInfo) GetUgcRecordList() []*UgcMusicBriefInfo {
	if x != nil {
		return x.UgcRecordList
	}
	return nil
}

func (x *MusicGameActivityDetailInfo) GetUgcSearchList() []*UgcMusicBriefInfo {
	if x != nil {
		return x.UgcSearchList
	}
	return nil
}

func (x *MusicGameActivityDetailInfo) GetMusicGameRecordMap() map[uint32]*MusicGameRecord {
	if x != nil {
		return x.MusicGameRecordMap
	}
	return nil
}

type MusicGameSettleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ButtonList    []uint32 `protobuf:"varint,384,rep,packed,name=button_list,json=buttonList,proto3" json:"button_list,omitempty"`
	Delay         uint32   `protobuf:"varint,795,opt,name=delay,proto3" json:"delay,omitempty"`
	NoteList      []uint32 `protobuf:"varint,4,rep,packed,name=note_list,json=noteList,proto3" json:"note_list,omitempty"`
	ScoreRating   uint32   `protobuf:"varint,15,opt,name=score_rating,json=scoreRating,proto3" json:"score_rating,omitempty"`
	Score         uint32   `protobuf:"varint,9,opt,name=score,proto3" json:"score,omitempty"`
	UgcGuid       uint64   `protobuf:"varint,6,opt,name=ugc_guid,json=ugcGuid,proto3" json:"ugc_guid,omitempty"`
	RestartTimes  uint32   `protobuf:"varint,13,opt,name=restart_times,json=restartTimes,proto3" json:"restart_times,omitempty"`
	IsCustomDelay bool     `protobuf:"varint,422,opt,name=is_custom_delay,json=isCustomDelay,proto3" json:"is_custom_delay,omitempty"`
	MaxCombo      uint32   `protobuf:"varint,5,opt,name=max_combo,json=maxCombo,proto3" json:"max_combo,omitempty"`
	IsFullCombo   uint32   `protobuf:"varint,1058,opt,name=is_full_combo,json=isFullCombo,proto3" json:"is_full_combo,omitempty"`
	Speed         float32  `protobuf:"fixed32,409,opt,name=speed,proto3" json:"speed,omitempty"`
	IsSaveScore   bool     `protobuf:"varint,3,opt,name=is_save_score,json=isSaveScore,proto3" json:"is_save_score,omitempty"`
	Combo         uint32   `protobuf:"varint,1,opt,name=combo,proto3" json:"combo,omitempty"`
	MusicBasicId  uint32   `protobuf:"varint,7,opt,name=music_basic_id,json=musicBasicId,proto3" json:"music_basic_id,omitempty"`
	StarRating    uint32   `protobuf:"varint,2,opt,name=star_rating,json=starRating,proto3" json:"star_rating,omitempty"`
	Volume        uint32   `protobuf:"varint,1953,opt,name=volume,proto3" json:"volume,omitempty"`
	CorrectHit    uint32   `protobuf:"varint,14,opt,name=correct_hit,json=correctHit,proto3" json:"correct_hit,omitempty"`
	IsCustomSpeed bool     `protobuf:"varint,1285,opt,name=is_custom_speed,json=isCustomSpeed,proto3" json:"is_custom_speed,omitempty"`
}

func (x *MusicGameSettleReq) Reset() {
	*x = MusicGameSettleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicGameSettleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicGameSettleReq) ProtoMessage() {}

func (x *MusicGameSettleReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicGameSettleReq.ProtoReflect.Descriptor instead.
func (*MusicGameSettleReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{327}
}

func (x *MusicGameSettleReq) GetButtonList() []uint32 {
	if x != nil {
		return x.ButtonList
	}
	return nil
}

func (x *MusicGameSettleReq) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *MusicGameSettleReq) GetNoteList() []uint32 {
	if x != nil {
		return x.NoteList
	}
	return nil
}

func (x *MusicGameSettleReq) GetScoreRating() uint32 {
	if x != nil {
		return x.ScoreRating
	}
	return 0
}

func (x *MusicGameSettleReq) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MusicGameSettleReq) GetUgcGuid() uint64 {
	if x != nil {
		return x.UgcGuid
	}
	return 0
}

func (x *MusicGameSettleReq) GetRestartTimes() uint32 {
	if x != nil {
		return x.RestartTimes
	}
	return 0
}

func (x *MusicGameSettleReq) GetIsCustomDelay() bool {
	if x != nil {
		return x.IsCustomDelay
	}
	return false
}

func (x *MusicGameSettleReq) GetMaxCombo() uint32 {
	if x != nil {
		return x.MaxCombo
	}
	return 0
}

func (x *MusicGameSettleReq) GetIsFullCombo() uint32 {
	if x != nil {
		return x.IsFullCombo
	}
	return 0
}

func (x *MusicGameSettleReq) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *MusicGameSettleReq) GetIsSaveScore() bool {
	if x != nil {
		return x.IsSaveScore
	}
	return false
}

func (x *MusicGameSettleReq) GetCombo() uint32 {
	if x != nil {
		return x.Combo
	}
	return 0
}

func (x *MusicGameSettleReq) GetMusicBasicId() uint32 {
	if x != nil {
		return x.MusicBasicId
	}
	return 0
}

func (x *MusicGameSettleReq) GetStarRating() uint32 {
	if x != nil {
		return x.StarRating
	}
	return 0
}

func (x *MusicGameSettleReq) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MusicGameSettleReq) GetCorrectHit() uint32 {
	if x != nil {
		return x.CorrectHit
	}
	return 0
}

func (x *MusicGameSettleReq) GetIsCustomSpeed() bool {
	if x != nil {
		return x.IsCustomSpeed
	}
	return false
}

type MusicGameSettleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode           int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	MusicBasicId      uint32 `protobuf:"varint,5,opt,name=music_basic_id,json=musicBasicId,proto3" json:"music_basic_id,omitempty"`
	IsNewRecord       bool   `protobuf:"varint,6,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	IsUnlockNextLevel bool   `protobuf:"varint,2,opt,name=is_unlock_next_level,json=isUnlockNextLevel,proto3" json:"is_unlock_next_level,omitempty"`
	UgcGuid           uint64 `protobuf:"varint,10,opt,name=ugc_guid,json=ugcGuid,proto3" json:"ugc_guid,omitempty"`
}

func (x *MusicGameSettleRsp) Reset() {
	*x = MusicGameSettleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicGameSettleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicGameSettleRsp) ProtoMessage() {}

func (x *MusicGameSettleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicGameSettleRsp.ProtoReflect.Descriptor instead.
func (*MusicGameSettleRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{328}
}

func (x *MusicGameSettleRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *MusicGameSettleRsp) GetMusicBasicId() uint32 {
	if x != nil {
		return x.MusicBasicId
	}
	return 0
}

func (x *MusicGameSettleRsp) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *MusicGameSettleRsp) GetIsUnlockNextLevel() bool {
	if x != nil {
		return x.IsUnlockNextLevel
	}
	return false
}

func (x *MusicGameSettleRsp) GetUgcGuid() uint64 {
	if x != nil {
		return x.UgcGuid
	}
	return 0
}

type MusicGameStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicBasicId uint32 `protobuf:"varint,2,opt,name=music_basic_id,json=musicBasicId,proto3" json:"music_basic_id,omitempty"`
	IsSaveScore  bool   `protobuf:"varint,11,opt,name=is_save_score,json=isSaveScore,proto3" json:"is_save_score,omitempty"`
	UgcGuid      uint64 `protobuf:"varint,3,opt,name=ugc_guid,json=ugcGuid,proto3" json:"ugc_guid,omitempty"`
}

func (x *MusicGameStartReq) Reset() {
	*x = MusicGameStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicGameStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicGameStartReq) ProtoMessage() {}

func (x *MusicGameStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicGameStartReq.ProtoReflect.Descriptor instead.
func (*MusicGameStartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{329}
}

func (x *MusicGameStartReq) GetMusicBasicId() uint32 {
	if x != nil {
		return x.MusicBasicId
	}
	return 0
}

func (x *MusicGameStartReq) GetIsSaveScore() bool {
	if x != nil {
		return x.IsSaveScore
	}
	return false
}

func (x *MusicGameStartReq) GetUgcGuid() uint64 {
	if x != nil {
		return x.UgcGuid
	}
	return 0
}

type MusicGameStartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicBasicId uint32 `protobuf:"varint,4,opt,name=music_basic_id,json=musicBasicId,proto3" json:"music_basic_id,omitempty"`
	Retcode      int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	UgcGuid      uint64 `protobuf:"varint,15,opt,name=ugc_guid,json=ugcGuid,proto3" json:"ugc_guid,omitempty"`
}

func (x *MusicGameStartRsp) Reset() {
	*x = MusicGameStartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicGameStartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicGameStartRsp) ProtoMessage() {}

func (x *MusicGameStartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicGameStartRsp.ProtoReflect.Descriptor instead.
func (*MusicGameStartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{330}
}

func (x *MusicGameStartRsp) GetMusicBasicId() uint32 {
	if x != nil {
		return x.MusicBasicId
	}
	return 0
}

func (x *MusicGameStartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *MusicGameStartRsp) GetUgcGuid() uint64 {
	if x != nil {
		return x.UgcGuid
	}
	return 0
}

type RogueAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOnstage bool   `protobuf:"varint,5,opt,name=is_onstage,json=isOnstage,proto3" json:"is_onstage,omitempty"`
	IsAlive   bool   `protobuf:"varint,3,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`
	AvatarId  uint32 `protobuf:"varint,14,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *RogueAvatarInfo) Reset() {
	*x = RogueAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueAvatarInfo) ProtoMessage() {}

func (x *RogueAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueAvatarInfo.ProtoReflect.Descriptor instead.
func (*RogueAvatarInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{331}
}

func (x *RogueAvatarInfo) GetIsOnstage() bool {
	if x != nil {
		return x.IsOnstage
	}
	return false
}

func (x *RogueAvatarInfo) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

func (x *RogueAvatarInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type RogueShowAvatarTeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarList []*RogueAvatarInfo `protobuf:"bytes,12,rep,name=avatar_list,json=avatarList,proto3" json:"avatar_list,omitempty"`
}

func (x *RogueShowAvatarTeamInfo) Reset() {
	*x = RogueShowAvatarTeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueShowAvatarTeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueShowAvatarTeamInfo) ProtoMessage() {}

func (x *RogueShowAvatarTeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueShowAvatarTeamInfo.ProtoReflect.Descriptor instead.
func (*RogueShowAvatarTeamInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{332}
}

func (x *RogueShowAvatarTeamInfo) GetAvatarList() []*RogueAvatarInfo {
	if x != nil {
		return x.AvatarList
	}
	return nil
}

type RoguelikeShikigamiRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	Level uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *RoguelikeShikigamiRecord) Reset() {
	*x = RoguelikeShikigamiRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeShikigamiRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeShikigamiRecord) ProtoMessage() {}

func (x *RoguelikeShikigamiRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeShikigamiRecord.ProtoReflect.Descriptor instead.
func (*RoguelikeShikigamiRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{333}
}

func (x *RoguelikeShikigamiRecord) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoguelikeShikigamiRecord) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type RogueEffectRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId       uint32   `protobuf:"varint,6,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	ExtraParamList []uint32 `protobuf:"varint,9,rep,packed,name=extra_param_list,json=extraParamList,proto3" json:"extra_param_list,omitempty"`
	Count          uint32   `protobuf:"varint,10,opt,name=count,proto3" json:"count,omitempty"`
	IsNew          bool     `protobuf:"varint,5,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
}

func (x *RogueEffectRecord) Reset() {
	*x = RogueEffectRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueEffectRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueEffectRecord) ProtoMessage() {}

func (x *RogueEffectRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueEffectRecord.ProtoReflect.Descriptor instead.
func (*RogueEffectRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{334}
}

func (x *RogueEffectRecord) GetSourceId() uint32 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *RogueEffectRecord) GetExtraParamList() []uint32 {
	if x != nil {
		return x.ExtraParamList
	}
	return nil
}

func (x *RogueEffectRecord) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RogueEffectRecord) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

type RoguelikeRuneRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftCount uint32 `protobuf:"varint,14,opt,name=left_count,json=leftCount,proto3" json:"left_count,omitempty"`
	RuneId    uint32 `protobuf:"varint,6,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
	MaxCount  uint32 `protobuf:"varint,4,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
}

func (x *RoguelikeRuneRecord) Reset() {
	*x = RoguelikeRuneRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeRuneRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeRuneRecord) ProtoMessage() {}

func (x *RoguelikeRuneRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeRuneRecord.ProtoReflect.Descriptor instead.
func (*RoguelikeRuneRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{335}
}

func (x *RoguelikeRuneRecord) GetLeftCount() uint32 {
	if x != nil {
		return x.LeftCount
	}
	return 0
}

func (x *RoguelikeRuneRecord) GetRuneId() uint32 {
	if x != nil {
		return x.RuneId
	}
	return 0
}

func (x *RoguelikeRuneRecord) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

type RogueStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarTeam         *RogueShowAvatarTeamInfo `protobuf:"bytes,2,opt,name=avatar_team,json=avatarTeam,proto3" json:"avatar_team,omitempty"`
	IsPassed           bool                     `protobuf:"varint,5,opt,name=is_passed,json=isPassed,proto3" json:"is_passed,omitempty"`
	StageId            uint32                   `protobuf:"varint,7,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	ReviseMonsterLevel uint32                   `protobuf:"varint,205,opt,name=revise_monster_level,json=reviseMonsterLevel,proto3" json:"revise_monster_level,omitempty"`
	RuneRecordList     []*RoguelikeRuneRecord   `protobuf:"bytes,6,rep,name=rune_record_list,json=runeRecordList,proto3" json:"rune_record_list,omitempty"`
	IsOpen             bool                     `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	CurLevel           uint32                   `protobuf:"varint,4,opt,name=cur_level,json=curLevel,proto3" json:"cur_level,omitempty"`
	CachedCoinCNum     uint32                   `protobuf:"varint,1409,opt,name=cached_coin_c_num,json=cachedCoinCNum,proto3" json:"cached_coin_c_num,omitempty"`
	IsTakenReward      bool                     `protobuf:"varint,11,opt,name=is_taken_reward,json=isTakenReward,proto3" json:"is_taken_reward,omitempty"`
	IsInCombat         bool                     `protobuf:"varint,12,opt,name=is_in_combat,json=isInCombat,proto3" json:"is_in_combat,omitempty"`
	CachedCoinBNum     uint32                   `protobuf:"varint,14,opt,name=cached_coin_b_num,json=cachedCoinBNum,proto3" json:"cached_coin_b_num,omitempty"`
	ExploreCellNum     uint32                   `protobuf:"varint,15,opt,name=explore_cell_num,json=exploreCellNum,proto3" json:"explore_cell_num,omitempty"`
	CoinCNum           uint32                   `protobuf:"varint,8,opt,name=coin_c_num,json=coinCNum,proto3" json:"coin_c_num,omitempty"`
	IsExplored         bool                     `protobuf:"varint,9,opt,name=is_explored,json=isExplored,proto3" json:"is_explored,omitempty"`
	MaxPassedLevel     uint32                   `protobuf:"varint,3,opt,name=max_passed_level,json=maxPassedLevel,proto3" json:"max_passed_level,omitempty"`
}

func (x *RogueStageInfo) Reset() {
	*x = RogueStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueStageInfo) ProtoMessage() {}

func (x *RogueStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueStageInfo.ProtoReflect.Descriptor instead.
func (*RogueStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{336}
}

func (x *RogueStageInfo) GetAvatarTeam() *RogueShowAvatarTeamInfo {
	if x != nil {
		return x.AvatarTeam
	}
	return nil
}

func (x *RogueStageInfo) GetIsPassed() bool {
	if x != nil {
		return x.IsPassed
	}
	return false
}

func (x *RogueStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RogueStageInfo) GetReviseMonsterLevel() uint32 {
	if x != nil {
		return x.ReviseMonsterLevel
	}
	return 0
}

func (x *RogueStageInfo) GetRuneRecordList() []*RoguelikeRuneRecord {
	if x != nil {
		return x.RuneRecordList
	}
	return nil
}

func (x *RogueStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *RogueStageInfo) GetCurLevel() uint32 {
	if x != nil {
		return x.CurLevel
	}
	return 0
}

func (x *RogueStageInfo) GetCachedCoinCNum() uint32 {
	if x != nil {
		return x.CachedCoinCNum
	}
	return 0
}

func (x *RogueStageInfo) GetIsTakenReward() bool {
	if x != nil {
		return x.IsTakenReward
	}
	return false
}

func (x *RogueStageInfo) GetIsInCombat() bool {
	if x != nil {
		return x.IsInCombat
	}
	return false
}

func (x *RogueStageInfo) GetCachedCoinBNum() uint32 {
	if x != nil {
		return x.CachedCoinBNum
	}
	return 0
}

func (x *RogueStageInfo) GetExploreCellNum() uint32 {
	if x != nil {
		return x.ExploreCellNum
	}
	return 0
}

func (x *RogueStageInfo) GetCoinCNum() uint32 {
	if x != nil {
		return x.CoinCNum
	}
	return 0
}

func (x *RogueStageInfo) GetIsExplored() bool {
	if x != nil {
		return x.IsExplored
	}
	return false
}

func (x *RogueStageInfo) GetMaxPassedLevel() uint32 {
	if x != nil {
		return x.MaxPassedLevel
	}
	return 0
}

type RoguelikeDungeonActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageList        []*RogueStageInfo           `protobuf:"bytes,8,rep,name=stage_list,json=stageList,proto3" json:"stage_list,omitempty"`
	ShikigamiList    []*RoguelikeShikigamiRecord `protobuf:"bytes,5,rep,name=shikigami_list,json=shikigamiList,proto3" json:"shikigami_list,omitempty"`
	EquippedRuneList []uint32                    `protobuf:"varint,14,rep,packed,name=equipped_rune_list,json=equippedRuneList,proto3" json:"equipped_rune_list,omitempty"`
	ContentCloseTime uint32                      `protobuf:"varint,6,opt,name=content_close_time,json=contentCloseTime,proto3" json:"content_close_time,omitempty"`
	IsContentClosed  bool                        `protobuf:"varint,10,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	RuneList         []uint32                    `protobuf:"varint,2,rep,packed,name=rune_list,json=runeList,proto3" json:"rune_list,omitempty"`
}

func (x *RoguelikeDungeonActivityDetailInfo) Reset() {
	*x = RoguelikeDungeonActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeDungeonActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeDungeonActivityDetailInfo) ProtoMessage() {}

func (x *RoguelikeDungeonActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeDungeonActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*RoguelikeDungeonActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{337}
}

func (x *RoguelikeDungeonActivityDetailInfo) GetStageList() []*RogueStageInfo {
	if x != nil {
		return x.StageList
	}
	return nil
}

func (x *RoguelikeDungeonActivityDetailInfo) GetShikigamiList() []*RoguelikeShikigamiRecord {
	if x != nil {
		return x.ShikigamiList
	}
	return nil
}

func (x *RoguelikeDungeonActivityDetailInfo) GetEquippedRuneList() []uint32 {
	if x != nil {
		return x.EquippedRuneList
	}
	return nil
}

func (x *RoguelikeDungeonActivityDetailInfo) GetContentCloseTime() uint32 {
	if x != nil {
		return x.ContentCloseTime
	}
	return 0
}

func (x *RoguelikeDungeonActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *RoguelikeDungeonActivityDetailInfo) GetRuneList() []uint32 {
	if x != nil {
		return x.RuneList
	}
	return nil
}

type DoRoguelikeDungeonCardGachaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId uint32 `protobuf:"varint,13,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	CellId    uint32 `protobuf:"varint,6,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (x *DoRoguelikeDungeonCardGachaReq) Reset() {
	*x = DoRoguelikeDungeonCardGachaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoRoguelikeDungeonCardGachaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoRoguelikeDungeonCardGachaReq) ProtoMessage() {}

func (x *DoRoguelikeDungeonCardGachaReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoRoguelikeDungeonCardGachaReq.ProtoReflect.Descriptor instead.
func (*DoRoguelikeDungeonCardGachaReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{338}
}

func (x *DoRoguelikeDungeonCardGachaReq) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *DoRoguelikeDungeonCardGachaReq) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

type DoRoguelikeDungeonCardGachaRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCanRefresh bool     `protobuf:"varint,8,opt,name=is_can_refresh,json=isCanRefresh,proto3" json:"is_can_refresh,omitempty"`
	CardList     []uint32 `protobuf:"varint,15,rep,packed,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
	Retcode      int32    `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DoRoguelikeDungeonCardGachaRsp) Reset() {
	*x = DoRoguelikeDungeonCardGachaRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoRoguelikeDungeonCardGachaRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoRoguelikeDungeonCardGachaRsp) ProtoMessage() {}

func (x *DoRoguelikeDungeonCardGachaRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoRoguelikeDungeonCardGachaRsp.ProtoReflect.Descriptor instead.
func (*DoRoguelikeDungeonCardGachaRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{339}
}

func (x *DoRoguelikeDungeonCardGachaRsp) GetIsCanRefresh() bool {
	if x != nil {
		return x.IsCanRefresh
	}
	return false
}

func (x *DoRoguelikeDungeonCardGachaRsp) GetCardList() []uint32 {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *DoRoguelikeDungeonCardGachaRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RefreshRoguelikeDungeonCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshRoguelikeDungeonCardReq) Reset() {
	*x = RefreshRoguelikeDungeonCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRoguelikeDungeonCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRoguelikeDungeonCardReq) ProtoMessage() {}

func (x *RefreshRoguelikeDungeonCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRoguelikeDungeonCardReq.ProtoReflect.Descriptor instead.
func (*RefreshRoguelikeDungeonCardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{340}
}

type RefreshRoguelikeDungeonCardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode     int32    `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ResCardList []uint32 `protobuf:"varint,9,rep,packed,name=res_card_list,json=resCardList,proto3" json:"res_card_list,omitempty"`
}

func (x *RefreshRoguelikeDungeonCardRsp) Reset() {
	*x = RefreshRoguelikeDungeonCardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRoguelikeDungeonCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRoguelikeDungeonCardRsp) ProtoMessage() {}

func (x *RefreshRoguelikeDungeonCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRoguelikeDungeonCardRsp.ProtoReflect.Descriptor instead.
func (*RefreshRoguelikeDungeonCardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{341}
}

func (x *RefreshRoguelikeDungeonCardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *RefreshRoguelikeDungeonCardRsp) GetResCardList() []uint32 {
	if x != nil {
		return x.ResCardList
	}
	return nil
}

type SelectRoguelikeDungeonCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint32 `protobuf:"varint,13,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *SelectRoguelikeDungeonCardReq) Reset() {
	*x = SelectRoguelikeDungeonCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectRoguelikeDungeonCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectRoguelikeDungeonCardReq) ProtoMessage() {}

func (x *SelectRoguelikeDungeonCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectRoguelikeDungeonCardReq.ProtoReflect.Descriptor instead.
func (*SelectRoguelikeDungeonCardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{342}
}

func (x *SelectRoguelikeDungeonCardReq) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type SelectRoguelikeDungeonCardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId  uint32 `protobuf:"varint,9,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Retcode int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SelectRoguelikeDungeonCardRsp) Reset() {
	*x = SelectRoguelikeDungeonCardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectRoguelikeDungeonCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectRoguelikeDungeonCardRsp) ProtoMessage() {}

func (x *SelectRoguelikeDungeonCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectRoguelikeDungeonCardRsp.ProtoReflect.Descriptor instead.
func (*SelectRoguelikeDungeonCardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{343}
}

func (x *SelectRoguelikeDungeonCardRsp) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SelectRoguelikeDungeonCardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type EquipRoguelikeRuneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuneList []uint32 `protobuf:"varint,3,rep,packed,name=rune_list,json=runeList,proto3" json:"rune_list,omitempty"`
}

func (x *EquipRoguelikeRuneReq) Reset() {
	*x = EquipRoguelikeRuneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipRoguelikeRuneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipRoguelikeRuneReq) ProtoMessage() {}

func (x *EquipRoguelikeRuneReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipRoguelikeRuneReq.ProtoReflect.Descriptor instead.
func (*EquipRoguelikeRuneReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{344}
}

func (x *EquipRoguelikeRuneReq) GetRuneList() []uint32 {
	if x != nil {
		return x.RuneList
	}
	return nil
}

type EquipRoguelikeRuneRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode  int32    `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RuneList []uint32 `protobuf:"varint,1,rep,packed,name=rune_list,json=runeList,proto3" json:"rune_list,omitempty"`
}

func (x *EquipRoguelikeRuneRsp) Reset() {
	*x = EquipRoguelikeRuneRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipRoguelikeRuneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipRoguelikeRuneRsp) ProtoMessage() {}

func (x *EquipRoguelikeRuneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipRoguelikeRuneRsp.ProtoReflect.Descriptor instead.
func (*EquipRoguelikeRuneRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{345}
}

func (x *EquipRoguelikeRuneRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *EquipRoguelikeRuneRsp) GetRuneList() []uint32 {
	if x != nil {
		return x.RuneList
	}
	return nil
}

type TriggerRoguelikeRuneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuneId uint32 `protobuf:"varint,8,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
}

func (x *TriggerRoguelikeRuneReq) Reset() {
	*x = TriggerRoguelikeRuneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerRoguelikeRuneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerRoguelikeRuneReq) ProtoMessage() {}

func (x *TriggerRoguelikeRuneReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerRoguelikeRuneReq.ProtoReflect.Descriptor instead.
func (*TriggerRoguelikeRuneReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{346}
}

func (x *TriggerRoguelikeRuneReq) GetRuneId() uint32 {
	if x != nil {
		return x.RuneId
	}
	return 0
}

type TriggerRoguelikeRuneRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableCount uint32 `protobuf:"varint,4,opt,name=available_count,json=availableCount,proto3" json:"available_count,omitempty"`
	RuneId         uint32 `protobuf:"varint,14,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
	Retcode        int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *TriggerRoguelikeRuneRsp) Reset() {
	*x = TriggerRoguelikeRuneRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerRoguelikeRuneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerRoguelikeRuneRsp) ProtoMessage() {}

func (x *TriggerRoguelikeRuneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerRoguelikeRuneRsp.ProtoReflect.Descriptor instead.
func (*TriggerRoguelikeRuneRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{347}
}

func (x *TriggerRoguelikeRuneRsp) GetAvailableCount() uint32 {
	if x != nil {
		return x.AvailableCount
	}
	return 0
}

func (x *TriggerRoguelikeRuneRsp) GetRuneId() uint32 {
	if x != nil {
		return x.RuneId
	}
	return 0
}

func (x *TriggerRoguelikeRuneRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type TriggerRoguelikeCurseNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectParamList []uint32 `protobuf:"varint,14,rep,packed,name=effect_param_list,json=effectParamList,proto3" json:"effect_param_list,omitempty"`
	CurseGroupId    uint32   `protobuf:"varint,9,opt,name=curse_group_id,json=curseGroupId,proto3" json:"curse_group_id,omitempty"`
	IsTriggerCurse  bool     `protobuf:"varint,13,opt,name=is_trigger_curse,json=isTriggerCurse,proto3" json:"is_trigger_curse,omitempty"`
	CurseLevel      uint32   `protobuf:"varint,3,opt,name=curse_level,json=curseLevel,proto3" json:"curse_level,omitempty"`
}

func (x *TriggerRoguelikeCurseNotify) Reset() {
	*x = TriggerRoguelikeCurseNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerRoguelikeCurseNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerRoguelikeCurseNotify) ProtoMessage() {}

func (x *TriggerRoguelikeCurseNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerRoguelikeCurseNotify.ProtoReflect.Descriptor instead.
func (*TriggerRoguelikeCurseNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{348}
}

func (x *TriggerRoguelikeCurseNotify) GetEffectParamList() []uint32 {
	if x != nil {
		return x.EffectParamList
	}
	return nil
}

func (x *TriggerRoguelikeCurseNotify) GetCurseGroupId() uint32 {
	if x != nil {
		return x.CurseGroupId
	}
	return 0
}

func (x *TriggerRoguelikeCurseNotify) GetIsTriggerCurse() bool {
	if x != nil {
		return x.IsTriggerCurse
	}
	return false
}

func (x *TriggerRoguelikeCurseNotify) GetCurseLevel() uint32 {
	if x != nil {
		return x.CurseLevel
	}
	return 0
}

type UpgradeRoguelikeShikigamiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeLevel     uint32 `protobuf:"varint,6,opt,name=upgrade_level,json=upgradeLevel,proto3" json:"upgrade_level,omitempty"`
	ShikigamiGroupId uint32 `protobuf:"varint,15,opt,name=shikigami_group_id,json=shikigamiGroupId,proto3" json:"shikigami_group_id,omitempty"`
}

func (x *UpgradeRoguelikeShikigamiReq) Reset() {
	*x = UpgradeRoguelikeShikigamiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeRoguelikeShikigamiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeRoguelikeShikigamiReq) ProtoMessage() {}

func (x *UpgradeRoguelikeShikigamiReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeRoguelikeShikigamiReq.ProtoReflect.Descriptor instead.
func (*UpgradeRoguelikeShikigamiReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{349}
}

func (x *UpgradeRoguelikeShikigamiReq) GetUpgradeLevel() uint32 {
	if x != nil {
		return x.UpgradeLevel
	}
	return 0
}

func (x *UpgradeRoguelikeShikigamiReq) GetShikigamiGroupId() uint32 {
	if x != nil {
		return x.ShikigamiGroupId
	}
	return 0
}

type UpgradeRoguelikeShikigamiRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode          int32  `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ShikigamiGroupId uint32 `protobuf:"varint,14,opt,name=shikigami_group_id,json=shikigamiGroupId,proto3" json:"shikigami_group_id,omitempty"`
	CurLevel         uint32 `protobuf:"varint,4,opt,name=cur_level,json=curLevel,proto3" json:"cur_level,omitempty"`
}

func (x *UpgradeRoguelikeShikigamiRsp) Reset() {
	*x = UpgradeRoguelikeShikigamiRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeRoguelikeShikigamiRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeRoguelikeShikigamiRsp) ProtoMessage() {}

func (x *UpgradeRoguelikeShikigamiRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeRoguelikeShikigamiRsp.ProtoReflect.Descriptor instead.
func (*UpgradeRoguelikeShikigamiRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{350}
}

func (x *UpgradeRoguelikeShikigamiRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *UpgradeRoguelikeShikigamiRsp) GetShikigamiGroupId() uint32 {
	if x != nil {
		return x.ShikigamiGroupId
	}
	return 0
}

func (x *UpgradeRoguelikeShikigamiRsp) GetCurLevel() uint32 {
	if x != nil {
		return x.CurLevel
	}
	return 0
}

type RoguelikeSelectAvatarAndEnterDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnstageAvatarGuidList   []uint64 `protobuf:"varint,14,rep,packed,name=onstage_avatar_guid_list,json=onstageAvatarGuidList,proto3" json:"onstage_avatar_guid_list,omitempty"`
	StageId                 uint32   `protobuf:"varint,4,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	BackstageAvatarGuidList []uint64 `protobuf:"varint,11,rep,packed,name=backstage_avatar_guid_list,json=backstageAvatarGuidList,proto3" json:"backstage_avatar_guid_list,omitempty"`
}

func (x *RoguelikeSelectAvatarAndEnterDungeonReq) Reset() {
	*x = RoguelikeSelectAvatarAndEnterDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeSelectAvatarAndEnterDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeSelectAvatarAndEnterDungeonReq) ProtoMessage() {}

func (x *RoguelikeSelectAvatarAndEnterDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeSelectAvatarAndEnterDungeonReq.ProtoReflect.Descriptor instead.
func (*RoguelikeSelectAvatarAndEnterDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{351}
}

func (x *RoguelikeSelectAvatarAndEnterDungeonReq) GetOnstageAvatarGuidList() []uint64 {
	if x != nil {
		return x.OnstageAvatarGuidList
	}
	return nil
}

func (x *RoguelikeSelectAvatarAndEnterDungeonReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RoguelikeSelectAvatarAndEnterDungeonReq) GetBackstageAvatarGuidList() []uint64 {
	if x != nil {
		return x.BackstageAvatarGuidList
	}
	return nil
}

type RoguelikeSelectAvatarAndEnterDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,15,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Retcode int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *RoguelikeSelectAvatarAndEnterDungeonRsp) Reset() {
	*x = RoguelikeSelectAvatarAndEnterDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeSelectAvatarAndEnterDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeSelectAvatarAndEnterDungeonRsp) ProtoMessage() {}

func (x *RoguelikeSelectAvatarAndEnterDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeSelectAvatarAndEnterDungeonRsp.ProtoReflect.Descriptor instead.
func (*RoguelikeSelectAvatarAndEnterDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{352}
}

func (x *RoguelikeSelectAvatarAndEnterDungeonRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RoguelikeSelectAvatarAndEnterDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RoguelikeGiveUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,9,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *RoguelikeGiveUpReq) Reset() {
	*x = RoguelikeGiveUpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeGiveUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeGiveUpReq) ProtoMessage() {}

func (x *RoguelikeGiveUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeGiveUpReq.ProtoReflect.Descriptor instead.
func (*RoguelikeGiveUpReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{353}
}

func (x *RoguelikeGiveUpReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type RoguelikeGiveUpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
	StageId uint32 `protobuf:"varint,7,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	// Types that are assignable to Info:
	//
	//	*RoguelikeGiveUpRsp_SettleInfo
	Info isRoguelikeGiveUpRsp_Info `protobuf_oneof:"info"`
}

func (x *RoguelikeGiveUpRsp) Reset() {
	*x = RoguelikeGiveUpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeGiveUpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeGiveUpRsp) ProtoMessage() {}

func (x *RoguelikeGiveUpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeGiveUpRsp.ProtoReflect.Descriptor instead.
func (*RoguelikeGiveUpRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{354}
}

func (x *RoguelikeGiveUpRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *RoguelikeGiveUpRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (m *RoguelikeGiveUpRsp) GetInfo() isRoguelikeGiveUpRsp_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *RoguelikeGiveUpRsp) GetSettleInfo() *RoguelikeDungeonSettleInfo {
	if x, ok := x.GetInfo().(*RoguelikeGiveUpRsp_SettleInfo); ok {
		return x.SettleInfo
	}
	return nil
}

type isRoguelikeGiveUpRsp_Info interface {
	isRoguelikeGiveUpRsp_Info()
}

type RoguelikeGiveUpRsp_SettleInfo struct {
	SettleInfo *RoguelikeDungeonSettleInfo `protobuf:"bytes,8,opt,name=settle_info,json=settleInfo,proto3,oneof"`
}

func (*RoguelikeGiveUpRsp_SettleInfo) isRoguelikeGiveUpRsp_Info() {}

type RoguelikeTakeStageFirstPassRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *RoguelikeTakeStageFirstPassRewardReq) Reset() {
	*x = RoguelikeTakeStageFirstPassRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeTakeStageFirstPassRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeTakeStageFirstPassRewardReq) ProtoMessage() {}

func (x *RoguelikeTakeStageFirstPassRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeTakeStageFirstPassRewardReq.ProtoReflect.Descriptor instead.
func (*RoguelikeTakeStageFirstPassRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{355}
}

func (x *RoguelikeTakeStageFirstPassRewardReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type RoguelikeTakeStageFirstPassRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,14,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Retcode int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *RoguelikeTakeStageFirstPassRewardRsp) Reset() {
	*x = RoguelikeTakeStageFirstPassRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeTakeStageFirstPassRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeTakeStageFirstPassRewardRsp) ProtoMessage() {}

func (x *RoguelikeTakeStageFirstPassRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeTakeStageFirstPassRewardRsp.ProtoReflect.Descriptor instead.
func (*RoguelikeTakeStageFirstPassRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{356}
}

func (x *RoguelikeTakeStageFirstPassRewardRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RoguelikeTakeStageFirstPassRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GiveUpRoguelikeDungeonCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GiveUpRoguelikeDungeonCardReq) Reset() {
	*x = GiveUpRoguelikeDungeonCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveUpRoguelikeDungeonCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveUpRoguelikeDungeonCardReq) ProtoMessage() {}

func (x *GiveUpRoguelikeDungeonCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveUpRoguelikeDungeonCardReq.ProtoReflect.Descriptor instead.
func (*GiveUpRoguelikeDungeonCardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{357}
}

type GiveUpRoguelikeDungeonCardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GiveUpRoguelikeDungeonCardRsp) Reset() {
	*x = GiveUpRoguelikeDungeonCardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveUpRoguelikeDungeonCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveUpRoguelikeDungeonCardRsp) ProtoMessage() {}

func (x *GiveUpRoguelikeDungeonCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveUpRoguelikeDungeonCardRsp.ProtoReflect.Descriptor instead.
func (*GiveUpRoguelikeDungeonCardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{358}
}

func (x *GiveUpRoguelikeDungeonCardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RogueCellInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellConfigId uint32         `protobuf:"varint,14,opt,name=cell_config_id,json=cellConfigId,proto3" json:"cell_config_id,omitempty"`
	DungeonId    uint32         `protobuf:"varint,4,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	CellId       uint32         `protobuf:"varint,9,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	CellType     uint32         `protobuf:"varint,13,opt,name=cell_type,json=cellType,proto3" json:"cell_type,omitempty"`
	State        RogueCellState `protobuf:"varint,10,opt,name=state,proto3,enum=proto.RogueCellState" json:"state,omitempty"`
}

func (x *RogueCellInfo) Reset() {
	*x = RogueCellInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueCellInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueCellInfo) ProtoMessage() {}

func (x *RogueCellInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueCellInfo.ProtoReflect.Descriptor instead.
func (*RogueCellInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{359}
}

func (x *RogueCellInfo) GetCellConfigId() uint32 {
	if x != nil {
		return x.CellConfigId
	}
	return 0
}

func (x *RogueCellInfo) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *RogueCellInfo) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *RogueCellInfo) GetCellType() uint32 {
	if x != nil {
		return x.CellType
	}
	return 0
}

func (x *RogueCellInfo) GetState() RogueCellState {
	if x != nil {
		return x.State
	}
	return RogueCellState_ROGUE_CELL_NONE
}

type EnterRoguelikeDungeonNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMistClear             bool                      `protobuf:"varint,14,opt,name=is_mist_clear,json=isMistClear,proto3" json:"is_mist_clear,omitempty"`
	DungeonWeightConfigId   uint32                    `protobuf:"varint,2,opt,name=dungeon_weight_config_id,json=dungeonWeightConfigId,proto3" json:"dungeon_weight_config_id,omitempty"`
	RuneRecordList          []*RoguelikeRuneRecord    `protobuf:"bytes,6,rep,name=rune_record_list,json=runeRecordList,proto3" json:"rune_record_list,omitempty"`
	OnstageAvatarGuidList   []uint64                  `protobuf:"varint,9,rep,packed,name=onstage_avatar_guid_list,json=onstageAvatarGuidList,proto3" json:"onstage_avatar_guid_list,omitempty"`
	IsFirstEnter            bool                      `protobuf:"varint,205,opt,name=is_first_enter,json=isFirstEnter,proto3" json:"is_first_enter,omitempty"`
	ExploredCellList        []uint32                  `protobuf:"varint,3,rep,packed,name=explored_cell_list,json=exploredCellList,proto3" json:"explored_cell_list,omitempty"`
	CellInfoMap             map[uint32]*RogueCellInfo `protobuf:"bytes,11,rep,name=cell_info_map,json=cellInfoMap,proto3" json:"cell_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DungeonId               uint32                    `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	RefreshCostItemCount    uint32                    `protobuf:"varint,1999,opt,name=refresh_cost_item_count,json=refreshCostItemCount,proto3" json:"refresh_cost_item_count,omitempty"`
	BonusResourceProp       float32                   `protobuf:"fixed32,13,opt,name=bonus_resource_prop,json=bonusResourceProp,proto3" json:"bonus_resource_prop,omitempty"`
	ReviseMonsterLevel      uint32                    `protobuf:"varint,1541,opt,name=revise_monster_level,json=reviseMonsterLevel,proto3" json:"revise_monster_level,omitempty"`
	StageId                 uint32                    `protobuf:"varint,15,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	BackstageAvatarGuidList []uint64                  `protobuf:"varint,10,rep,packed,name=backstage_avatar_guid_list,json=backstageAvatarGuidList,proto3" json:"backstage_avatar_guid_list,omitempty"`
	CurCellId               uint32                    `protobuf:"varint,12,opt,name=cur_cell_id,json=curCellId,proto3" json:"cur_cell_id,omitempty"`
	RefreshCostItemId       uint32                    `protobuf:"varint,7,opt,name=refresh_cost_item_id,json=refreshCostItemId,proto3" json:"refresh_cost_item_id,omitempty"`
	CurLevel                uint32                    `protobuf:"varint,8,opt,name=cur_level,json=curLevel,proto3" json:"cur_level,omitempty"`
}

func (x *EnterRoguelikeDungeonNotify) Reset() {
	*x = EnterRoguelikeDungeonNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterRoguelikeDungeonNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterRoguelikeDungeonNotify) ProtoMessage() {}

func (x *EnterRoguelikeDungeonNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterRoguelikeDungeonNotify.ProtoReflect.Descriptor instead.
func (*EnterRoguelikeDungeonNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{360}
}

func (x *EnterRoguelikeDungeonNotify) GetIsMistClear() bool {
	if x != nil {
		return x.IsMistClear
	}
	return false
}

func (x *EnterRoguelikeDungeonNotify) GetDungeonWeightConfigId() uint32 {
	if x != nil {
		return x.DungeonWeightConfigId
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetRuneRecordList() []*RoguelikeRuneRecord {
	if x != nil {
		return x.RuneRecordList
	}
	return nil
}

func (x *EnterRoguelikeDungeonNotify) GetOnstageAvatarGuidList() []uint64 {
	if x != nil {
		return x.OnstageAvatarGuidList
	}
	return nil
}

func (x *EnterRoguelikeDungeonNotify) GetIsFirstEnter() bool {
	if x != nil {
		return x.IsFirstEnter
	}
	return false
}

func (x *EnterRoguelikeDungeonNotify) GetExploredCellList() []uint32 {
	if x != nil {
		return x.ExploredCellList
	}
	return nil
}

func (x *EnterRoguelikeDungeonNotify) GetCellInfoMap() map[uint32]*RogueCellInfo {
	if x != nil {
		return x.CellInfoMap
	}
	return nil
}

func (x *EnterRoguelikeDungeonNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetRefreshCostItemCount() uint32 {
	if x != nil {
		return x.RefreshCostItemCount
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetBonusResourceProp() float32 {
	if x != nil {
		return x.BonusResourceProp
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetReviseMonsterLevel() uint32 {
	if x != nil {
		return x.ReviseMonsterLevel
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetBackstageAvatarGuidList() []uint64 {
	if x != nil {
		return x.BackstageAvatarGuidList
	}
	return nil
}

func (x *EnterRoguelikeDungeonNotify) GetCurCellId() uint32 {
	if x != nil {
		return x.CurCellId
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetRefreshCostItemId() uint32 {
	if x != nil {
		return x.RefreshCostItemId
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetCurLevel() uint32 {
	if x != nil {
		return x.CurLevel
	}
	return 0
}

type StartRogueEliteCellChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difficulty RogueEliteCellDifficultyType `protobuf:"varint,1,opt,name=difficulty,proto3,enum=proto.RogueEliteCellDifficultyType" json:"difficulty,omitempty"`
	DungeonId  uint32                       `protobuf:"varint,11,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	CellId     uint32                       `protobuf:"varint,4,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (x *StartRogueEliteCellChallengeReq) Reset() {
	*x = StartRogueEliteCellChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRogueEliteCellChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRogueEliteCellChallengeReq) ProtoMessage() {}

func (x *StartRogueEliteCellChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRogueEliteCellChallengeReq.ProtoReflect.Descriptor instead.
func (*StartRogueEliteCellChallengeReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{361}
}

func (x *StartRogueEliteCellChallengeReq) GetDifficulty() RogueEliteCellDifficultyType {
	if x != nil {
		return x.Difficulty
	}
	return RogueEliteCellDifficultyType_ROGUE_ELITE_NORMAL
}

func (x *StartRogueEliteCellChallengeReq) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *StartRogueEliteCellChallengeReq) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

type StartRogueEliteCellChallengeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId uint32 `protobuf:"varint,12,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	CellId    uint32 `protobuf:"varint,9,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	Retcode   int32  `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *StartRogueEliteCellChallengeRsp) Reset() {
	*x = StartRogueEliteCellChallengeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRogueEliteCellChallengeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRogueEliteCellChallengeRsp) ProtoMessage() {}

func (x *StartRogueEliteCellChallengeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRogueEliteCellChallengeRsp.ProtoReflect.Descriptor instead.
func (*StartRogueEliteCellChallengeRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{362}
}

func (x *StartRogueEliteCellChallengeRsp) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *StartRogueEliteCellChallengeRsp) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *StartRogueEliteCellChallengeRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type StartRogueNormalCellChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId uint32 `protobuf:"varint,3,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	CellId    uint32 `protobuf:"varint,8,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (x *StartRogueNormalCellChallengeReq) Reset() {
	*x = StartRogueNormalCellChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRogueNormalCellChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRogueNormalCellChallengeReq) ProtoMessage() {}

func (x *StartRogueNormalCellChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRogueNormalCellChallengeReq.ProtoReflect.Descriptor instead.
func (*StartRogueNormalCellChallengeReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{363}
}

func (x *StartRogueNormalCellChallengeReq) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *StartRogueNormalCellChallengeReq) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

type StartRogueNormalCellChallengeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId uint32 `protobuf:"varint,10,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	CellId    uint32 `protobuf:"varint,2,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	Retcode   int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *StartRogueNormalCellChallengeRsp) Reset() {
	*x = StartRogueNormalCellChallengeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRogueNormalCellChallengeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRogueNormalCellChallengeRsp) ProtoMessage() {}

func (x *StartRogueNormalCellChallengeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRogueNormalCellChallengeRsp.ProtoReflect.Descriptor instead.
func (*StartRogueNormalCellChallengeRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{364}
}

func (x *StartRogueNormalCellChallengeRsp) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *StartRogueNormalCellChallengeRsp) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *StartRogueNormalCellChallengeRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RogueCellUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellInfo *RogueCellInfo `protobuf:"bytes,7,opt,name=cell_info,json=cellInfo,proto3" json:"cell_info,omitempty"`
}

func (x *RogueCellUpdateNotify) Reset() {
	*x = RogueCellUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueCellUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueCellUpdateNotify) ProtoMessage() {}

func (x *RogueCellUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueCellUpdateNotify.ProtoReflect.Descriptor instead.
func (*RogueCellUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{365}
}

func (x *RogueCellUpdateNotify) GetCellInfo() *RogueCellInfo {
	if x != nil {
		return x.CellInfo
	}
	return nil
}

type RogueDungeonPlayerCellChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldCellId uint32 `protobuf:"varint,10,opt,name=old_cell_id,json=oldCellId,proto3" json:"old_cell_id,omitempty"`
	CellId    uint32 `protobuf:"varint,7,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (x *RogueDungeonPlayerCellChangeNotify) Reset() {
	*x = RogueDungeonPlayerCellChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDungeonPlayerCellChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDungeonPlayerCellChangeNotify) ProtoMessage() {}

func (x *RogueDungeonPlayerCellChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDungeonPlayerCellChangeNotify.ProtoReflect.Descriptor instead.
func (*RogueDungeonPlayerCellChangeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{366}
}

func (x *RogueDungeonPlayerCellChangeNotify) GetOldCellId() uint32 {
	if x != nil {
		return x.OldCellId
	}
	return 0
}

func (x *RogueDungeonPlayerCellChangeNotify) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

type RogueHealAvatarsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId uint32 `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	CellId    uint32 `protobuf:"varint,3,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (x *RogueHealAvatarsReq) Reset() {
	*x = RogueHealAvatarsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueHealAvatarsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueHealAvatarsReq) ProtoMessage() {}

func (x *RogueHealAvatarsReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueHealAvatarsReq.ProtoReflect.Descriptor instead.
func (*RogueHealAvatarsReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{367}
}

func (x *RogueHealAvatarsReq) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *RogueHealAvatarsReq) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

type RogueHealAvatarsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId uint32 `protobuf:"varint,10,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	Retcode   int32  `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
	CellId    uint32 `protobuf:"varint,14,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (x *RogueHealAvatarsRsp) Reset() {
	*x = RogueHealAvatarsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueHealAvatarsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueHealAvatarsRsp) ProtoMessage() {}

func (x *RogueHealAvatarsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueHealAvatarsRsp.ProtoReflect.Descriptor instead.
func (*RogueHealAvatarsRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{368}
}

func (x *RogueHealAvatarsRsp) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *RogueHealAvatarsRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *RogueHealAvatarsRsp) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

type RogueResumeDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,12,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *RogueResumeDungeonReq) Reset() {
	*x = RogueResumeDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueResumeDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueResumeDungeonReq) ProtoMessage() {}

func (x *RogueResumeDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueResumeDungeonReq.ProtoReflect.Descriptor instead.
func (*RogueResumeDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{369}
}

func (x *RogueResumeDungeonReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type RogueResumeDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,12,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Retcode int32  `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *RogueResumeDungeonRsp) Reset() {
	*x = RogueResumeDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueResumeDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueResumeDungeonRsp) ProtoMessage() {}

func (x *RogueResumeDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueResumeDungeonRsp.ProtoReflect.Descriptor instead.
func (*RogueResumeDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{370}
}

func (x *RogueResumeDungeonRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RogueResumeDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ClearRoguelikeCurseNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClearCurseMap   map[uint32]uint32 `protobuf:"bytes,10,rep,name=clear_curse_map,json=clearCurseMap,proto3" json:"clear_curse_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsClearAll      bool              `protobuf:"varint,11,opt,name=is_clear_all,json=isClearAll,proto3" json:"is_clear_all,omitempty"`
	CardId          uint32            `protobuf:"varint,8,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	IsCurseAllClear bool              `protobuf:"varint,1,opt,name=is_curse_all_clear,json=isCurseAllClear,proto3" json:"is_curse_all_clear,omitempty"`
}

func (x *ClearRoguelikeCurseNotify) Reset() {
	*x = ClearRoguelikeCurseNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearRoguelikeCurseNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearRoguelikeCurseNotify) ProtoMessage() {}

func (x *ClearRoguelikeCurseNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearRoguelikeCurseNotify.ProtoReflect.Descriptor instead.
func (*ClearRoguelikeCurseNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{371}
}

func (x *ClearRoguelikeCurseNotify) GetClearCurseMap() map[uint32]uint32 {
	if x != nil {
		return x.ClearCurseMap
	}
	return nil
}

func (x *ClearRoguelikeCurseNotify) GetIsClearAll() bool {
	if x != nil {
		return x.IsClearAll
	}
	return false
}

func (x *ClearRoguelikeCurseNotify) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *ClearRoguelikeCurseNotify) GetIsCurseAllClear() bool {
	if x != nil {
		return x.IsCurseAllClear
	}
	return false
}

type RoguelikeCardGachaNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardList     []uint32 `protobuf:"varint,10,rep,packed,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
	IsCanRefresh bool     `protobuf:"varint,11,opt,name=is_can_refresh,json=isCanRefresh,proto3" json:"is_can_refresh,omitempty"`
}

func (x *RoguelikeCardGachaNotify) Reset() {
	*x = RoguelikeCardGachaNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeCardGachaNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeCardGachaNotify) ProtoMessage() {}

func (x *RoguelikeCardGachaNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeCardGachaNotify.ProtoReflect.Descriptor instead.
func (*RoguelikeCardGachaNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{372}
}

func (x *RoguelikeCardGachaNotify) GetCardList() []uint32 {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *RoguelikeCardGachaNotify) GetIsCanRefresh() bool {
	if x != nil {
		return x.IsCanRefresh
	}
	return false
}

type RogueSwitchAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId                uint32   `protobuf:"varint,15,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	OnstageAvatarGuidList []uint64 `protobuf:"varint,3,rep,packed,name=onstage_avatar_guid_list,json=onstageAvatarGuidList,proto3" json:"onstage_avatar_guid_list,omitempty"`
	CurAvatarGuid         uint64   `protobuf:"varint,11,opt,name=cur_avatar_guid,json=curAvatarGuid,proto3" json:"cur_avatar_guid,omitempty"`
	DungeonId             uint32   `protobuf:"varint,6,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (x *RogueSwitchAvatarReq) Reset() {
	*x = RogueSwitchAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueSwitchAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueSwitchAvatarReq) ProtoMessage() {}

func (x *RogueSwitchAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueSwitchAvatarReq.ProtoReflect.Descriptor instead.
func (*RogueSwitchAvatarReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{373}
}

func (x *RogueSwitchAvatarReq) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *RogueSwitchAvatarReq) GetOnstageAvatarGuidList() []uint64 {
	if x != nil {
		return x.OnstageAvatarGuidList
	}
	return nil
}

func (x *RogueSwitchAvatarReq) GetCurAvatarGuid() uint64 {
	if x != nil {
		return x.CurAvatarGuid
	}
	return 0
}

func (x *RogueSwitchAvatarReq) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

type RogueSwitchAvatarRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurAvatarGuid           uint64   `protobuf:"varint,4,opt,name=cur_avatar_guid,json=curAvatarGuid,proto3" json:"cur_avatar_guid,omitempty"`
	BackstageAvatarGuidList []uint64 `protobuf:"varint,8,rep,packed,name=backstage_avatar_guid_list,json=backstageAvatarGuidList,proto3" json:"backstage_avatar_guid_list,omitempty"`
	DungeonId               uint32   `protobuf:"varint,14,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	CellId                  uint32   `protobuf:"varint,3,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	Retcode                 int32    `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
	OnstageAvatarGuidList   []uint64 `protobuf:"varint,9,rep,packed,name=onstage_avatar_guid_list,json=onstageAvatarGuidList,proto3" json:"onstage_avatar_guid_list,omitempty"`
}

func (x *RogueSwitchAvatarRsp) Reset() {
	*x = RogueSwitchAvatarRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueSwitchAvatarRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueSwitchAvatarRsp) ProtoMessage() {}

func (x *RogueSwitchAvatarRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueSwitchAvatarRsp.ProtoReflect.Descriptor instead.
func (*RogueSwitchAvatarRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{374}
}

func (x *RogueSwitchAvatarRsp) GetCurAvatarGuid() uint64 {
	if x != nil {
		return x.CurAvatarGuid
	}
	return 0
}

func (x *RogueSwitchAvatarRsp) GetBackstageAvatarGuidList() []uint64 {
	if x != nil {
		return x.BackstageAvatarGuidList
	}
	return nil
}

func (x *RogueSwitchAvatarRsp) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *RogueSwitchAvatarRsp) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *RogueSwitchAvatarRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *RogueSwitchAvatarRsp) GetOnstageAvatarGuidList() []uint64 {
	if x != nil {
		return x.OnstageAvatarGuidList
	}
	return nil
}

type DisableRoguelikeTrapNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint32 `protobuf:"varint,13,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *DisableRoguelikeTrapNotify) Reset() {
	*x = DisableRoguelikeTrapNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableRoguelikeTrapNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableRoguelikeTrapNotify) ProtoMessage() {}

func (x *DisableRoguelikeTrapNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableRoguelikeTrapNotify.ProtoReflect.Descriptor instead.
func (*DisableRoguelikeTrapNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{375}
}

func (x *DisableRoguelikeTrapNotify) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type RoguelikeRuneRecordUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuneRecordList []*RoguelikeRuneRecord `protobuf:"bytes,11,rep,name=rune_record_list,json=runeRecordList,proto3" json:"rune_record_list,omitempty"`
}

func (x *RoguelikeRuneRecordUpdateNotify) Reset() {
	*x = RoguelikeRuneRecordUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeRuneRecordUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeRuneRecordUpdateNotify) ProtoMessage() {}

func (x *RoguelikeRuneRecordUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeRuneRecordUpdateNotify.ProtoReflect.Descriptor instead.
func (*RoguelikeRuneRecordUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{376}
}

func (x *RoguelikeRuneRecordUpdateNotify) GetRuneRecordList() []*RoguelikeRuneRecord {
	if x != nil {
		return x.RuneRecordList
	}
	return nil
}

type RoguelikeMistClearNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RoguelikeMistClearNotify) Reset() {
	*x = RoguelikeMistClearNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeMistClearNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeMistClearNotify) ProtoMessage() {}

func (x *RoguelikeMistClearNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeMistClearNotify.ProtoReflect.Descriptor instead.
func (*RoguelikeMistClearNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{377}
}

type RoguelikeEffectDataNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurseList []*RogueEffectRecord `protobuf:"bytes,7,rep,name=curse_list,json=curseList,proto3" json:"curse_list,omitempty"`
	CardList  []*RogueEffectRecord `protobuf:"bytes,4,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
}

func (x *RoguelikeEffectDataNotify) Reset() {
	*x = RoguelikeEffectDataNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeEffectDataNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeEffectDataNotify) ProtoMessage() {}

func (x *RoguelikeEffectDataNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeEffectDataNotify.ProtoReflect.Descriptor instead.
func (*RoguelikeEffectDataNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{378}
}

func (x *RoguelikeEffectDataNotify) GetCurseList() []*RogueEffectRecord {
	if x != nil {
		return x.CurseList
	}
	return nil
}

func (x *RoguelikeEffectDataNotify) GetCardList() []*RogueEffectRecord {
	if x != nil {
		return x.CardList
	}
	return nil
}

type RoguelikeEffectViewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewCurseList []uint32 `protobuf:"varint,10,rep,packed,name=view_curse_list,json=viewCurseList,proto3" json:"view_curse_list,omitempty"`
	ViewCardList  []uint32 `protobuf:"varint,2,rep,packed,name=view_card_list,json=viewCardList,proto3" json:"view_card_list,omitempty"`
}

func (x *RoguelikeEffectViewReq) Reset() {
	*x = RoguelikeEffectViewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeEffectViewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeEffectViewReq) ProtoMessage() {}

func (x *RoguelikeEffectViewReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeEffectViewReq.ProtoReflect.Descriptor instead.
func (*RoguelikeEffectViewReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{379}
}

func (x *RoguelikeEffectViewReq) GetViewCurseList() []uint32 {
	if x != nil {
		return x.ViewCurseList
	}
	return nil
}

func (x *RoguelikeEffectViewReq) GetViewCardList() []uint32 {
	if x != nil {
		return x.ViewCardList
	}
	return nil
}

type RoguelikeEffectViewRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *RoguelikeEffectViewRsp) Reset() {
	*x = RoguelikeEffectViewRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeEffectViewRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeEffectViewRsp) ProtoMessage() {}

func (x *RoguelikeEffectViewRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeEffectViewRsp.ProtoReflect.Descriptor instead.
func (*RoguelikeEffectViewRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{380}
}

func (x *RoguelikeEffectViewRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RoguelikeResourceBonusPropUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonusResourceProp float32 `protobuf:"fixed32,12,opt,name=bonus_resource_prop,json=bonusResourceProp,proto3" json:"bonus_resource_prop,omitempty"`
}

func (x *RoguelikeResourceBonusPropUpdateNotify) Reset() {
	*x = RoguelikeResourceBonusPropUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeResourceBonusPropUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeResourceBonusPropUpdateNotify) ProtoMessage() {}

func (x *RoguelikeResourceBonusPropUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeResourceBonusPropUpdateNotify.ProtoReflect.Descriptor instead.
func (*RoguelikeResourceBonusPropUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{381}
}

func (x *RoguelikeResourceBonusPropUpdateNotify) GetBonusResourceProp() float32 {
	if x != nil {
		return x.BonusResourceProp
	}
	return 0
}

type RoguelikeSettleCoinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinC   uint32 `protobuf:"varint,8,opt,name=coin_c,json=coinC,proto3" json:"coin_c,omitempty"`
	CoinB   uint32 `protobuf:"varint,10,opt,name=coin_b,json=coinB,proto3" json:"coin_b,omitempty"`
	CellNum uint32 `protobuf:"varint,1,opt,name=cell_num,json=cellNum,proto3" json:"cell_num,omitempty"`
}

func (x *RoguelikeSettleCoinInfo) Reset() {
	*x = RoguelikeSettleCoinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeSettleCoinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeSettleCoinInfo) ProtoMessage() {}

func (x *RoguelikeSettleCoinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeSettleCoinInfo.ProtoReflect.Descriptor instead.
func (*RoguelikeSettleCoinInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{382}
}

func (x *RoguelikeSettleCoinInfo) GetCoinC() uint32 {
	if x != nil {
		return x.CoinC
	}
	return 0
}

func (x *RoguelikeSettleCoinInfo) GetCoinB() uint32 {
	if x != nil {
		return x.CoinB
	}
	return 0
}

func (x *RoguelikeSettleCoinInfo) GetCellNum() uint32 {
	if x != nil {
		return x.CellNum
	}
	return 0
}

type RoguelikeDungeonSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId                     uint32                              `protobuf:"varint,5,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsFinalLevel                bool                                `protobuf:"varint,15,opt,name=is_final_level,json=isFinalLevel,proto3" json:"is_final_level,omitempty"`
	FinishedChallengeCellNumMap map[uint32]*RoguelikeSettleCoinInfo `protobuf:"bytes,3,rep,name=finished_challenge_cell_num_map,json=finishedChallengeCellNumMap,proto3" json:"finished_challenge_cell_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsCoinCReachLimit           bool                                `protobuf:"varint,13,opt,name=is_coin_c_reach_limit,json=isCoinCReachLimit,proto3" json:"is_coin_c_reach_limit,omitempty"`
	CurLevel                    uint32                              `protobuf:"varint,9,opt,name=cur_level,json=curLevel,proto3" json:"cur_level,omitempty"`
	TotalCoinBNum               uint32                              `protobuf:"varint,6,opt,name=total_coin_b_num,json=totalCoinBNum,proto3" json:"total_coin_b_num,omitempty"`
	TotalCoinCNum               uint32                              `protobuf:"varint,10,opt,name=total_coin_c_num,json=totalCoinCNum,proto3" json:"total_coin_c_num,omitempty"`
}

func (x *RoguelikeDungeonSettleInfo) Reset() {
	*x = RoguelikeDungeonSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeDungeonSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeDungeonSettleInfo) ProtoMessage() {}

func (x *RoguelikeDungeonSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeDungeonSettleInfo.ProtoReflect.Descriptor instead.
func (*RoguelikeDungeonSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{383}
}

func (x *RoguelikeDungeonSettleInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RoguelikeDungeonSettleInfo) GetIsFinalLevel() bool {
	if x != nil {
		return x.IsFinalLevel
	}
	return false
}

func (x *RoguelikeDungeonSettleInfo) GetFinishedChallengeCellNumMap() map[uint32]*RoguelikeSettleCoinInfo {
	if x != nil {
		return x.FinishedChallengeCellNumMap
	}
	return nil
}

func (x *RoguelikeDungeonSettleInfo) GetIsCoinCReachLimit() bool {
	if x != nil {
		return x.IsCoinCReachLimit
	}
	return false
}

func (x *RoguelikeDungeonSettleInfo) GetCurLevel() uint32 {
	if x != nil {
		return x.CurLevel
	}
	return 0
}

func (x *RoguelikeDungeonSettleInfo) GetTotalCoinBNum() uint32 {
	if x != nil {
		return x.TotalCoinBNum
	}
	return 0
}

func (x *RoguelikeDungeonSettleInfo) GetTotalCoinCNum() uint32 {
	if x != nil {
		return x.TotalCoinCNum
	}
	return 0
}

type RoguelikeRefreshCardCostUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemCount uint32 `protobuf:"varint,5,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
	ItemId    uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *RoguelikeRefreshCardCostUpdateNotify) Reset() {
	*x = RoguelikeRefreshCardCostUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeRefreshCardCostUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeRefreshCardCostUpdateNotify) ProtoMessage() {}

func (x *RoguelikeRefreshCardCostUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeRefreshCardCostUpdateNotify.ProtoReflect.Descriptor instead.
func (*RoguelikeRefreshCardCostUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{384}
}

func (x *RoguelikeRefreshCardCostUpdateNotify) GetItemCount() uint32 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

func (x *RoguelikeRefreshCardCostUpdateNotify) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type DigMarkPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos      *Vector `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	BundleId uint32  `protobuf:"varint,13,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	Rot      *Vector `protobuf:"bytes,3,opt,name=rot,proto3" json:"rot,omitempty"`
}

func (x *DigMarkPoint) Reset() {
	*x = DigMarkPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigMarkPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigMarkPoint) ProtoMessage() {}

func (x *DigMarkPoint) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigMarkPoint.ProtoReflect.Descriptor instead.
func (*DigMarkPoint) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{385}
}

func (x *DigMarkPoint) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *DigMarkPoint) GetBundleId() uint32 {
	if x != nil {
		return x.BundleId
	}
	return 0
}

func (x *DigMarkPoint) GetRot() *Vector {
	if x != nil {
		return x.Rot
	}
	return nil
}

type DigActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageIdList      []uint32        `protobuf:"varint,15,rep,packed,name=stage_id_list,json=stageIdList,proto3" json:"stage_id_list,omitempty"`
	DigMarkPointList []*DigMarkPoint `protobuf:"bytes,11,rep,name=dig_mark_point_list,json=digMarkPointList,proto3" json:"dig_mark_point_list,omitempty"`
	StageId          uint32          `protobuf:"varint,8,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *DigActivityDetailInfo) Reset() {
	*x = DigActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigActivityDetailInfo) ProtoMessage() {}

func (x *DigActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*DigActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{386}
}

func (x *DigActivityDetailInfo) GetStageIdList() []uint32 {
	if x != nil {
		return x.StageIdList
	}
	return nil
}

func (x *DigActivityDetailInfo) GetDigMarkPointList() []*DigMarkPoint {
	if x != nil {
		return x.DigMarkPointList
	}
	return nil
}

func (x *DigActivityDetailInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type DigActivityMarkPointChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigMarkPointList []*DigMarkPoint `protobuf:"bytes,11,rep,name=dig_mark_point_list,json=digMarkPointList,proto3" json:"dig_mark_point_list,omitempty"`
}

func (x *DigActivityMarkPointChangeNotify) Reset() {
	*x = DigActivityMarkPointChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigActivityMarkPointChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigActivityMarkPointChangeNotify) ProtoMessage() {}

func (x *DigActivityMarkPointChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigActivityMarkPointChangeNotify.ProtoReflect.Descriptor instead.
func (*DigActivityMarkPointChangeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{387}
}

func (x *DigActivityMarkPointChangeNotify) GetDigMarkPointList() []*DigMarkPoint {
	if x != nil {
		return x.DigMarkPointList
	}
	return nil
}

type DigActivityChangeGadgetStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId uint32 `protobuf:"varint,10,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (x *DigActivityChangeGadgetStateReq) Reset() {
	*x = DigActivityChangeGadgetStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigActivityChangeGadgetStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigActivityChangeGadgetStateReq) ProtoMessage() {}

func (x *DigActivityChangeGadgetStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigActivityChangeGadgetStateReq.ProtoReflect.Descriptor instead.
func (*DigActivityChangeGadgetStateReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{388}
}

func (x *DigActivityChangeGadgetStateReq) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

type DigActivityChangeGadgetStateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId uint32 `protobuf:"varint,15,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Retcode  int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DigActivityChangeGadgetStateRsp) Reset() {
	*x = DigActivityChangeGadgetStateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigActivityChangeGadgetStateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigActivityChangeGadgetStateRsp) ProtoMessage() {}

func (x *DigActivityChangeGadgetStateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigActivityChangeGadgetStateRsp.ProtoReflect.Descriptor instead.
func (*DigActivityChangeGadgetStateRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{389}
}

func (x *DigActivityChangeGadgetStateRsp) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *DigActivityChangeGadgetStateRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type HachiActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageMap map[uint32]*HachiStageInfo `protobuf:"bytes,6,rep,name=stage_map,json=stageMap,proto3" json:"stage_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HachiActivityDetailInfo) Reset() {
	*x = HachiActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HachiActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HachiActivityDetailInfo) ProtoMessage() {}

func (x *HachiActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HachiActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*HachiActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{390}
}

func (x *HachiActivityDetailInfo) GetStageMap() map[uint32]*HachiStageInfo {
	if x != nil {
		return x.StageMap
	}
	return nil
}

type HachiStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen     bool   `protobuf:"varint,8,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinished bool   `protobuf:"varint,12,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	OpenTime   uint32 `protobuf:"varint,5,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	StageId    uint32 `protobuf:"varint,14,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *HachiStageInfo) Reset() {
	*x = HachiStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HachiStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HachiStageInfo) ProtoMessage() {}

func (x *HachiStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HachiStageInfo.ProtoReflect.Descriptor instead.
func (*HachiStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{391}
}

func (x *HachiStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *HachiStageInfo) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *HachiStageInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *HachiStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type WinterCampStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurProgress   uint32  `protobuf:"varint,12,opt,name=cur_progress,json=curProgress,proto3" json:"cur_progress,omitempty"`
	Id            uint32  `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	OpenTime      uint32  `protobuf:"varint,8,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	IsFinished    bool    `protobuf:"varint,10,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	TotalProgress uint32  `protobuf:"varint,9,opt,name=total_progress,json=totalProgress,proto3" json:"total_progress,omitempty"`
	Pos           *Vector `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *WinterCampStageInfo) Reset() {
	*x = WinterCampStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampStageInfo) ProtoMessage() {}

func (x *WinterCampStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampStageInfo.ProtoReflect.Descriptor instead.
func (*WinterCampStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{392}
}

func (x *WinterCampStageInfo) GetCurProgress() uint32 {
	if x != nil {
		return x.CurProgress
	}
	return 0
}

func (x *WinterCampStageInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WinterCampStageInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *WinterCampStageInfo) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *WinterCampStageInfo) GetTotalProgress() uint32 {
	if x != nil {
		return x.TotalProgress
	}
	return 0
}

func (x *WinterCampStageInfo) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

type WinterCampRaceStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenTime uint32  `protobuf:"varint,5,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	Id       uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pos      *Vector `protobuf:"bytes,14,opt,name=pos,proto3" json:"pos,omitempty"`
	MaxScore uint32  `protobuf:"varint,2,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
}

func (x *WinterCampRaceStageInfo) Reset() {
	*x = WinterCampRaceStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampRaceStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampRaceStageInfo) ProtoMessage() {}

func (x *WinterCampRaceStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampRaceStageInfo.ProtoReflect.Descriptor instead.
func (*WinterCampRaceStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{393}
}

func (x *WinterCampRaceStageInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *WinterCampRaceStageInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WinterCampRaceStageInfo) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *WinterCampRaceStageInfo) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

type WinterCampActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaceInfoList           []*WinterCampRaceStageInfo `protobuf:"bytes,9,rep,name=race_info_list,json=raceInfoList,proto3" json:"race_info_list,omitempty"`
	BattleInfo             *WinterCampStageInfo       `protobuf:"bytes,10,opt,name=battle_info,json=battleInfo,proto3" json:"battle_info,omitempty"`
	WishIdList             []uint32                   `protobuf:"varint,8,rep,packed,name=wish_id_list,json=wishIdList,proto3" json:"wish_id_list,omitempty"`
	BattleTakenRewardList  []uint32                   `protobuf:"varint,14,rep,packed,name=battle_taken_reward_list,json=battleTakenRewardList,proto3" json:"battle_taken_reward_list,omitempty"`
	ExploreTakenRewardList []uint32                   `protobuf:"varint,6,rep,packed,name=explore_taken_reward_list,json=exploreTakenRewardList,proto3" json:"explore_taken_reward_list,omitempty"`
	IsContentClosed        bool                       `protobuf:"varint,15,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	ExploreInfo            *WinterCampStageInfo       `protobuf:"bytes,11,opt,name=explore_info,json=exploreInfo,proto3" json:"explore_info,omitempty"`
	UsedItemList           []*ItemParam               `protobuf:"bytes,2,rep,name=used_item_list,json=usedItemList,proto3" json:"used_item_list,omitempty"`
}

func (x *WinterCampActivityDetailInfo) Reset() {
	*x = WinterCampActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampActivityDetailInfo) ProtoMessage() {}

func (x *WinterCampActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*WinterCampActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{394}
}

func (x *WinterCampActivityDetailInfo) GetRaceInfoList() []*WinterCampRaceStageInfo {
	if x != nil {
		return x.RaceInfoList
	}
	return nil
}

func (x *WinterCampActivityDetailInfo) GetBattleInfo() *WinterCampStageInfo {
	if x != nil {
		return x.BattleInfo
	}
	return nil
}

func (x *WinterCampActivityDetailInfo) GetWishIdList() []uint32 {
	if x != nil {
		return x.WishIdList
	}
	return nil
}

func (x *WinterCampActivityDetailInfo) GetBattleTakenRewardList() []uint32 {
	if x != nil {
		return x.BattleTakenRewardList
	}
	return nil
}

func (x *WinterCampActivityDetailInfo) GetExploreTakenRewardList() []uint32 {
	if x != nil {
		return x.ExploreTakenRewardList
	}
	return nil
}

func (x *WinterCampActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *WinterCampActivityDetailInfo) GetExploreInfo() *WinterCampStageInfo {
	if x != nil {
		return x.ExploreInfo
	}
	return nil
}

func (x *WinterCampActivityDetailInfo) GetUsedItemList() []*ItemParam {
	if x != nil {
		return x.UsedItemList
	}
	return nil
}

type WinterCampStageInfoChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExploreInfo *WinterCampStageInfo `protobuf:"bytes,12,opt,name=explore_info,json=exploreInfo,proto3" json:"explore_info,omitempty"`
	BattleInfo  *WinterCampStageInfo `protobuf:"bytes,4,opt,name=battle_info,json=battleInfo,proto3" json:"battle_info,omitempty"`
}

func (x *WinterCampStageInfoChangeNotify) Reset() {
	*x = WinterCampStageInfoChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampStageInfoChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampStageInfoChangeNotify) ProtoMessage() {}

func (x *WinterCampStageInfoChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampStageInfoChangeNotify.ProtoReflect.Descriptor instead.
func (*WinterCampStageInfoChangeNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{395}
}

func (x *WinterCampStageInfoChangeNotify) GetExploreInfo() *WinterCampStageInfo {
	if x != nil {
		return x.ExploreInfo
	}
	return nil
}

func (x *WinterCampStageInfoChangeNotify) GetBattleInfo() *WinterCampStageInfo {
	if x != nil {
		return x.BattleInfo
	}
	return nil
}

type WinterCampRaceScoreNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	MaxScore uint32 `protobuf:"varint,14,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
}

func (x *WinterCampRaceScoreNotify) Reset() {
	*x = WinterCampRaceScoreNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampRaceScoreNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampRaceScoreNotify) ProtoMessage() {}

func (x *WinterCampRaceScoreNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampRaceScoreNotify.ProtoReflect.Descriptor instead.
func (*WinterCampRaceScoreNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{396}
}

func (x *WinterCampRaceScoreNotify) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WinterCampRaceScoreNotify) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

type WinterCampGiveFriendItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      uint32       `protobuf:"varint,12,opt,name=uid,proto3" json:"uid,omitempty"`
	ItemList []*ItemParam `protobuf:"bytes,11,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *WinterCampGiveFriendItemReq) Reset() {
	*x = WinterCampGiveFriendItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampGiveFriendItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampGiveFriendItemReq) ProtoMessage() {}

func (x *WinterCampGiveFriendItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampGiveFriendItemReq.ProtoReflect.Descriptor instead.
func (*WinterCampGiveFriendItemReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{397}
}

func (x *WinterCampGiveFriendItemReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *WinterCampGiveFriendItemReq) GetItemList() []*ItemParam {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type WinterCampGiveFriendItemRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitItemIdList []uint32 `protobuf:"varint,11,rep,packed,name=limit_item_id_list,json=limitItemIdList,proto3" json:"limit_item_id_list,omitempty"`
	Retcode         int32    `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *WinterCampGiveFriendItemRsp) Reset() {
	*x = WinterCampGiveFriendItemRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampGiveFriendItemRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampGiveFriendItemRsp) ProtoMessage() {}

func (x *WinterCampGiveFriendItemRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampGiveFriendItemRsp.ProtoReflect.Descriptor instead.
func (*WinterCampGiveFriendItemRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{398}
}

func (x *WinterCampGiveFriendItemRsp) GetLimitItemIdList() []uint32 {
	if x != nil {
		return x.LimitItemIdList
	}
	return nil
}

func (x *WinterCampGiveFriendItemRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type WinterCampSetWishListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemIdList []uint32 `protobuf:"varint,4,rep,packed,name=item_id_list,json=itemIdList,proto3" json:"item_id_list,omitempty"`
}

func (x *WinterCampSetWishListReq) Reset() {
	*x = WinterCampSetWishListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampSetWishListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampSetWishListReq) ProtoMessage() {}

func (x *WinterCampSetWishListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampSetWishListReq.ProtoReflect.Descriptor instead.
func (*WinterCampSetWishListReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{399}
}

func (x *WinterCampSetWishListReq) GetItemIdList() []uint32 {
	if x != nil {
		return x.ItemIdList
	}
	return nil
}

type WinterCampSetWishListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode    int32    `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ItemIdList []uint32 `protobuf:"varint,7,rep,packed,name=item_id_list,json=itemIdList,proto3" json:"item_id_list,omitempty"`
}

func (x *WinterCampSetWishListRsp) Reset() {
	*x = WinterCampSetWishListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampSetWishListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampSetWishListRsp) ProtoMessage() {}

func (x *WinterCampSetWishListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampSetWishListRsp.ProtoReflect.Descriptor instead.
func (*WinterCampSetWishListRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{400}
}

func (x *WinterCampSetWishListRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *WinterCampSetWishListRsp) GetItemIdList() []uint32 {
	if x != nil {
		return x.ItemIdList
	}
	return nil
}

type WinterCampFriendWishData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname       string          `protobuf:"bytes,14,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Uid            uint32          `protobuf:"varint,12,opt,name=uid,proto3" json:"uid,omitempty"`
	ProfilePicture *ProfilePicture `protobuf:"bytes,5,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	ItemIdList     []uint32        `protobuf:"varint,9,rep,packed,name=item_id_list,json=itemIdList,proto3" json:"item_id_list,omitempty"`
}

func (x *WinterCampFriendWishData) Reset() {
	*x = WinterCampFriendWishData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampFriendWishData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampFriendWishData) ProtoMessage() {}

func (x *WinterCampFriendWishData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampFriendWishData.ProtoReflect.Descriptor instead.
func (*WinterCampFriendWishData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{401}
}

func (x *WinterCampFriendWishData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *WinterCampFriendWishData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *WinterCampFriendWishData) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *WinterCampFriendWishData) GetItemIdList() []uint32 {
	if x != nil {
		return x.ItemIdList
	}
	return nil
}

type WinterCampGetFriendWishListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WinterCampGetFriendWishListReq) Reset() {
	*x = WinterCampGetFriendWishListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampGetFriendWishListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampGetFriendWishListReq) ProtoMessage() {}

func (x *WinterCampGetFriendWishListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampGetFriendWishListReq.ProtoReflect.Descriptor instead.
func (*WinterCampGetFriendWishListReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{402}
}

type WinterCampGetFriendWishListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode      int32                       `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
	WishDataList []*WinterCampFriendWishData `protobuf:"bytes,5,rep,name=wish_data_list,json=wishDataList,proto3" json:"wish_data_list,omitempty"`
}

func (x *WinterCampGetFriendWishListRsp) Reset() {
	*x = WinterCampGetFriendWishListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampGetFriendWishListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampGetFriendWishListRsp) ProtoMessage() {}

func (x *WinterCampGetFriendWishListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampGetFriendWishListRsp.ProtoReflect.Descriptor instead.
func (*WinterCampGetFriendWishListRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{403}
}

func (x *WinterCampGetFriendWishListRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *WinterCampGetFriendWishListRsp) GetWishDataList() []*WinterCampFriendWishData {
	if x != nil {
		return x.WishDataList
	}
	return nil
}

type WinterCampRecvItemNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecvItemData *WinterCampRecvItemData `protobuf:"bytes,14,opt,name=recv_item_data,json=recvItemData,proto3" json:"recv_item_data,omitempty"`
}

func (x *WinterCampRecvItemNotify) Reset() {
	*x = WinterCampRecvItemNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampRecvItemNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampRecvItemNotify) ProtoMessage() {}

func (x *WinterCampRecvItemNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampRecvItemNotify.ProtoReflect.Descriptor instead.
func (*WinterCampRecvItemNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{404}
}

func (x *WinterCampRecvItemNotify) GetRecvItemData() *WinterCampRecvItemData {
	if x != nil {
		return x.RecvItemData
	}
	return nil
}

type WinterCampAcceptItemResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptItemList   []*ItemParam `protobuf:"bytes,2,rep,name=accept_item_list,json=acceptItemList,proto3" json:"accept_item_list,omitempty"`
	Uid              uint32       `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	UnacceptItemList []*ItemParam `protobuf:"bytes,9,rep,name=unaccept_item_list,json=unacceptItemList,proto3" json:"unaccept_item_list,omitempty"`
}

func (x *WinterCampAcceptItemResultInfo) Reset() {
	*x = WinterCampAcceptItemResultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampAcceptItemResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampAcceptItemResultInfo) ProtoMessage() {}

func (x *WinterCampAcceptItemResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampAcceptItemResultInfo.ProtoReflect.Descriptor instead.
func (*WinterCampAcceptItemResultInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{405}
}

func (x *WinterCampAcceptItemResultInfo) GetAcceptItemList() []*ItemParam {
	if x != nil {
		return x.AcceptItemList
	}
	return nil
}

func (x *WinterCampAcceptItemResultInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *WinterCampAcceptItemResultInfo) GetUnacceptItemList() []*ItemParam {
	if x != nil {
		return x.UnacceptItemList
	}
	return nil
}

type WinterCampAcceptGiveItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint32 `protobuf:"varint,11,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *WinterCampAcceptGiveItemReq) Reset() {
	*x = WinterCampAcceptGiveItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampAcceptGiveItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampAcceptGiveItemReq) ProtoMessage() {}

func (x *WinterCampAcceptGiveItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampAcceptGiveItemReq.ProtoReflect.Descriptor instead.
func (*WinterCampAcceptGiveItemReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{406}
}

func (x *WinterCampAcceptGiveItemReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type WinterCampAcceptGiveItemRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode              int32                           `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
	AcceptItemResultInfo *WinterCampAcceptItemResultInfo `protobuf:"bytes,3,opt,name=accept_item_result_info,json=acceptItemResultInfo,proto3" json:"accept_item_result_info,omitempty"`
}

func (x *WinterCampAcceptGiveItemRsp) Reset() {
	*x = WinterCampAcceptGiveItemRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampAcceptGiveItemRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampAcceptGiveItemRsp) ProtoMessage() {}

func (x *WinterCampAcceptGiveItemRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampAcceptGiveItemRsp.ProtoReflect.Descriptor instead.
func (*WinterCampAcceptGiveItemRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{407}
}

func (x *WinterCampAcceptGiveItemRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *WinterCampAcceptGiveItemRsp) GetAcceptItemResultInfo() *WinterCampAcceptItemResultInfo {
	if x != nil {
		return x.AcceptItemResultInfo
	}
	return nil
}

type WinterCampAcceptAllGiveItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WinterCampAcceptAllGiveItemReq) Reset() {
	*x = WinterCampAcceptAllGiveItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampAcceptAllGiveItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampAcceptAllGiveItemReq) ProtoMessage() {}

func (x *WinterCampAcceptAllGiveItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampAcceptAllGiveItemReq.ProtoReflect.Descriptor instead.
func (*WinterCampAcceptAllGiveItemReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{408}
}

type WinterCampAcceptAllGiveItemRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode              int32                             `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	AcceptItemResultInfo []*WinterCampAcceptItemResultInfo `protobuf:"bytes,14,rep,name=accept_item_result_info,json=acceptItemResultInfo,proto3" json:"accept_item_result_info,omitempty"`
}

func (x *WinterCampAcceptAllGiveItemRsp) Reset() {
	*x = WinterCampAcceptAllGiveItemRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampAcceptAllGiveItemRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampAcceptAllGiveItemRsp) ProtoMessage() {}

func (x *WinterCampAcceptAllGiveItemRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampAcceptAllGiveItemRsp.ProtoReflect.Descriptor instead.
func (*WinterCampAcceptAllGiveItemRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{409}
}

func (x *WinterCampAcceptAllGiveItemRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *WinterCampAcceptAllGiveItemRsp) GetAcceptItemResultInfo() []*WinterCampAcceptItemResultInfo {
	if x != nil {
		return x.AcceptItemResultInfo
	}
	return nil
}

type WinterCampGetCanGiveFriendItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WinterCampGetCanGiveFriendItemReq) Reset() {
	*x = WinterCampGetCanGiveFriendItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampGetCanGiveFriendItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampGetCanGiveFriendItemReq) ProtoMessage() {}

func (x *WinterCampGetCanGiveFriendItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampGetCanGiveFriendItemReq.ProtoReflect.Descriptor instead.
func (*WinterCampGetCanGiveFriendItemReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{410}
}

type WinterCampGetCanGiveFriendItemRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemList []*ItemParam `protobuf:"bytes,8,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
	Retcode  int32        `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *WinterCampGetCanGiveFriendItemRsp) Reset() {
	*x = WinterCampGetCanGiveFriendItemRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampGetCanGiveFriendItemRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampGetCanGiveFriendItemRsp) ProtoMessage() {}

func (x *WinterCampGetCanGiveFriendItemRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampGetCanGiveFriendItemRsp.ProtoReflect.Descriptor instead.
func (*WinterCampGetCanGiveFriendItemRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{411}
}

func (x *WinterCampGetCanGiveFriendItemRsp) GetItemList() []*ItemParam {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *WinterCampGetCanGiveFriendItemRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type WinterCampRecvItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemList       []*ItemParam    `protobuf:"bytes,2,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
	Uid            uint32          `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty"`
	ProfilePicture *ProfilePicture `protobuf:"bytes,1,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	Nickname       string          `protobuf:"bytes,12,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *WinterCampRecvItemData) Reset() {
	*x = WinterCampRecvItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampRecvItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampRecvItemData) ProtoMessage() {}

func (x *WinterCampRecvItemData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampRecvItemData.ProtoReflect.Descriptor instead.
func (*WinterCampRecvItemData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{412}
}

func (x *WinterCampRecvItemData) GetItemList() []*ItemParam {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *WinterCampRecvItemData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *WinterCampRecvItemData) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *WinterCampRecvItemData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type WinterCampGetRecvItemListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WinterCampGetRecvItemListReq) Reset() {
	*x = WinterCampGetRecvItemListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampGetRecvItemListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampGetRecvItemListReq) ProtoMessage() {}

func (x *WinterCampGetRecvItemListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampGetRecvItemListReq.ProtoReflect.Descriptor instead.
func (*WinterCampGetRecvItemListReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{413}
}

type WinterCampGetRecvItemListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecvItemDataList []*WinterCampRecvItemData `protobuf:"bytes,8,rep,name=recv_item_data_list,json=recvItemDataList,proto3" json:"recv_item_data_list,omitempty"`
	Retcode          int32                     `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *WinterCampGetRecvItemListRsp) Reset() {
	*x = WinterCampGetRecvItemListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampGetRecvItemListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampGetRecvItemListRsp) ProtoMessage() {}

func (x *WinterCampGetRecvItemListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampGetRecvItemListRsp.ProtoReflect.Descriptor instead.
func (*WinterCampGetRecvItemListRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{414}
}

func (x *WinterCampGetRecvItemListRsp) GetRecvItemDataList() []*WinterCampRecvItemData {
	if x != nil {
		return x.RecvItemDataList
	}
	return nil
}

func (x *WinterCampGetRecvItemListRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type WinterCampEditSnowmanCombinationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId        uint32                `protobuf:"varint,9,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	CombinationInfo *CustomGadgetTreeInfo `protobuf:"bytes,6,opt,name=combination_info,json=combinationInfo,proto3" json:"combination_info,omitempty"`
}

func (x *WinterCampEditSnowmanCombinationReq) Reset() {
	*x = WinterCampEditSnowmanCombinationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampEditSnowmanCombinationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampEditSnowmanCombinationReq) ProtoMessage() {}

func (x *WinterCampEditSnowmanCombinationReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampEditSnowmanCombinationReq.ProtoReflect.Descriptor instead.
func (*WinterCampEditSnowmanCombinationReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{415}
}

func (x *WinterCampEditSnowmanCombinationReq) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *WinterCampEditSnowmanCombinationReq) GetCombinationInfo() *CustomGadgetTreeInfo {
	if x != nil {
		return x.CombinationInfo
	}
	return nil
}

type WinterCampEditSnowmanCombinationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *WinterCampEditSnowmanCombinationRsp) Reset() {
	*x = WinterCampEditSnowmanCombinationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampEditSnowmanCombinationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampEditSnowmanCombinationRsp) ProtoMessage() {}

func (x *WinterCampEditSnowmanCombinationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampEditSnowmanCombinationRsp.ProtoReflect.Descriptor instead.
func (*WinterCampEditSnowmanCombinationRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{416}
}

func (x *WinterCampEditSnowmanCombinationRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type WinterCampTriathlonSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitedCoin uint32 `protobuf:"varint,9,opt,name=limited_coin,json=limitedCoin,proto3" json:"limited_coin,omitempty"`
	NormalCoin  uint32 `protobuf:"varint,2,opt,name=normal_coin,json=normalCoin,proto3" json:"normal_coin,omitempty"`
	IsNewRecord bool   `protobuf:"varint,7,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	IsSuccess   bool   `protobuf:"varint,3,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	GalleryId   uint32 `protobuf:"varint,13,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	RemainTime  uint32 `protobuf:"varint,4,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"`
	Score       uint32 `protobuf:"varint,11,opt,name=score,proto3" json:"score,omitempty"`
	RaceId      uint32 `protobuf:"varint,15,opt,name=race_id,json=raceId,proto3" json:"race_id,omitempty"`
}

func (x *WinterCampTriathlonSettleNotify) Reset() {
	*x = WinterCampTriathlonSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampTriathlonSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampTriathlonSettleNotify) ProtoMessage() {}

func (x *WinterCampTriathlonSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampTriathlonSettleNotify.ProtoReflect.Descriptor instead.
func (*WinterCampTriathlonSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{417}
}

func (x *WinterCampTriathlonSettleNotify) GetLimitedCoin() uint32 {
	if x != nil {
		return x.LimitedCoin
	}
	return 0
}

func (x *WinterCampTriathlonSettleNotify) GetNormalCoin() uint32 {
	if x != nil {
		return x.NormalCoin
	}
	return 0
}

func (x *WinterCampTriathlonSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *WinterCampTriathlonSettleNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *WinterCampTriathlonSettleNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *WinterCampTriathlonSettleNotify) GetRemainTime() uint32 {
	if x != nil {
		return x.RemainTime
	}
	return 0
}

func (x *WinterCampTriathlonSettleNotify) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *WinterCampTriathlonSettleNotify) GetRaceId() uint32 {
	if x != nil {
		return x.RaceId
	}
	return 0
}

type WinterCampTakeExploreRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WinterCampTakeExploreRewardReq) Reset() {
	*x = WinterCampTakeExploreRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampTakeExploreRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampTakeExploreRewardReq) ProtoMessage() {}

func (x *WinterCampTakeExploreRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampTakeExploreRewardReq.ProtoReflect.Descriptor instead.
func (*WinterCampTakeExploreRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{418}
}

func (x *WinterCampTakeExploreRewardReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WinterCampTakeExploreRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	Id      uint32 `protobuf:"varint,15,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WinterCampTakeExploreRewardRsp) Reset() {
	*x = WinterCampTakeExploreRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampTakeExploreRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampTakeExploreRewardRsp) ProtoMessage() {}

func (x *WinterCampTakeExploreRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampTakeExploreRewardRsp.ProtoReflect.Descriptor instead.
func (*WinterCampTakeExploreRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{419}
}

func (x *WinterCampTakeExploreRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *WinterCampTakeExploreRewardRsp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WinterCampTakeBattleRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WinterCampTakeBattleRewardReq) Reset() {
	*x = WinterCampTakeBattleRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampTakeBattleRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampTakeBattleRewardReq) ProtoMessage() {}

func (x *WinterCampTakeBattleRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampTakeBattleRewardReq.ProtoReflect.Descriptor instead.
func (*WinterCampTakeBattleRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{420}
}

func (x *WinterCampTakeBattleRewardReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WinterCampTakeBattleRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	Id      uint32 `protobuf:"varint,15,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WinterCampTakeBattleRewardRsp) Reset() {
	*x = WinterCampTakeBattleRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampTakeBattleRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampTakeBattleRewardRsp) ProtoMessage() {}

func (x *WinterCampTakeBattleRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampTakeBattleRewardRsp.ProtoReflect.Descriptor instead.
func (*WinterCampTakeBattleRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{421}
}

func (x *WinterCampTakeBattleRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *WinterCampTakeBattleRewardRsp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WinterCampTriathlonRestartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,6,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *WinterCampTriathlonRestartReq) Reset() {
	*x = WinterCampTriathlonRestartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampTriathlonRestartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampTriathlonRestartReq) ProtoMessage() {}

func (x *WinterCampTriathlonRestartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampTriathlonRestartReq.ProtoReflect.Descriptor instead.
func (*WinterCampTriathlonRestartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{422}
}

func (x *WinterCampTriathlonRestartReq) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type WinterCampTriathlonRestartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GalleryId uint32 `protobuf:"varint,14,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *WinterCampTriathlonRestartRsp) Reset() {
	*x = WinterCampTriathlonRestartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinterCampTriathlonRestartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinterCampTriathlonRestartRsp) ProtoMessage() {}

func (x *WinterCampTriathlonRestartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinterCampTriathlonRestartRsp.ProtoReflect.Descriptor instead.
func (*WinterCampTriathlonRestartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{423}
}

func (x *WinterCampTriathlonRestartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *WinterCampTriathlonRestartRsp) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type MistTrialSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestAvatarList              []*MistTrialBestAvatar `protobuf:"bytes,2,rep,name=best_avatar_list,json=bestAvatarList,proto3" json:"best_avatar_list,omitempty"`
	ExhibitionListDataResultMap map[uint32]uint32      `protobuf:"bytes,14,rep,name=exhibition_list_data_result_map,json=exhibitionListDataResultMap,proto3" json:"exhibition_list_data_result_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BestHitAvatar               *MistTrialBestAvatar   `protobuf:"bytes,4,opt,name=best_hit_avatar,json=bestHitAvatar,proto3" json:"best_hit_avatar,omitempty"`
	FirstPassTime               uint32                 `protobuf:"varint,7,opt,name=first_pass_time,json=firstPassTime,proto3" json:"first_pass_time,omitempty"`
	ExhibitionListDataRecordMap map[uint32]uint32      `protobuf:"bytes,15,rep,name=exhibition_list_data_record_map,json=exhibitionListDataRecordMap,proto3" json:"exhibition_list_data_record_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DungeonSceneId              uint32                 `protobuf:"varint,5,opt,name=dungeon_scene_id,json=dungeonSceneId,proto3" json:"dungeon_scene_id,omitempty"`
}

func (x *MistTrialSettleNotify) Reset() {
	*x = MistTrialSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialSettleNotify) ProtoMessage() {}

func (x *MistTrialSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialSettleNotify.ProtoReflect.Descriptor instead.
func (*MistTrialSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{424}
}

func (x *MistTrialSettleNotify) GetBestAvatarList() []*MistTrialBestAvatar {
	if x != nil {
		return x.BestAvatarList
	}
	return nil
}

func (x *MistTrialSettleNotify) GetExhibitionListDataResultMap() map[uint32]uint32 {
	if x != nil {
		return x.ExhibitionListDataResultMap
	}
	return nil
}

func (x *MistTrialSettleNotify) GetBestHitAvatar() *MistTrialBestAvatar {
	if x != nil {
		return x.BestHitAvatar
	}
	return nil
}

func (x *MistTrialSettleNotify) GetFirstPassTime() uint32 {
	if x != nil {
		return x.FirstPassTime
	}
	return 0
}

func (x *MistTrialSettleNotify) GetExhibitionListDataRecordMap() map[uint32]uint32 {
	if x != nil {
		return x.ExhibitionListDataRecordMap
	}
	return nil
}

func (x *MistTrialSettleNotify) GetDungeonSceneId() uint32 {
	if x != nil {
		return x.DungeonSceneId
	}
	return 0
}

type MistTrialGetDungeonExhibitionDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialId uint32 `protobuf:"varint,13,opt,name=trial_id,json=trialId,proto3" json:"trial_id,omitempty"`
}

func (x *MistTrialGetDungeonExhibitionDataReq) Reset() {
	*x = MistTrialGetDungeonExhibitionDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialGetDungeonExhibitionDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialGetDungeonExhibitionDataReq) ProtoMessage() {}

func (x *MistTrialGetDungeonExhibitionDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialGetDungeonExhibitionDataReq.ProtoReflect.Descriptor instead.
func (*MistTrialGetDungeonExhibitionDataReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{425}
}

func (x *MistTrialGetDungeonExhibitionDataReq) GetTrialId() uint32 {
	if x != nil {
		return x.TrialId
	}
	return 0
}

type MistTrialGetDungeonExhibitionDataRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialId uint32 `protobuf:"varint,12,opt,name=trial_id,json=trialId,proto3" json:"trial_id,omitempty"`
	Retcode int32  `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *MistTrialGetDungeonExhibitionDataRsp) Reset() {
	*x = MistTrialGetDungeonExhibitionDataRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialGetDungeonExhibitionDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialGetDungeonExhibitionDataRsp) ProtoMessage() {}

func (x *MistTrialGetDungeonExhibitionDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialGetDungeonExhibitionDataRsp.ProtoReflect.Descriptor instead.
func (*MistTrialGetDungeonExhibitionDataRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{426}
}

func (x *MistTrialGetDungeonExhibitionDataRsp) GetTrialId() uint32 {
	if x != nil {
		return x.TrialId
	}
	return 0
}

func (x *MistTrialGetDungeonExhibitionDataRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type PotionLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId         uint32 `protobuf:"varint,10,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Score           uint32 `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	ModeId          uint32 `protobuf:"varint,5,opt,name=mode_id,json=modeId,proto3" json:"mode_id,omitempty"`
	DifficultyLevel uint32 `protobuf:"varint,2,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
}

func (x *PotionLevelData) Reset() {
	*x = PotionLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionLevelData) ProtoMessage() {}

func (x *PotionLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionLevelData.ProtoReflect.Descriptor instead.
func (*PotionLevelData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{427}
}

func (x *PotionLevelData) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *PotionLevelData) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PotionLevelData) GetModeId() uint32 {
	if x != nil {
		return x.ModeId
	}
	return 0
}

func (x *PotionLevelData) GetDifficultyLevel() uint32 {
	if x != nil {
		return x.DifficultyLevel
	}
	return 0
}

type PotionStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId              uint32             `protobuf:"varint,11,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	CoolDownBuffIdList   []uint32           `protobuf:"varint,2,rep,packed,name=cool_down_buff_id_list,json=coolDownBuffIdList,proto3" json:"cool_down_buff_id_list,omitempty"`
	IsOpen               bool               `protobuf:"varint,15,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	LevelList            []*PotionLevelData `protobuf:"bytes,14,rep,name=level_list,json=levelList,proto3" json:"level_list,omitempty"`
	CoolDownAvatarIdList []uint32           `protobuf:"varint,13,rep,packed,name=cool_down_avatar_id_list,json=coolDownAvatarIdList,proto3" json:"cool_down_avatar_id_list,omitempty"`
}

func (x *PotionStageData) Reset() {
	*x = PotionStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionStageData) ProtoMessage() {}

func (x *PotionStageData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionStageData.ProtoReflect.Descriptor instead.
func (*PotionStageData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{428}
}

func (x *PotionStageData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *PotionStageData) GetCoolDownBuffIdList() []uint32 {
	if x != nil {
		return x.CoolDownBuffIdList
	}
	return nil
}

func (x *PotionStageData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *PotionStageData) GetLevelList() []*PotionLevelData {
	if x != nil {
		return x.LevelList
	}
	return nil
}

func (x *PotionStageData) GetCoolDownAvatarIdList() []uint32 {
	if x != nil {
		return x.CoolDownAvatarIdList
	}
	return nil
}

type PotionActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageList []*PotionStageData `protobuf:"bytes,10,rep,name=stage_list,json=stageList,proto3" json:"stage_list,omitempty"`
}

func (x *PotionActivityDetailInfo) Reset() {
	*x = PotionActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionActivityDetailInfo) ProtoMessage() {}

func (x *PotionActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*PotionActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{429}
}

func (x *PotionActivityDetailInfo) GetStageList() []*PotionStageData {
	if x != nil {
		return x.StageList
	}
	return nil
}

type PotionResetChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *PotionResetChallengeReq) Reset() {
	*x = PotionResetChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionResetChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionResetChallengeReq) ProtoMessage() {}

func (x *PotionResetChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionResetChallengeReq.ProtoReflect.Descriptor instead.
func (*PotionResetChallengeReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{430}
}

func (x *PotionResetChallengeReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type PotionResetChallengeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32            `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	StageData *PotionStageData `protobuf:"bytes,14,opt,name=stage_data,json=stageData,proto3" json:"stage_data,omitempty"`
}

func (x *PotionResetChallengeRsp) Reset() {
	*x = PotionResetChallengeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionResetChallengeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionResetChallengeRsp) ProtoMessage() {}

func (x *PotionResetChallengeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionResetChallengeRsp.ProtoReflect.Descriptor instead.
func (*PotionResetChallengeRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{431}
}

func (x *PotionResetChallengeRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PotionResetChallengeRsp) GetStageData() *PotionStageData {
	if x != nil {
		return x.StageData
	}
	return nil
}

type PotionAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTrial  bool   `protobuf:"varint,6,opt,name=is_trial,json=isTrial,proto3" json:"is_trial,omitempty"`
	AvatarId uint64 `protobuf:"varint,8,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *PotionAvatarInfo) Reset() {
	*x = PotionAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionAvatarInfo) ProtoMessage() {}

func (x *PotionAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionAvatarInfo.ProtoReflect.Descriptor instead.
func (*PotionAvatarInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{432}
}

func (x *PotionAvatarInfo) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

func (x *PotionAvatarInfo) GetAvatarId() uint64 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type PotionEnterDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffIdList     []uint32            `protobuf:"varint,15,rep,packed,name=buff_id_list,json=buffIdList,proto3" json:"buff_id_list,omitempty"`
	LevelId        uint32              `protobuf:"varint,5,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	AvatarInfoList []*PotionAvatarInfo `protobuf:"bytes,14,rep,name=avatar_info_list,json=avatarInfoList,proto3" json:"avatar_info_list,omitempty"`
	ModeId         uint32              `protobuf:"varint,2,opt,name=mode_id,json=modeId,proto3" json:"mode_id,omitempty"`
	StageId        uint32              `protobuf:"varint,13,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *PotionEnterDungeonReq) Reset() {
	*x = PotionEnterDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionEnterDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionEnterDungeonReq) ProtoMessage() {}

func (x *PotionEnterDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionEnterDungeonReq.ProtoReflect.Descriptor instead.
func (*PotionEnterDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{433}
}

func (x *PotionEnterDungeonReq) GetBuffIdList() []uint32 {
	if x != nil {
		return x.BuffIdList
	}
	return nil
}

func (x *PotionEnterDungeonReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *PotionEnterDungeonReq) GetAvatarInfoList() []*PotionAvatarInfo {
	if x != nil {
		return x.AvatarInfoList
	}
	return nil
}

func (x *PotionEnterDungeonReq) GetModeId() uint32 {
	if x != nil {
		return x.ModeId
	}
	return 0
}

func (x *PotionEnterDungeonReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type PotionEnterDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *PotionEnterDungeonRsp) Reset() {
	*x = PotionEnterDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionEnterDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionEnterDungeonRsp) ProtoMessage() {}

func (x *PotionEnterDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionEnterDungeonRsp.ProtoReflect.Descriptor instead.
func (*PotionEnterDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{434}
}

func (x *PotionEnterDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type PotionDungeonAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarGuid uint64 `protobuf:"varint,8,opt,name=avatar_guid,json=avatarGuid,proto3" json:"avatar_guid,omitempty"`
	IsTrial    bool   `protobuf:"varint,2,opt,name=is_trial,json=isTrial,proto3" json:"is_trial,omitempty"`
}

func (x *PotionDungeonAvatar) Reset() {
	*x = PotionDungeonAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionDungeonAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionDungeonAvatar) ProtoMessage() {}

func (x *PotionDungeonAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionDungeonAvatar.ProtoReflect.Descriptor instead.
func (*PotionDungeonAvatar) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{435}
}

func (x *PotionDungeonAvatar) GetAvatarGuid() uint64 {
	if x != nil {
		return x.AvatarGuid
	}
	return 0
}

func (x *PotionDungeonAvatar) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

type PotionEnterDungeonNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId           uint32                 `protobuf:"varint,13,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	DifficultyLevel   uint32                 `protobuf:"varint,7,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	DungeonAvatarList []*PotionDungeonAvatar `protobuf:"bytes,6,rep,name=dungeon_avatar_list,json=dungeonAvatarList,proto3" json:"dungeon_avatar_list,omitempty"`
	LevelId           uint32                 `protobuf:"varint,8,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	ModeId            uint32                 `protobuf:"varint,5,opt,name=mode_id,json=modeId,proto3" json:"mode_id,omitempty"`
}

func (x *PotionEnterDungeonNotify) Reset() {
	*x = PotionEnterDungeonNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionEnterDungeonNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionEnterDungeonNotify) ProtoMessage() {}

func (x *PotionEnterDungeonNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionEnterDungeonNotify.ProtoReflect.Descriptor instead.
func (*PotionEnterDungeonNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{436}
}

func (x *PotionEnterDungeonNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *PotionEnterDungeonNotify) GetDifficultyLevel() uint32 {
	if x != nil {
		return x.DifficultyLevel
	}
	return 0
}

func (x *PotionEnterDungeonNotify) GetDungeonAvatarList() []*PotionDungeonAvatar {
	if x != nil {
		return x.DungeonAvatarList
	}
	return nil
}

func (x *PotionEnterDungeonNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *PotionEnterDungeonNotify) GetModeId() uint32 {
	if x != nil {
		return x.ModeId
	}
	return 0
}

type PotionSaveDungeonResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,8,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	StageId uint32 `protobuf:"varint,7,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *PotionSaveDungeonResultReq) Reset() {
	*x = PotionSaveDungeonResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionSaveDungeonResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionSaveDungeonResultReq) ProtoMessage() {}

func (x *PotionSaveDungeonResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionSaveDungeonResultReq.ProtoReflect.Descriptor instead.
func (*PotionSaveDungeonResultReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{437}
}

func (x *PotionSaveDungeonResultReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *PotionSaveDungeonResultReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type PotionSaveDungeonResultRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *PotionSaveDungeonResultRsp) Reset() {
	*x = PotionSaveDungeonResultRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionSaveDungeonResultRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionSaveDungeonResultRsp) ProtoMessage() {}

func (x *PotionSaveDungeonResultRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionSaveDungeonResultRsp.ProtoReflect.Descriptor instead.
func (*PotionSaveDungeonResultRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{438}
}

func (x *PotionSaveDungeonResultRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type PotionRestartDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PotionRestartDungeonReq) Reset() {
	*x = PotionRestartDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionRestartDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionRestartDungeonReq) ProtoMessage() {}

func (x *PotionRestartDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionRestartDungeonReq.ProtoReflect.Descriptor instead.
func (*PotionRestartDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{439}
}

type PotionRestartDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *PotionRestartDungeonRsp) Reset() {
	*x = PotionRestartDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionRestartDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionRestartDungeonRsp) ProtoMessage() {}

func (x *PotionRestartDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionRestartDungeonRsp.ProtoReflect.Descriptor instead.
func (*PotionRestartDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{440}
}

func (x *PotionRestartDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type PotionDungeonResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinalScore      uint32 `protobuf:"varint,8,opt,name=final_score,json=finalScore,proto3" json:"final_score,omitempty"`
	LeftTime        uint32 `protobuf:"varint,9,opt,name=left_time,json=leftTime,proto3" json:"left_time,omitempty"`
	DifficultyLevel uint32 `protobuf:"varint,14,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	ModeId          uint32 `protobuf:"varint,11,opt,name=mode_id,json=modeId,proto3" json:"mode_id,omitempty"`
	LevelId         uint32 `protobuf:"varint,4,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	StageId         uint32 `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *PotionDungeonResultInfo) Reset() {
	*x = PotionDungeonResultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionDungeonResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionDungeonResultInfo) ProtoMessage() {}

func (x *PotionDungeonResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionDungeonResultInfo.ProtoReflect.Descriptor instead.
func (*PotionDungeonResultInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{441}
}

func (x *PotionDungeonResultInfo) GetFinalScore() uint32 {
	if x != nil {
		return x.FinalScore
	}
	return 0
}

func (x *PotionDungeonResultInfo) GetLeftTime() uint32 {
	if x != nil {
		return x.LeftTime
	}
	return 0
}

func (x *PotionDungeonResultInfo) GetDifficultyLevel() uint32 {
	if x != nil {
		return x.DifficultyLevel
	}
	return 0
}

func (x *PotionDungeonResultInfo) GetModeId() uint32 {
	if x != nil {
		return x.ModeId
	}
	return 0
}

func (x *PotionDungeonResultInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *PotionDungeonResultInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type TanukiTravelLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen   bool   `protobuf:"varint,5,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	RouteId  uint32 `protobuf:"varint,9,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	IsFinish bool   `protobuf:"varint,15,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
}

func (x *TanukiTravelLevelData) Reset() {
	*x = TanukiTravelLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TanukiTravelLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TanukiTravelLevelData) ProtoMessage() {}

func (x *TanukiTravelLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TanukiTravelLevelData.ProtoReflect.Descriptor instead.
func (*TanukiTravelLevelData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{442}
}

func (x *TanukiTravelLevelData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *TanukiTravelLevelData) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *TanukiTravelLevelData) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type TanukiTravelActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TanukiTravelLevelDataList []*TanukiTravelLevelData `protobuf:"bytes,4,rep,name=tanuki_travel_level_data_list,json=tanukiTravelLevelDataList,proto3" json:"tanuki_travel_level_data_list,omitempty"`
	IsContentClosed           bool                     `protobuf:"varint,11,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	FinishedLevelIndex        uint32                   `protobuf:"varint,10,opt,name=finished_level_index,json=finishedLevelIndex,proto3" json:"finished_level_index,omitempty"`
}

func (x *TanukiTravelActivityDetailInfo) Reset() {
	*x = TanukiTravelActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TanukiTravelActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TanukiTravelActivityDetailInfo) ProtoMessage() {}

func (x *TanukiTravelActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TanukiTravelActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*TanukiTravelActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{443}
}

func (x *TanukiTravelActivityDetailInfo) GetTanukiTravelLevelDataList() []*TanukiTravelLevelData {
	if x != nil {
		return x.TanukiTravelLevelDataList
	}
	return nil
}

func (x *TanukiTravelActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *TanukiTravelActivityDetailInfo) GetFinishedLevelIndex() uint32 {
	if x != nil {
		return x.FinishedLevelIndex
	}
	return 0
}

type TanukiTravelFinishGuideQuestNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32 `protobuf:"varint,14,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *TanukiTravelFinishGuideQuestNotify) Reset() {
	*x = TanukiTravelFinishGuideQuestNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TanukiTravelFinishGuideQuestNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TanukiTravelFinishGuideQuestNotify) ProtoMessage() {}

func (x *TanukiTravelFinishGuideQuestNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TanukiTravelFinishGuideQuestNotify.ProtoReflect.Descriptor instead.
func (*TanukiTravelFinishGuideQuestNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{444}
}

func (x *TanukiTravelFinishGuideQuestNotify) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type LanternProjectionLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinFinishTime uint32 `protobuf:"varint,1,opt,name=min_finish_time,json=minFinishTime,proto3" json:"min_finish_time,omitempty"`
	Id            uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	IsFinished    bool   `protobuf:"varint,7,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	IsCanStart    bool   `protobuf:"varint,9,opt,name=is_can_start,json=isCanStart,proto3" json:"is_can_start,omitempty"`
	IsShowTips    bool   `protobuf:"varint,10,opt,name=is_show_tips,json=isShowTips,proto3" json:"is_show_tips,omitempty"`
}

func (x *LanternProjectionLevelInfo) Reset() {
	*x = LanternProjectionLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternProjectionLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternProjectionLevelInfo) ProtoMessage() {}

func (x *LanternProjectionLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternProjectionLevelInfo.ProtoReflect.Descriptor instead.
func (*LanternProjectionLevelInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{445}
}

func (x *LanternProjectionLevelInfo) GetMinFinishTime() uint32 {
	if x != nil {
		return x.MinFinishTime
	}
	return 0
}

func (x *LanternProjectionLevelInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LanternProjectionLevelInfo) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *LanternProjectionLevelInfo) GetIsCanStart() bool {
	if x != nil {
		return x.IsCanStart
	}
	return false
}

func (x *LanternProjectionLevelInfo) GetIsShowTips() bool {
	if x != nil {
		return x.IsShowTips
	}
	return false
}

type LanternProjectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewSwitchTipsList []ClientInputType             `protobuf:"varint,12,rep,packed,name=view_switch_tips_list,json=viewSwitchTipsList,proto3,enum=proto.ClientInputType" json:"view_switch_tips_list,omitempty"`
	LevelList          []*LanternProjectionLevelInfo `protobuf:"bytes,6,rep,name=level_list,json=levelList,proto3" json:"level_list,omitempty"`
	OpenStageList      []uint32                      `protobuf:"varint,10,rep,packed,name=open_stage_list,json=openStageList,proto3" json:"open_stage_list,omitempty"`
	ViewInputTipsList  []ClientInputType             `protobuf:"varint,13,rep,packed,name=view_input_tips_list,json=viewInputTipsList,proto3,enum=proto.ClientInputType" json:"view_input_tips_list,omitempty"`
}

func (x *LanternProjectionInfo) Reset() {
	*x = LanternProjectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternProjectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternProjectionInfo) ProtoMessage() {}

func (x *LanternProjectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternProjectionInfo.ProtoReflect.Descriptor instead.
func (*LanternProjectionInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{446}
}

func (x *LanternProjectionInfo) GetViewSwitchTipsList() []ClientInputType {
	if x != nil {
		return x.ViewSwitchTipsList
	}
	return nil
}

func (x *LanternProjectionInfo) GetLevelList() []*LanternProjectionLevelInfo {
	if x != nil {
		return x.LevelList
	}
	return nil
}

func (x *LanternProjectionInfo) GetOpenStageList() []uint32 {
	if x != nil {
		return x.OpenStageList
	}
	return nil
}

func (x *LanternProjectionInfo) GetViewInputTipsList() []ClientInputType {
	if x != nil {
		return x.ViewInputTipsList
	}
	return nil
}

type SalvageBundleChallengeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishedBundleList []uint32 `protobuf:"varint,13,rep,packed,name=finished_bundle_list,json=finishedBundleList,proto3" json:"finished_bundle_list,omitempty"`
}

func (x *SalvageBundleChallengeInfo) Reset() {
	*x = SalvageBundleChallengeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvageBundleChallengeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvageBundleChallengeInfo) ProtoMessage() {}

func (x *SalvageBundleChallengeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvageBundleChallengeInfo.ProtoReflect.Descriptor instead.
func (*SalvageBundleChallengeInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{447}
}

func (x *SalvageBundleChallengeInfo) GetFinishedBundleList() []uint32 {
	if x != nil {
		return x.FinishedBundleList
	}
	return nil
}

type SalvageScoreChallengeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalvageChallengeId uint32 `protobuf:"varint,13,opt,name=salvage_challenge_id,json=salvageChallengeId,proto3" json:"salvage_challenge_id,omitempty"`
	MaxScore           uint32 `protobuf:"varint,7,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
}

func (x *SalvageScoreChallengeInfo) Reset() {
	*x = SalvageScoreChallengeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvageScoreChallengeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvageScoreChallengeInfo) ProtoMessage() {}

func (x *SalvageScoreChallengeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvageScoreChallengeInfo.ProtoReflect.Descriptor instead.
func (*SalvageScoreChallengeInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{448}
}

func (x *SalvageScoreChallengeInfo) GetSalvageChallengeId() uint32 {
	if x != nil {
		return x.SalvageChallengeId
	}
	return 0
}

func (x *SalvageScoreChallengeInfo) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

type SalvageChallengeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeType uint32 `protobuf:"varint,5,opt,name=challenge_type,json=challengeType,proto3" json:"challenge_type,omitempty"`
	IsUnlock      bool   `protobuf:"varint,12,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
	// Types that are assignable to ChallengeDetail:
	//
	//	*SalvageChallengeInfo_BundleInfo
	//	*SalvageChallengeInfo_ScoreChallengeInfo
	//	*SalvageChallengeInfo_BossChallengeId
	ChallengeDetail isSalvageChallengeInfo_ChallengeDetail `protobuf_oneof:"challenge_detail"`
}

func (x *SalvageChallengeInfo) Reset() {
	*x = SalvageChallengeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvageChallengeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvageChallengeInfo) ProtoMessage() {}

func (x *SalvageChallengeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvageChallengeInfo.ProtoReflect.Descriptor instead.
func (*SalvageChallengeInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{449}
}

func (x *SalvageChallengeInfo) GetChallengeType() uint32 {
	if x != nil {
		return x.ChallengeType
	}
	return 0
}

func (x *SalvageChallengeInfo) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

func (m *SalvageChallengeInfo) GetChallengeDetail() isSalvageChallengeInfo_ChallengeDetail {
	if m != nil {
		return m.ChallengeDetail
	}
	return nil
}

func (x *SalvageChallengeInfo) GetBundleInfo() *SalvageBundleChallengeInfo {
	if x, ok := x.GetChallengeDetail().(*SalvageChallengeInfo_BundleInfo); ok {
		return x.BundleInfo
	}
	return nil
}

func (x *SalvageChallengeInfo) GetScoreChallengeInfo() *SalvageScoreChallengeInfo {
	if x, ok := x.GetChallengeDetail().(*SalvageChallengeInfo_ScoreChallengeInfo); ok {
		return x.ScoreChallengeInfo
	}
	return nil
}

func (x *SalvageChallengeInfo) GetBossChallengeId() uint32 {
	if x, ok := x.GetChallengeDetail().(*SalvageChallengeInfo_BossChallengeId); ok {
		return x.BossChallengeId
	}
	return 0
}

type isSalvageChallengeInfo_ChallengeDetail interface {
	isSalvageChallengeInfo_ChallengeDetail()
}

type SalvageChallengeInfo_BundleInfo struct {
	BundleInfo *SalvageBundleChallengeInfo `protobuf:"bytes,11,opt,name=bundle_info,json=bundleInfo,proto3,oneof"`
}

type SalvageChallengeInfo_ScoreChallengeInfo struct {
	ScoreChallengeInfo *SalvageScoreChallengeInfo `protobuf:"bytes,13,opt,name=score_challenge_info,json=scoreChallengeInfo,proto3,oneof"`
}

type SalvageChallengeInfo_BossChallengeId struct {
	BossChallengeId uint32 `protobuf:"varint,2,opt,name=boss_challenge_id,json=bossChallengeId,proto3,oneof"`
}

func (*SalvageChallengeInfo_BundleInfo) isSalvageChallengeInfo_ChallengeDetail() {}

func (*SalvageChallengeInfo_ScoreChallengeInfo) isSalvageChallengeInfo_ChallengeDetail() {}

func (*SalvageChallengeInfo_BossChallengeId) isSalvageChallengeInfo_ChallengeDetail() {}

type SalvageStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeInfoList []*SalvageChallengeInfo `protobuf:"bytes,9,rep,name=challenge_info_list,json=challengeInfoList,proto3" json:"challenge_info_list,omitempty"`
	IsOpen            bool                    `protobuf:"varint,10,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	StageId           uint32                  `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *SalvageStageInfo) Reset() {
	*x = SalvageStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvageStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvageStageInfo) ProtoMessage() {}

func (x *SalvageStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvageStageInfo.ProtoReflect.Descriptor instead.
func (*SalvageStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{450}
}

func (x *SalvageStageInfo) GetChallengeInfoList() []*SalvageChallengeInfo {
	if x != nil {
		return x.ChallengeInfoList
	}
	return nil
}

func (x *SalvageStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SalvageStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type LanternRiteFireworksChallengeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFullScore bool   `protobuf:"varint,13,opt,name=is_full_score,json=isFullScore,proto3" json:"is_full_score,omitempty"`
	BestScore   uint32 `protobuf:"varint,7,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
	ChallengeId uint32 `protobuf:"varint,3,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *LanternRiteFireworksChallengeInfo) Reset() {
	*x = LanternRiteFireworksChallengeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteFireworksChallengeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteFireworksChallengeInfo) ProtoMessage() {}

func (x *LanternRiteFireworksChallengeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteFireworksChallengeInfo.ProtoReflect.Descriptor instead.
func (*LanternRiteFireworksChallengeInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{451}
}

func (x *LanternRiteFireworksChallengeInfo) GetIsFullScore() bool {
	if x != nil {
		return x.IsFullScore
	}
	return false
}

func (x *LanternRiteFireworksChallengeInfo) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

func (x *LanternRiteFireworksChallengeInfo) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type LanternRiteFireworksStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen            bool                                 `protobuf:"varint,8,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	ChallengeInfoList []*LanternRiteFireworksChallengeInfo `protobuf:"bytes,9,rep,name=challenge_info_list,json=challengeInfoList,proto3" json:"challenge_info_list,omitempty"`
	StageId           uint32                               `protobuf:"varint,15,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *LanternRiteFireworksStageInfo) Reset() {
	*x = LanternRiteFireworksStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteFireworksStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteFireworksStageInfo) ProtoMessage() {}

func (x *LanternRiteFireworksStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteFireworksStageInfo.ProtoReflect.Descriptor instead.
func (*LanternRiteFireworksStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{452}
}

func (x *LanternRiteFireworksStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *LanternRiteFireworksStageInfo) GetChallengeInfoList() []*LanternRiteFireworksChallengeInfo {
	if x != nil {
		return x.ChallengeInfoList
	}
	return nil
}

func (x *LanternRiteFireworksStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type LanternRiteFireworksInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageInfoList []*LanternRiteFireworksStageInfo `protobuf:"bytes,6,rep,name=stage_info_list,json=stageInfoList,proto3" json:"stage_info_list,omitempty"`
}

func (x *LanternRiteFireworksInfo) Reset() {
	*x = LanternRiteFireworksInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteFireworksInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteFireworksInfo) ProtoMessage() {}

func (x *LanternRiteFireworksInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteFireworksInfo.ProtoReflect.Descriptor instead.
func (*LanternRiteFireworksInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{453}
}

func (x *LanternRiteFireworksInfo) GetStageInfoList() []*LanternRiteFireworksStageInfo {
	if x != nil {
		return x.StageInfoList
	}
	return nil
}

type LanternRiteActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectionInfo            *LanternProjectionInfo    `protobuf:"bytes,13,opt,name=projection_info,json=projectionInfo,proto3" json:"projection_info,omitempty"`
	StageInfoList             []*SalvageStageInfo       `protobuf:"bytes,5,rep,name=stage_info_list,json=stageInfoList,proto3" json:"stage_info_list,omitempty"`
	FireworksInfo             *LanternRiteFireworksInfo `protobuf:"bytes,8,opt,name=fireworks_info,json=fireworksInfo,proto3" json:"fireworks_info,omitempty"`
	IsMiniEldritchDungeonOpen bool                      `protobuf:"varint,2,opt,name=is_mini_eldritch_dungeon_open,json=isMiniEldritchDungeonOpen,proto3" json:"is_mini_eldritch_dungeon_open,omitempty"`
	IsContentClosed           bool                      `protobuf:"varint,14,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	IsTakenSkinReward         bool                      `protobuf:"varint,6,opt,name=is_taken_skin_reward,json=isTakenSkinReward,proto3" json:"is_taken_skin_reward,omitempty"`
}

func (x *LanternRiteActivityDetailInfo) Reset() {
	*x = LanternRiteActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteActivityDetailInfo) ProtoMessage() {}

func (x *LanternRiteActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*LanternRiteActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{454}
}

func (x *LanternRiteActivityDetailInfo) GetProjectionInfo() *LanternProjectionInfo {
	if x != nil {
		return x.ProjectionInfo
	}
	return nil
}

func (x *LanternRiteActivityDetailInfo) GetStageInfoList() []*SalvageStageInfo {
	if x != nil {
		return x.StageInfoList
	}
	return nil
}

func (x *LanternRiteActivityDetailInfo) GetFireworksInfo() *LanternRiteFireworksInfo {
	if x != nil {
		return x.FireworksInfo
	}
	return nil
}

func (x *LanternRiteActivityDetailInfo) GetIsMiniEldritchDungeonOpen() bool {
	if x != nil {
		return x.IsMiniEldritchDungeonOpen
	}
	return false
}

func (x *LanternRiteActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *LanternRiteActivityDetailInfo) GetIsTakenSkinReward() bool {
	if x != nil {
		return x.IsTakenSkinReward
	}
	return false
}

type FinishLanternProjectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishTime uint32 `protobuf:"varint,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	LevelId    uint32 `protobuf:"varint,11,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *FinishLanternProjectionReq) Reset() {
	*x = FinishLanternProjectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishLanternProjectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishLanternProjectionReq) ProtoMessage() {}

func (x *FinishLanternProjectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishLanternProjectionReq.ProtoReflect.Descriptor instead.
func (*FinishLanternProjectionReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{455}
}

func (x *FinishLanternProjectionReq) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *FinishLanternProjectionReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type FinishLanternProjectionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *FinishLanternProjectionRsp) Reset() {
	*x = FinishLanternProjectionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishLanternProjectionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishLanternProjectionRsp) ProtoMessage() {}

func (x *FinishLanternProjectionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishLanternProjectionRsp.ProtoReflect.Descriptor instead.
func (*FinishLanternProjectionRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{456}
}

func (x *FinishLanternProjectionRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ViewLanternProjectionTipsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInputTips bool            `protobuf:"varint,9,opt,name=is_input_tips,json=isInputTips,proto3" json:"is_input_tips,omitempty"`
	InputType   ClientInputType `protobuf:"varint,10,opt,name=input_type,json=inputType,proto3,enum=proto.ClientInputType" json:"input_type,omitempty"`
}

func (x *ViewLanternProjectionTipsReq) Reset() {
	*x = ViewLanternProjectionTipsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewLanternProjectionTipsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewLanternProjectionTipsReq) ProtoMessage() {}

func (x *ViewLanternProjectionTipsReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewLanternProjectionTipsReq.ProtoReflect.Descriptor instead.
func (*ViewLanternProjectionTipsReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{457}
}

func (x *ViewLanternProjectionTipsReq) GetIsInputTips() bool {
	if x != nil {
		return x.IsInputTips
	}
	return false
}

func (x *ViewLanternProjectionTipsReq) GetInputType() ClientInputType {
	if x != nil {
		return x.InputType
	}
	return ClientInputType_CLIENT_INPUT_NONE
}

type ViewLanternProjectionTipsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ViewLanternProjectionTipsRsp) Reset() {
	*x = ViewLanternProjectionTipsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewLanternProjectionTipsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewLanternProjectionTipsRsp) ProtoMessage() {}

func (x *ViewLanternProjectionTipsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewLanternProjectionTipsRsp.ProtoReflect.Descriptor instead.
func (*ViewLanternProjectionTipsRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{458}
}

func (x *ViewLanternProjectionTipsRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ViewLanternProjectionLevelTipsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,7,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *ViewLanternProjectionLevelTipsReq) Reset() {
	*x = ViewLanternProjectionLevelTipsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewLanternProjectionLevelTipsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewLanternProjectionLevelTipsReq) ProtoMessage() {}

func (x *ViewLanternProjectionLevelTipsReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewLanternProjectionLevelTipsReq.ProtoReflect.Descriptor instead.
func (*ViewLanternProjectionLevelTipsReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{459}
}

func (x *ViewLanternProjectionLevelTipsReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type ViewLanternProjectionLevelTipsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ViewLanternProjectionLevelTipsRsp) Reset() {
	*x = ViewLanternProjectionLevelTipsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewLanternProjectionLevelTipsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewLanternProjectionLevelTipsRsp) ProtoMessage() {}

func (x *ViewLanternProjectionLevelTipsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewLanternProjectionLevelTipsRsp.ProtoReflect.Descriptor instead.
func (*ViewLanternProjectionLevelTipsRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{460}
}

func (x *ViewLanternProjectionLevelTipsRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type SalvagePreventSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNewRecord bool                             `protobuf:"varint,8,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	SettleInfo  *SalvagePreventGallerySettleInfo `protobuf:"bytes,14,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
}

func (x *SalvagePreventSettleInfo) Reset() {
	*x = SalvagePreventSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvagePreventSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvagePreventSettleInfo) ProtoMessage() {}

func (x *SalvagePreventSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvagePreventSettleInfo.ProtoReflect.Descriptor instead.
func (*SalvagePreventSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{461}
}

func (x *SalvagePreventSettleInfo) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *SalvagePreventSettleInfo) GetSettleInfo() *SalvagePreventGallerySettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

type SalvagePreventSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId  uint32                    `protobuf:"varint,13,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	SettleInfo *SalvagePreventSettleInfo `protobuf:"bytes,12,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
}

func (x *SalvagePreventSettleNotify) Reset() {
	*x = SalvagePreventSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvagePreventSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvagePreventSettleNotify) ProtoMessage() {}

func (x *SalvagePreventSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvagePreventSettleNotify.ProtoReflect.Descriptor instead.
func (*SalvagePreventSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{462}
}

func (x *SalvagePreventSettleNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *SalvagePreventSettleNotify) GetSettleInfo() *SalvagePreventSettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

type SalvageEscortSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettleInfo  *SalvageEscortGallerySettleInfo `protobuf:"bytes,3,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
	IsNewRecord bool                            `protobuf:"varint,2,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
}

func (x *SalvageEscortSettleInfo) Reset() {
	*x = SalvageEscortSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvageEscortSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvageEscortSettleInfo) ProtoMessage() {}

func (x *SalvageEscortSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvageEscortSettleInfo.ProtoReflect.Descriptor instead.
func (*SalvageEscortSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{463}
}

func (x *SalvageEscortSettleInfo) GetSettleInfo() *SalvageEscortGallerySettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

func (x *SalvageEscortSettleInfo) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

type SalvageEscortSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId  uint32                   `protobuf:"varint,14,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	SettleInfo *SalvageEscortSettleInfo `protobuf:"bytes,15,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
}

func (x *SalvageEscortSettleNotify) Reset() {
	*x = SalvageEscortSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvageEscortSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvageEscortSettleNotify) ProtoMessage() {}

func (x *SalvageEscortSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvageEscortSettleNotify.ProtoReflect.Descriptor instead.
func (*SalvageEscortSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{464}
}

func (x *SalvageEscortSettleNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *SalvageEscortSettleNotify) GetSettleInfo() *SalvageEscortSettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

type LanternRiteTakeSkinRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LanternRiteTakeSkinRewardReq) Reset() {
	*x = LanternRiteTakeSkinRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteTakeSkinRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteTakeSkinRewardReq) ProtoMessage() {}

func (x *LanternRiteTakeSkinRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteTakeSkinRewardReq.ProtoReflect.Descriptor instead.
func (*LanternRiteTakeSkinRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{465}
}

type LanternRiteTakeSkinRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *LanternRiteTakeSkinRewardRsp) Reset() {
	*x = LanternRiteTakeSkinRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteTakeSkinRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteTakeSkinRewardRsp) ProtoMessage() {}

func (x *LanternRiteTakeSkinRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteTakeSkinRewardRsp.ProtoReflect.Descriptor instead.
func (*LanternRiteTakeSkinRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{466}
}

func (x *LanternRiteTakeSkinRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type SalvagePreventRestartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,13,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *SalvagePreventRestartReq) Reset() {
	*x = SalvagePreventRestartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvagePreventRestartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvagePreventRestartReq) ProtoMessage() {}

func (x *SalvagePreventRestartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvagePreventRestartReq.ProtoReflect.Descriptor instead.
func (*SalvagePreventRestartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{467}
}

func (x *SalvagePreventRestartReq) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type SalvagePreventRestartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GalleryId uint32 `protobuf:"varint,12,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *SalvagePreventRestartRsp) Reset() {
	*x = SalvagePreventRestartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvagePreventRestartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvagePreventRestartRsp) ProtoMessage() {}

func (x *SalvagePreventRestartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvagePreventRestartRsp.ProtoReflect.Descriptor instead.
func (*SalvagePreventRestartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{468}
}

func (x *SalvagePreventRestartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *SalvagePreventRestartRsp) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type SalvageEscortRestartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,4,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *SalvageEscortRestartReq) Reset() {
	*x = SalvageEscortRestartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvageEscortRestartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvageEscortRestartReq) ProtoMessage() {}

func (x *SalvageEscortRestartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvageEscortRestartReq.ProtoReflect.Descriptor instead.
func (*SalvageEscortRestartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{469}
}

func (x *SalvageEscortRestartReq) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type SalvageEscortRestartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,14,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	Retcode   int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SalvageEscortRestartRsp) Reset() {
	*x = SalvageEscortRestartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalvageEscortRestartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalvageEscortRestartRsp) ProtoMessage() {}

func (x *SalvageEscortRestartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalvageEscortRestartRsp.ProtoReflect.Descriptor instead.
func (*SalvageEscortRestartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{470}
}

func (x *SalvageEscortRestartRsp) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *SalvageEscortRestartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type LanternRiteStartFireworksReformReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId     uint32 `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	ChallengeId uint32 `protobuf:"varint,7,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *LanternRiteStartFireworksReformReq) Reset() {
	*x = LanternRiteStartFireworksReformReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteStartFireworksReformReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteStartFireworksReformReq) ProtoMessage() {}

func (x *LanternRiteStartFireworksReformReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteStartFireworksReformReq.ProtoReflect.Descriptor instead.
func (*LanternRiteStartFireworksReformReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{471}
}

func (x *LanternRiteStartFireworksReformReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *LanternRiteStartFireworksReformReq) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type LanternRiteFireworksReformFactorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FactorValue uint32 `protobuf:"varint,5,opt,name=factor_value,json=factorValue,proto3" json:"factor_value,omitempty"`
	FactorId    uint32 `protobuf:"varint,13,opt,name=factor_id,json=factorId,proto3" json:"factor_id,omitempty"`
}

func (x *LanternRiteFireworksReformFactorInfo) Reset() {
	*x = LanternRiteFireworksReformFactorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteFireworksReformFactorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteFireworksReformFactorInfo) ProtoMessage() {}

func (x *LanternRiteFireworksReformFactorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteFireworksReformFactorInfo.ProtoReflect.Descriptor instead.
func (*LanternRiteFireworksReformFactorInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{472}
}

func (x *LanternRiteFireworksReformFactorInfo) GetFactorValue() uint32 {
	if x != nil {
		return x.FactorValue
	}
	return 0
}

func (x *LanternRiteFireworksReformFactorInfo) GetFactorId() uint32 {
	if x != nil {
		return x.FactorId
	}
	return 0
}

type LanternRiteFireworksReformSkillInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId             uint32 `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	IsUnlock            bool   `protobuf:"varint,11,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
	UnlockChallengeTime uint32 `protobuf:"varint,1,opt,name=unlock_challenge_time,json=unlockChallengeTime,proto3" json:"unlock_challenge_time,omitempty"`
	UnlockChallengeId   uint32 `protobuf:"varint,14,opt,name=unlock_challenge_id,json=unlockChallengeId,proto3" json:"unlock_challenge_id,omitempty"`
}

func (x *LanternRiteFireworksReformSkillInfo) Reset() {
	*x = LanternRiteFireworksReformSkillInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteFireworksReformSkillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteFireworksReformSkillInfo) ProtoMessage() {}

func (x *LanternRiteFireworksReformSkillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteFireworksReformSkillInfo.ProtoReflect.Descriptor instead.
func (*LanternRiteFireworksReformSkillInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{473}
}

func (x *LanternRiteFireworksReformSkillInfo) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *LanternRiteFireworksReformSkillInfo) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

func (x *LanternRiteFireworksReformSkillInfo) GetUnlockChallengeTime() uint32 {
	if x != nil {
		return x.UnlockChallengeTime
	}
	return 0
}

func (x *LanternRiteFireworksReformSkillInfo) GetUnlockChallengeId() uint32 {
	if x != nil {
		return x.UnlockChallengeId
	}
	return 0
}

type LanternRiteStartFireworksReformRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FactorInfoList           []*LanternRiteFireworksReformFactorInfo `protobuf:"bytes,15,rep,name=factor_info_list,json=factorInfoList,proto3" json:"factor_info_list,omitempty"`
	FireElementAdditionRatio uint32                                  `protobuf:"varint,13,opt,name=fire_element_addition_ratio,json=fireElementAdditionRatio,proto3" json:"fire_element_addition_ratio,omitempty"`
	StaminaValue             uint32                                  `protobuf:"varint,2,opt,name=stamina_value,json=staminaValue,proto3" json:"stamina_value,omitempty"`
	SkillInfoList            []*LanternRiteFireworksReformSkillInfo  `protobuf:"bytes,8,rep,name=skill_info_list,json=skillInfoList,proto3" json:"skill_info_list,omitempty"`
	ReformScore              uint32                                  `protobuf:"varint,6,opt,name=reform_score,json=reformScore,proto3" json:"reform_score,omitempty"`
	StageId                  uint32                                  `protobuf:"varint,12,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	ChallengeId              uint32                                  `protobuf:"varint,11,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	FireElementValue         uint32                                  `protobuf:"varint,14,opt,name=fire_element_value,json=fireElementValue,proto3" json:"fire_element_value,omitempty"`
	Retcode                  int32                                   `protobuf:"varint,7,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *LanternRiteStartFireworksReformRsp) Reset() {
	*x = LanternRiteStartFireworksReformRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteStartFireworksReformRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteStartFireworksReformRsp) ProtoMessage() {}

func (x *LanternRiteStartFireworksReformRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteStartFireworksReformRsp.ProtoReflect.Descriptor instead.
func (*LanternRiteStartFireworksReformRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{474}
}

func (x *LanternRiteStartFireworksReformRsp) GetFactorInfoList() []*LanternRiteFireworksReformFactorInfo {
	if x != nil {
		return x.FactorInfoList
	}
	return nil
}

func (x *LanternRiteStartFireworksReformRsp) GetFireElementAdditionRatio() uint32 {
	if x != nil {
		return x.FireElementAdditionRatio
	}
	return 0
}

func (x *LanternRiteStartFireworksReformRsp) GetStaminaValue() uint32 {
	if x != nil {
		return x.StaminaValue
	}
	return 0
}

func (x *LanternRiteStartFireworksReformRsp) GetSkillInfoList() []*LanternRiteFireworksReformSkillInfo {
	if x != nil {
		return x.SkillInfoList
	}
	return nil
}

func (x *LanternRiteStartFireworksReformRsp) GetReformScore() uint32 {
	if x != nil {
		return x.ReformScore
	}
	return 0
}

func (x *LanternRiteStartFireworksReformRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *LanternRiteStartFireworksReformRsp) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *LanternRiteStartFireworksReformRsp) GetFireElementValue() uint32 {
	if x != nil {
		return x.FireElementValue
	}
	return 0
}

func (x *LanternRiteStartFireworksReformRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type LanternRiteDoFireworksReformReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId     uint32 `protobuf:"varint,12,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	SkillId     uint32 `protobuf:"varint,11,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	ChallengeId uint32 `protobuf:"varint,10,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	FactorId    uint32 `protobuf:"varint,13,opt,name=factor_id,json=factorId,proto3" json:"factor_id,omitempty"`
}

func (x *LanternRiteDoFireworksReformReq) Reset() {
	*x = LanternRiteDoFireworksReformReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteDoFireworksReformReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteDoFireworksReformReq) ProtoMessage() {}

func (x *LanternRiteDoFireworksReformReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteDoFireworksReformReq.ProtoReflect.Descriptor instead.
func (*LanternRiteDoFireworksReformReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{475}
}

func (x *LanternRiteDoFireworksReformReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *LanternRiteDoFireworksReformReq) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *LanternRiteDoFireworksReformReq) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *LanternRiteDoFireworksReformReq) GetFactorId() uint32 {
	if x != nil {
		return x.FactorId
	}
	return 0
}

type LanternRiteDoFireworksReformRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId                  uint32                                  `protobuf:"varint,7,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsLucky                  bool                                    `protobuf:"varint,13,opt,name=is_lucky,json=isLucky,proto3" json:"is_lucky,omitempty"`
	ChallengeId              uint32                                  `protobuf:"varint,8,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	FactorInfoList           []*LanternRiteFireworksReformFactorInfo `protobuf:"bytes,2,rep,name=factor_info_list,json=factorInfoList,proto3" json:"factor_info_list,omitempty"`
	StaminaValue             uint32                                  `protobuf:"varint,10,opt,name=stamina_value,json=staminaValue,proto3" json:"stamina_value,omitempty"`
	ReformScore              uint32                                  `protobuf:"varint,15,opt,name=reform_score,json=reformScore,proto3" json:"reform_score,omitempty"`
	FireElementValue         uint32                                  `protobuf:"varint,11,opt,name=fire_element_value,json=fireElementValue,proto3" json:"fire_element_value,omitempty"`
	Retcode                  int32                                   `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
	FireElementAdditionRatio uint32                                  `protobuf:"varint,12,opt,name=fire_element_addition_ratio,json=fireElementAdditionRatio,proto3" json:"fire_element_addition_ratio,omitempty"`
}

func (x *LanternRiteDoFireworksReformRsp) Reset() {
	*x = LanternRiteDoFireworksReformRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteDoFireworksReformRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteDoFireworksReformRsp) ProtoMessage() {}

func (x *LanternRiteDoFireworksReformRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteDoFireworksReformRsp.ProtoReflect.Descriptor instead.
func (*LanternRiteDoFireworksReformRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{476}
}

func (x *LanternRiteDoFireworksReformRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *LanternRiteDoFireworksReformRsp) GetIsLucky() bool {
	if x != nil {
		return x.IsLucky
	}
	return false
}

func (x *LanternRiteDoFireworksReformRsp) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *LanternRiteDoFireworksReformRsp) GetFactorInfoList() []*LanternRiteFireworksReformFactorInfo {
	if x != nil {
		return x.FactorInfoList
	}
	return nil
}

func (x *LanternRiteDoFireworksReformRsp) GetStaminaValue() uint32 {
	if x != nil {
		return x.StaminaValue
	}
	return 0
}

func (x *LanternRiteDoFireworksReformRsp) GetReformScore() uint32 {
	if x != nil {
		return x.ReformScore
	}
	return 0
}

func (x *LanternRiteDoFireworksReformRsp) GetFireElementValue() uint32 {
	if x != nil {
		return x.FireElementValue
	}
	return 0
}

func (x *LanternRiteDoFireworksReformRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *LanternRiteDoFireworksReformRsp) GetFireElementAdditionRatio() uint32 {
	if x != nil {
		return x.FireElementAdditionRatio
	}
	return 0
}

type LanternRiteEndFireworksReformReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId     uint32 `protobuf:"varint,9,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	ChallengeId uint32 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *LanternRiteEndFireworksReformReq) Reset() {
	*x = LanternRiteEndFireworksReformReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteEndFireworksReformReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteEndFireworksReformReq) ProtoMessage() {}

func (x *LanternRiteEndFireworksReformReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteEndFireworksReformReq.ProtoReflect.Descriptor instead.
func (*LanternRiteEndFireworksReformReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{477}
}

func (x *LanternRiteEndFireworksReformReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *LanternRiteEndFireworksReformReq) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

type LanternRiteEndFireworksReformRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFullScore       bool   `protobuf:"varint,10,opt,name=is_full_score,json=isFullScore,proto3" json:"is_full_score,omitempty"`
	Retcode           int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsUnlockFireworks bool   `protobuf:"varint,6,opt,name=is_unlock_fireworks,json=isUnlockFireworks,proto3" json:"is_unlock_fireworks,omitempty"`
	StageId           uint32 `protobuf:"varint,15,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsUnlockNewSkill  bool   `protobuf:"varint,12,opt,name=is_unlock_new_skill,json=isUnlockNewSkill,proto3" json:"is_unlock_new_skill,omitempty"`
	IsStaminaUp       bool   `protobuf:"varint,4,opt,name=is_stamina_up,json=isStaminaUp,proto3" json:"is_stamina_up,omitempty"`
	FinalScore        uint32 `protobuf:"varint,13,opt,name=final_score,json=finalScore,proto3" json:"final_score,omitempty"`
	ChallengeId       uint32 `protobuf:"varint,5,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	IsNewRecord       bool   `protobuf:"varint,9,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
}

func (x *LanternRiteEndFireworksReformRsp) Reset() {
	*x = LanternRiteEndFireworksReformRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanternRiteEndFireworksReformRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanternRiteEndFireworksReformRsp) ProtoMessage() {}

func (x *LanternRiteEndFireworksReformRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanternRiteEndFireworksReformRsp.ProtoReflect.Descriptor instead.
func (*LanternRiteEndFireworksReformRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{478}
}

func (x *LanternRiteEndFireworksReformRsp) GetIsFullScore() bool {
	if x != nil {
		return x.IsFullScore
	}
	return false
}

func (x *LanternRiteEndFireworksReformRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *LanternRiteEndFireworksReformRsp) GetIsUnlockFireworks() bool {
	if x != nil {
		return x.IsUnlockFireworks
	}
	return false
}

func (x *LanternRiteEndFireworksReformRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *LanternRiteEndFireworksReformRsp) GetIsUnlockNewSkill() bool {
	if x != nil {
		return x.IsUnlockNewSkill
	}
	return false
}

func (x *LanternRiteEndFireworksReformRsp) GetIsStaminaUp() bool {
	if x != nil {
		return x.IsStaminaUp
	}
	return false
}

func (x *LanternRiteEndFireworksReformRsp) GetFinalScore() uint32 {
	if x != nil {
		return x.FinalScore
	}
	return 0
}

func (x *LanternRiteEndFireworksReformRsp) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *LanternRiteEndFireworksReformRsp) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

type UpdateSalvageBundleMarkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId       uint32 `protobuf:"varint,14,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	ChallengeType uint32 `protobuf:"varint,13,opt,name=challenge_type,json=challengeType,proto3" json:"challenge_type,omitempty"`
}

func (x *UpdateSalvageBundleMarkReq) Reset() {
	*x = UpdateSalvageBundleMarkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSalvageBundleMarkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSalvageBundleMarkReq) ProtoMessage() {}

func (x *UpdateSalvageBundleMarkReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSalvageBundleMarkReq.ProtoReflect.Descriptor instead.
func (*UpdateSalvageBundleMarkReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{479}
}

func (x *UpdateSalvageBundleMarkReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *UpdateSalvageBundleMarkReq) GetChallengeType() uint32 {
	if x != nil {
		return x.ChallengeType
	}
	return 0
}

type UpdateSalvageBundleMarkRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeType uint32 `protobuf:"varint,1,opt,name=challenge_type,json=challengeType,proto3" json:"challenge_type,omitempty"`
	Retcode       int32  `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
	StageId       uint32 `protobuf:"varint,7,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *UpdateSalvageBundleMarkRsp) Reset() {
	*x = UpdateSalvageBundleMarkRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSalvageBundleMarkRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSalvageBundleMarkRsp) ProtoMessage() {}

func (x *UpdateSalvageBundleMarkRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSalvageBundleMarkRsp.ProtoReflect.Descriptor instead.
func (*UpdateSalvageBundleMarkRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{480}
}

func (x *UpdateSalvageBundleMarkRsp) GetChallengeType() uint32 {
	if x != nil {
		return x.ChallengeType
	}
	return 0
}

func (x *UpdateSalvageBundleMarkRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *UpdateSalvageBundleMarkRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type MichiaeMatsuriStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen   bool   `protobuf:"varint,11,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	OpenTime uint32 `protobuf:"varint,5,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	StageId  uint32 `protobuf:"varint,12,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *MichiaeMatsuriStage) Reset() {
	*x = MichiaeMatsuriStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriStage) ProtoMessage() {}

func (x *MichiaeMatsuriStage) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriStage.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriStage) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{481}
}

func (x *MichiaeMatsuriStage) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *MichiaeMatsuriStage) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *MichiaeMatsuriStage) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type MichiaeMatsuriChestPositionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos      *Vector `protobuf:"bytes,10,opt,name=pos,proto3" json:"pos,omitempty"`
	GroupId  uint32  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ConfigId uint32  `protobuf:"varint,11,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (x *MichiaeMatsuriChestPositionInfo) Reset() {
	*x = MichiaeMatsuriChestPositionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriChestPositionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriChestPositionInfo) ProtoMessage() {}

func (x *MichiaeMatsuriChestPositionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriChestPositionInfo.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriChestPositionInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{482}
}

func (x *MichiaeMatsuriChestPositionInfo) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MichiaeMatsuriChestPositionInfo) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MichiaeMatsuriChestPositionInfo) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

type MichiaeMatsuriChallengePositionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  uint32  `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GadgetId uint32  `protobuf:"varint,7,opt,name=gadget_id,json=gadgetId,proto3" json:"gadget_id,omitempty"`
	Pos      *Vector `protobuf:"bytes,8,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *MichiaeMatsuriChallengePositionInfo) Reset() {
	*x = MichiaeMatsuriChallengePositionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriChallengePositionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriChallengePositionInfo) ProtoMessage() {}

func (x *MichiaeMatsuriChallengePositionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriChallengePositionInfo.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriChallengePositionInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{483}
}

func (x *MichiaeMatsuriChallengePositionInfo) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MichiaeMatsuriChallengePositionInfo) GetGadgetId() uint32 {
	if x != nil {
		return x.GadgetId
	}
	return 0
}

func (x *MichiaeMatsuriChallengePositionInfo) GetPos() *Vector {
	if x != nil {
		return x.Pos
	}
	return nil
}

type MichiaeMatsuriActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengePosList         []*MichiaeMatsuriChallengePositionInfo `protobuf:"bytes,6,rep,name=challenge_pos_list,json=challengePosList,proto3" json:"challenge_pos_list,omitempty"`
	GainCrystalExp           uint32                                 `protobuf:"varint,13,opt,name=gain_crystal_exp,json=gainCrystalExp,proto3" json:"gain_crystal_exp,omitempty"`
	UnlockedCrystalSkillList []uint32                               `protobuf:"varint,2,rep,packed,name=unlocked_crystal_skill_list,json=unlockedCrystalSkillList,proto3" json:"unlocked_crystal_skill_list,omitempty"`
	ChestPosList             []*MichiaeMatsuriChestPositionInfo     `protobuf:"bytes,10,rep,name=chest_pos_list,json=chestPosList,proto3" json:"chest_pos_list,omitempty"`
	StageList                []*MichiaeMatsuriStage                 `protobuf:"bytes,14,rep,name=stage_list,json=stageList,proto3" json:"stage_list,omitempty"`
}

func (x *MichiaeMatsuriActivityDetailInfo) Reset() {
	*x = MichiaeMatsuriActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriActivityDetailInfo) ProtoMessage() {}

func (x *MichiaeMatsuriActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{484}
}

func (x *MichiaeMatsuriActivityDetailInfo) GetChallengePosList() []*MichiaeMatsuriChallengePositionInfo {
	if x != nil {
		return x.ChallengePosList
	}
	return nil
}

func (x *MichiaeMatsuriActivityDetailInfo) GetGainCrystalExp() uint32 {
	if x != nil {
		return x.GainCrystalExp
	}
	return 0
}

func (x *MichiaeMatsuriActivityDetailInfo) GetUnlockedCrystalSkillList() []uint32 {
	if x != nil {
		return x.UnlockedCrystalSkillList
	}
	return nil
}

func (x *MichiaeMatsuriActivityDetailInfo) GetChestPosList() []*MichiaeMatsuriChestPositionInfo {
	if x != nil {
		return x.ChestPosList
	}
	return nil
}

func (x *MichiaeMatsuriActivityDetailInfo) GetStageList() []*MichiaeMatsuriStage {
	if x != nil {
		return x.StageList
	}
	return nil
}

type MichiaeMatsuriDarkPressureLevelUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DarkPressureLevel uint32 `protobuf:"varint,8,opt,name=dark_pressure_level,json=darkPressureLevel,proto3" json:"dark_pressure_level,omitempty"`
}

func (x *MichiaeMatsuriDarkPressureLevelUpdateNotify) Reset() {
	*x = MichiaeMatsuriDarkPressureLevelUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriDarkPressureLevelUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriDarkPressureLevelUpdateNotify) ProtoMessage() {}

func (x *MichiaeMatsuriDarkPressureLevelUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriDarkPressureLevelUpdateNotify.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriDarkPressureLevelUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{485}
}

func (x *MichiaeMatsuriDarkPressureLevelUpdateNotify) GetDarkPressureLevel() uint32 {
	if x != nil {
		return x.DarkPressureLevel
	}
	return 0
}

type MichiaeMatsuriInteractStatueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatueEntityId uint32 `protobuf:"varint,7,opt,name=statue_entity_id,json=statueEntityId,proto3" json:"statue_entity_id,omitempty"`
}

func (x *MichiaeMatsuriInteractStatueReq) Reset() {
	*x = MichiaeMatsuriInteractStatueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriInteractStatueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriInteractStatueReq) ProtoMessage() {}

func (x *MichiaeMatsuriInteractStatueReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriInteractStatueReq.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriInteractStatueReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{486}
}

func (x *MichiaeMatsuriInteractStatueReq) GetStatueEntityId() uint32 {
	if x != nil {
		return x.StatueEntityId
	}
	return 0
}

type MichiaeMatsuriInteractStatueRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *MichiaeMatsuriInteractStatueRsp) Reset() {
	*x = MichiaeMatsuriInteractStatueRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriInteractStatueRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriInteractStatueRsp) ProtoMessage() {}

func (x *MichiaeMatsuriInteractStatueRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriInteractStatueRsp.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriInteractStatueRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{487}
}

func (x *MichiaeMatsuriInteractStatueRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type MichiaeMatsuriUnlockCrystalSkillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrystalSkillId uint32 `protobuf:"varint,1,opt,name=crystal_skill_id,json=crystalSkillId,proto3" json:"crystal_skill_id,omitempty"`
}

func (x *MichiaeMatsuriUnlockCrystalSkillReq) Reset() {
	*x = MichiaeMatsuriUnlockCrystalSkillReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriUnlockCrystalSkillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriUnlockCrystalSkillReq) ProtoMessage() {}

func (x *MichiaeMatsuriUnlockCrystalSkillReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriUnlockCrystalSkillReq.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriUnlockCrystalSkillReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{488}
}

func (x *MichiaeMatsuriUnlockCrystalSkillReq) GetCrystalSkillId() uint32 {
	if x != nil {
		return x.CrystalSkillId
	}
	return 0
}

type MichiaeMatsuriUnlockCrystalSkillRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrystalSkillId uint32 `protobuf:"varint,1,opt,name=crystal_skill_id,json=crystalSkillId,proto3" json:"crystal_skill_id,omitempty"`
	Retcode        int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *MichiaeMatsuriUnlockCrystalSkillRsp) Reset() {
	*x = MichiaeMatsuriUnlockCrystalSkillRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriUnlockCrystalSkillRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriUnlockCrystalSkillRsp) ProtoMessage() {}

func (x *MichiaeMatsuriUnlockCrystalSkillRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriUnlockCrystalSkillRsp.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriUnlockCrystalSkillRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{489}
}

func (x *MichiaeMatsuriUnlockCrystalSkillRsp) GetCrystalSkillId() uint32 {
	if x != nil {
		return x.CrystalSkillId
	}
	return 0
}

func (x *MichiaeMatsuriUnlockCrystalSkillRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type MichiaeMatsuriStartBossChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difficulty     uint32 `protobuf:"varint,5,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	GadgetEntityId uint32 `protobuf:"varint,15,opt,name=gadget_entity_id,json=gadgetEntityId,proto3" json:"gadget_entity_id,omitempty"`
}

func (x *MichiaeMatsuriStartBossChallengeReq) Reset() {
	*x = MichiaeMatsuriStartBossChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriStartBossChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriStartBossChallengeReq) ProtoMessage() {}

func (x *MichiaeMatsuriStartBossChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriStartBossChallengeReq.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriStartBossChallengeReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{490}
}

func (x *MichiaeMatsuriStartBossChallengeReq) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *MichiaeMatsuriStartBossChallengeReq) GetGadgetEntityId() uint32 {
	if x != nil {
		return x.GadgetEntityId
	}
	return 0
}

type MichiaeMatsuriStartBossChallengeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *MichiaeMatsuriStartBossChallengeRsp) Reset() {
	*x = MichiaeMatsuriStartBossChallengeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriStartBossChallengeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriStartBossChallengeRsp) ProtoMessage() {}

func (x *MichiaeMatsuriStartBossChallengeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriStartBossChallengeRsp.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriStartBossChallengeRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{491}
}

func (x *MichiaeMatsuriStartBossChallengeRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type MichiaeMatsuriStartDarkChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorktopEntityId uint32 `protobuf:"varint,2,opt,name=worktop_entity_id,json=worktopEntityId,proto3" json:"worktop_entity_id,omitempty"`
}

func (x *MichiaeMatsuriStartDarkChallengeReq) Reset() {
	*x = MichiaeMatsuriStartDarkChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriStartDarkChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriStartDarkChallengeReq) ProtoMessage() {}

func (x *MichiaeMatsuriStartDarkChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriStartDarkChallengeReq.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriStartDarkChallengeReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{492}
}

func (x *MichiaeMatsuriStartDarkChallengeReq) GetWorktopEntityId() uint32 {
	if x != nil {
		return x.WorktopEntityId
	}
	return 0
}

type MichiaeMatsuriStartDarkChallengeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *MichiaeMatsuriStartDarkChallengeRsp) Reset() {
	*x = MichiaeMatsuriStartDarkChallengeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriStartDarkChallengeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriStartDarkChallengeRsp) ProtoMessage() {}

func (x *MichiaeMatsuriStartDarkChallengeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriStartDarkChallengeRsp.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriStartDarkChallengeRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{493}
}

func (x *MichiaeMatsuriStartDarkChallengeRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type MichiaeMatsuriRemoveChestMarkNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId uint32 `protobuf:"varint,9,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	GroupId  uint32 `protobuf:"varint,11,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *MichiaeMatsuriRemoveChestMarkNotify) Reset() {
	*x = MichiaeMatsuriRemoveChestMarkNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriRemoveChestMarkNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriRemoveChestMarkNotify) ProtoMessage() {}

func (x *MichiaeMatsuriRemoveChestMarkNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriRemoveChestMarkNotify.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriRemoveChestMarkNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{494}
}

func (x *MichiaeMatsuriRemoveChestMarkNotify) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *MichiaeMatsuriRemoveChestMarkNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type MichiaeMatsuriRemoveChallengeMarkNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GadgetId uint32 `protobuf:"varint,9,opt,name=gadget_id,json=gadgetId,proto3" json:"gadget_id,omitempty"`
	GroupId  uint32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *MichiaeMatsuriRemoveChallengeMarkNotify) Reset() {
	*x = MichiaeMatsuriRemoveChallengeMarkNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriRemoveChallengeMarkNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriRemoveChallengeMarkNotify) ProtoMessage() {}

func (x *MichiaeMatsuriRemoveChallengeMarkNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriRemoveChallengeMarkNotify.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriRemoveChallengeMarkNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{495}
}

func (x *MichiaeMatsuriRemoveChallengeMarkNotify) GetGadgetId() uint32 {
	if x != nil {
		return x.GadgetId
	}
	return 0
}

func (x *MichiaeMatsuriRemoveChallengeMarkNotify) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type MichiaeMatsuriGainCrystalExpUpdateNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GainCrystalExp uint32 `protobuf:"varint,2,opt,name=gain_crystal_exp,json=gainCrystalExp,proto3" json:"gain_crystal_exp,omitempty"`
	ActivityId     uint32 `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *MichiaeMatsuriGainCrystalExpUpdateNotify) Reset() {
	*x = MichiaeMatsuriGainCrystalExpUpdateNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MichiaeMatsuriGainCrystalExpUpdateNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MichiaeMatsuriGainCrystalExpUpdateNotify) ProtoMessage() {}

func (x *MichiaeMatsuriGainCrystalExpUpdateNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MichiaeMatsuriGainCrystalExpUpdateNotify.ProtoReflect.Descriptor instead.
func (*MichiaeMatsuriGainCrystalExpUpdateNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{496}
}

func (x *MichiaeMatsuriGainCrystalExpUpdateNotify) GetGainCrystalExp() uint32 {
	if x != nil {
		return x.GainCrystalExp
	}
	return 0
}

func (x *MichiaeMatsuriGainCrystalExpUpdateNotify) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type BartenderTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsFinish bool   `protobuf:"varint,14,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
}

func (x *BartenderTaskInfo) Reset() {
	*x = BartenderTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderTaskInfo) ProtoMessage() {}

func (x *BartenderTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderTaskInfo.ProtoReflect.Descriptor instead.
func (*BartenderTaskInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{497}
}

func (x *BartenderTaskInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BartenderTaskInfo) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type BartenderLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinish bool   `protobuf:"varint,7,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	MaxScore uint32 `protobuf:"varint,9,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	Id       uint32 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BartenderLevelInfo) Reset() {
	*x = BartenderLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderLevelInfo) ProtoMessage() {}

func (x *BartenderLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderLevelInfo.ProtoReflect.Descriptor instead.
func (*BartenderLevelInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{498}
}

func (x *BartenderLevelInfo) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *BartenderLevelInfo) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *BartenderLevelInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BartenderActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockItemList      []uint32              `protobuf:"varint,3,rep,packed,name=unlock_item_list,json=unlockItemList,proto3" json:"unlock_item_list,omitempty"`
	IsDevelopModuleOpen bool                  `protobuf:"varint,13,opt,name=is_develop_module_open,json=isDevelopModuleOpen,proto3" json:"is_develop_module_open,omitempty"`
	IsContentClosed     bool                  `protobuf:"varint,6,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	UnlockLevelList     []*BartenderLevelInfo `protobuf:"bytes,5,rep,name=unlock_level_list,json=unlockLevelList,proto3" json:"unlock_level_list,omitempty"`
	UnlockFormulaList   []uint32              `protobuf:"varint,14,rep,packed,name=unlock_formula_list,json=unlockFormulaList,proto3" json:"unlock_formula_list,omitempty"`
	UnlockTaskList      []*BartenderTaskInfo  `protobuf:"bytes,2,rep,name=unlock_task_list,json=unlockTaskList,proto3" json:"unlock_task_list,omitempty"`
}

func (x *BartenderActivityDetailInfo) Reset() {
	*x = BartenderActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderActivityDetailInfo) ProtoMessage() {}

func (x *BartenderActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*BartenderActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{499}
}

func (x *BartenderActivityDetailInfo) GetUnlockItemList() []uint32 {
	if x != nil {
		return x.UnlockItemList
	}
	return nil
}

func (x *BartenderActivityDetailInfo) GetIsDevelopModuleOpen() bool {
	if x != nil {
		return x.IsDevelopModuleOpen
	}
	return false
}

func (x *BartenderActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *BartenderActivityDetailInfo) GetUnlockLevelList() []*BartenderLevelInfo {
	if x != nil {
		return x.UnlockLevelList
	}
	return nil
}

func (x *BartenderActivityDetailInfo) GetUnlockFormulaList() []uint32 {
	if x != nil {
		return x.UnlockFormulaList
	}
	return nil
}

func (x *BartenderActivityDetailInfo) GetUnlockTaskList() []*BartenderTaskInfo {
	if x != nil {
		return x.UnlockTaskList
	}
	return nil
}

type BartenderCompleteOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CupType           uint32       `protobuf:"varint,14,opt,name=cup_type,json=cupType,proto3" json:"cup_type,omitempty"`
	QteCount          uint32       `protobuf:"varint,7,opt,name=qte_count,json=qteCount,proto3" json:"qte_count,omitempty"`
	QuestId           uint32       `protobuf:"varint,11,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
	ItemList          []*ItemParam `protobuf:"bytes,10,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
	IsViewFormula     bool         `protobuf:"varint,9,opt,name=is_view_formula,json=isViewFormula,proto3" json:"is_view_formula,omitempty"`
	OptionalOrderList []uint32     `protobuf:"varint,6,rep,packed,name=optional_order_list,json=optionalOrderList,proto3" json:"optional_order_list,omitempty"`
	RetryCount        uint32       `protobuf:"varint,3,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
}

func (x *BartenderCompleteOrderReq) Reset() {
	*x = BartenderCompleteOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderCompleteOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderCompleteOrderReq) ProtoMessage() {}

func (x *BartenderCompleteOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderCompleteOrderReq.ProtoReflect.Descriptor instead.
func (*BartenderCompleteOrderReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{500}
}

func (x *BartenderCompleteOrderReq) GetCupType() uint32 {
	if x != nil {
		return x.CupType
	}
	return 0
}

func (x *BartenderCompleteOrderReq) GetQteCount() uint32 {
	if x != nil {
		return x.QteCount
	}
	return 0
}

func (x *BartenderCompleteOrderReq) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

func (x *BartenderCompleteOrderReq) GetItemList() []*ItemParam {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *BartenderCompleteOrderReq) GetIsViewFormula() bool {
	if x != nil {
		return x.IsViewFormula
	}
	return false
}

func (x *BartenderCompleteOrderReq) GetOptionalOrderList() []uint32 {
	if x != nil {
		return x.OptionalOrderList
	}
	return nil
}

func (x *BartenderCompleteOrderReq) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

type BartenderCompleteOrderRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNew         bool     `protobuf:"varint,10,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
	FinishOrderId uint32   `protobuf:"varint,3,opt,name=finish_order_id,json=finishOrderId,proto3" json:"finish_order_id,omitempty"`
	Retcode       int32    `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
	FormulaId     uint32   `protobuf:"varint,6,opt,name=formula_id,json=formulaId,proto3" json:"formula_id,omitempty"`
	QuestId       uint32   `protobuf:"varint,15,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
	AffixList     []uint32 `protobuf:"varint,2,rep,packed,name=affix_list,json=affixList,proto3" json:"affix_list,omitempty"`
}

func (x *BartenderCompleteOrderRsp) Reset() {
	*x = BartenderCompleteOrderRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderCompleteOrderRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderCompleteOrderRsp) ProtoMessage() {}

func (x *BartenderCompleteOrderRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderCompleteOrderRsp.ProtoReflect.Descriptor instead.
func (*BartenderCompleteOrderRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{501}
}

func (x *BartenderCompleteOrderRsp) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *BartenderCompleteOrderRsp) GetFinishOrderId() uint32 {
	if x != nil {
		return x.FinishOrderId
	}
	return 0
}

func (x *BartenderCompleteOrderRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BartenderCompleteOrderRsp) GetFormulaId() uint32 {
	if x != nil {
		return x.FormulaId
	}
	return 0
}

func (x *BartenderCompleteOrderRsp) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

func (x *BartenderCompleteOrderRsp) GetAffixList() []uint32 {
	if x != nil {
		return x.AffixList
	}
	return nil
}

type BartenderCancelOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId uint32 `protobuf:"varint,3,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
}

func (x *BartenderCancelOrderReq) Reset() {
	*x = BartenderCancelOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderCancelOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderCancelOrderReq) ProtoMessage() {}

func (x *BartenderCancelOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderCancelOrderReq.ProtoReflect.Descriptor instead.
func (*BartenderCancelOrderReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{502}
}

func (x *BartenderCancelOrderReq) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

type BartenderCancelOrderRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
	QuestId uint32 `protobuf:"varint,3,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
}

func (x *BartenderCancelOrderRsp) Reset() {
	*x = BartenderCancelOrderRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderCancelOrderRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderCancelOrderRsp) ProtoMessage() {}

func (x *BartenderCancelOrderRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderCancelOrderRsp.ProtoReflect.Descriptor instead.
func (*BartenderCancelOrderRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{503}
}

func (x *BartenderCancelOrderRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BartenderCancelOrderRsp) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

type BartenderGetFormulaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemList []*ItemParam `protobuf:"bytes,7,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
	QuestId  uint32       `protobuf:"varint,4,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
}

func (x *BartenderGetFormulaReq) Reset() {
	*x = BartenderGetFormulaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderGetFormulaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderGetFormulaReq) ProtoMessage() {}

func (x *BartenderGetFormulaReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderGetFormulaReq.ProtoReflect.Descriptor instead.
func (*BartenderGetFormulaReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{504}
}

func (x *BartenderGetFormulaReq) GetItemList() []*ItemParam {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *BartenderGetFormulaReq) GetQuestId() uint32 {
	if x != nil {
		return x.QuestId
	}
	return 0
}

type BartenderGetFormulaRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNew     bool     `protobuf:"varint,12,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
	Retcode   int32    `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	AffixList []uint32 `protobuf:"varint,8,rep,packed,name=affix_list,json=affixList,proto3" json:"affix_list,omitempty"`
	FormulaId uint32   `protobuf:"varint,11,opt,name=formula_id,json=formulaId,proto3" json:"formula_id,omitempty"`
}

func (x *BartenderGetFormulaRsp) Reset() {
	*x = BartenderGetFormulaRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderGetFormulaRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderGetFormulaRsp) ProtoMessage() {}

func (x *BartenderGetFormulaRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderGetFormulaRsp.ProtoReflect.Descriptor instead.
func (*BartenderGetFormulaRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{505}
}

func (x *BartenderGetFormulaRsp) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *BartenderGetFormulaRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BartenderGetFormulaRsp) GetAffixList() []uint32 {
	if x != nil {
		return x.AffixList
	}
	return nil
}

func (x *BartenderGetFormulaRsp) GetFormulaId() uint32 {
	if x != nil {
		return x.FormulaId
	}
	return 0
}

type BartenderStartLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,5,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *BartenderStartLevelReq) Reset() {
	*x = BartenderStartLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderStartLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderStartLevelReq) ProtoMessage() {}

func (x *BartenderStartLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderStartLevelReq.ProtoReflect.Descriptor instead.
func (*BartenderStartLevelReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{506}
}

func (x *BartenderStartLevelReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type BartenderStartLevelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32    `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
	OrderList []uint32 `protobuf:"varint,13,rep,packed,name=order_list,json=orderList,proto3" json:"order_list,omitempty"`
	LevelId   uint32   `protobuf:"varint,10,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Time      uint32   `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *BartenderStartLevelRsp) Reset() {
	*x = BartenderStartLevelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderStartLevelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderStartLevelRsp) ProtoMessage() {}

func (x *BartenderStartLevelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderStartLevelRsp.ProtoReflect.Descriptor instead.
func (*BartenderStartLevelRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{507}
}

func (x *BartenderStartLevelRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BartenderStartLevelRsp) GetOrderList() []uint32 {
	if x != nil {
		return x.OrderList
	}
	return nil
}

func (x *BartenderStartLevelRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *BartenderStartLevelRsp) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type BartenderCancelLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,13,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *BartenderCancelLevelReq) Reset() {
	*x = BartenderCancelLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderCancelLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderCancelLevelReq) ProtoMessage() {}

func (x *BartenderCancelLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderCancelLevelReq.ProtoReflect.Descriptor instead.
func (*BartenderCancelLevelReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{508}
}

func (x *BartenderCancelLevelReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type BartenderCancelLevelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,2,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Retcode int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *BartenderCancelLevelRsp) Reset() {
	*x = BartenderCancelLevelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderCancelLevelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderCancelLevelRsp) ProtoMessage() {}

func (x *BartenderCancelLevelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderCancelLevelRsp.ProtoReflect.Descriptor instead.
func (*BartenderCancelLevelRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{509}
}

func (x *BartenderCancelLevelRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *BartenderCancelLevelRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type BartenderLevelProgressNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNewRecord bool   `protobuf:"varint,9,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	IsFinish    bool   `protobuf:"varint,3,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	LevelId     uint32 `protobuf:"varint,15,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Score       uint32 `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *BartenderLevelProgressNotify) Reset() {
	*x = BartenderLevelProgressNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderLevelProgressNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderLevelProgressNotify) ProtoMessage() {}

func (x *BartenderLevelProgressNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderLevelProgressNotify.ProtoReflect.Descriptor instead.
func (*BartenderLevelProgressNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{510}
}

func (x *BartenderLevelProgressNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *BartenderLevelProgressNotify) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *BartenderLevelProgressNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *BartenderLevelProgressNotify) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type BartenderFinishLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,6,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *BartenderFinishLevelReq) Reset() {
	*x = BartenderFinishLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderFinishLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderFinishLevelReq) ProtoMessage() {}

func (x *BartenderFinishLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderFinishLevelReq.ProtoReflect.Descriptor instead.
func (*BartenderFinishLevelReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{511}
}

func (x *BartenderFinishLevelReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type BartenderFinishLevelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	LevelId uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *BartenderFinishLevelRsp) Reset() {
	*x = BartenderFinishLevelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BartenderFinishLevelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BartenderFinishLevelRsp) ProtoMessage() {}

func (x *BartenderFinishLevelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BartenderFinishLevelRsp.ProtoReflect.Descriptor instead.
func (*BartenderFinishLevelRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{512}
}

func (x *BartenderFinishLevelRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *BartenderFinishLevelRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type OfficialCustomDungeon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId uint32 `protobuf:"varint,11,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	WinTimes  uint32 `protobuf:"varint,3,opt,name=win_times,json=winTimes,proto3" json:"win_times,omitempty"`
}

func (x *OfficialCustomDungeon) Reset() {
	*x = OfficialCustomDungeon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialCustomDungeon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialCustomDungeon) ProtoMessage() {}

func (x *OfficialCustomDungeon) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialCustomDungeon.ProtoReflect.Descriptor instead.
func (*OfficialCustomDungeon) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{513}
}

func (x *OfficialCustomDungeon) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *OfficialCustomDungeon) GetWinTimes() uint32 {
	if x != nil {
		return x.WinTimes
	}
	return 0
}

type UgcActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsUgcFeatureClosed        bool                     `protobuf:"varint,10,opt,name=is_ugc_feature_closed,json=isUgcFeatureClosed,proto3" json:"is_ugc_feature_closed,omitempty"`
	CustomDungeonGroupId      uint32                   `protobuf:"varint,12,opt,name=custom_dungeon_group_id,json=customDungeonGroupId,proto3" json:"custom_dungeon_group_id,omitempty"`
	OfficialCustomDungeonList []*OfficialCustomDungeon `protobuf:"bytes,5,rep,name=official_custom_dungeon_list,json=officialCustomDungeonList,proto3" json:"official_custom_dungeon_list,omitempty"`
	IsEnableUgc               bool                     `protobuf:"varint,11,opt,name=is_enable_ugc,json=isEnableUgc,proto3" json:"is_enable_ugc,omitempty"`
}

func (x *UgcActivityDetailInfo) Reset() {
	*x = UgcActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UgcActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UgcActivityDetailInfo) ProtoMessage() {}

func (x *UgcActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UgcActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*UgcActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{514}
}

func (x *UgcActivityDetailInfo) GetIsUgcFeatureClosed() bool {
	if x != nil {
		return x.IsUgcFeatureClosed
	}
	return false
}

func (x *UgcActivityDetailInfo) GetCustomDungeonGroupId() uint32 {
	if x != nil {
		return x.CustomDungeonGroupId
	}
	return 0
}

func (x *UgcActivityDetailInfo) GetOfficialCustomDungeonList() []*OfficialCustomDungeon {
	if x != nil {
		return x.OfficialCustomDungeonList
	}
	return nil
}

func (x *UgcActivityDetailInfo) GetIsEnableUgc() bool {
	if x != nil {
		return x.IsEnableUgc
	}
	return false
}

type CrystalLinkActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelInfoList []*CrystalLinkLevelInfo `protobuf:"bytes,3,rep,name=level_info_list,json=levelInfoList,proto3" json:"level_info_list,omitempty"`
	DifficultyId  uint32                  `protobuf:"varint,7,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
}

func (x *CrystalLinkActivityDetailInfo) Reset() {
	*x = CrystalLinkActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkActivityDetailInfo) ProtoMessage() {}

func (x *CrystalLinkActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*CrystalLinkActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{515}
}

func (x *CrystalLinkActivityDetailInfo) GetLevelInfoList() []*CrystalLinkLevelInfo {
	if x != nil {
		return x.LevelInfoList
	}
	return nil
}

func (x *CrystalLinkActivityDetailInfo) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

type CrystalLinkLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamInfoList []*CrystalLinkTeamInfo `protobuf:"bytes,10,rep,name=team_info_list,json=teamInfoList,proto3" json:"team_info_list,omitempty"`
	IsOpen       bool                   `protobuf:"varint,9,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	LevelId      uint32                 `protobuf:"varint,14,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	BestScore    uint32                 `protobuf:"varint,5,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *CrystalLinkLevelInfo) Reset() {
	*x = CrystalLinkLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkLevelInfo) ProtoMessage() {}

func (x *CrystalLinkLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkLevelInfo.ProtoReflect.Descriptor instead.
func (*CrystalLinkLevelInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{516}
}

func (x *CrystalLinkLevelInfo) GetTeamInfoList() []*CrystalLinkTeamInfo {
	if x != nil {
		return x.TeamInfoList
	}
	return nil
}

func (x *CrystalLinkLevelInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *CrystalLinkLevelInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CrystalLinkLevelInfo) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type CrystalLinkTeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffInfoList   []*CrystalLinkBuffInfo   `protobuf:"bytes,2,rep,name=buff_info_list,json=buffInfoList,proto3" json:"buff_info_list,omitempty"`
	AvatarInfoList []*CrystalLinkAvatarInfo `protobuf:"bytes,11,rep,name=avatar_info_list,json=avatarInfoList,proto3" json:"avatar_info_list,omitempty"`
}

func (x *CrystalLinkTeamInfo) Reset() {
	*x = CrystalLinkTeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkTeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkTeamInfo) ProtoMessage() {}

func (x *CrystalLinkTeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkTeamInfo.ProtoReflect.Descriptor instead.
func (*CrystalLinkTeamInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{517}
}

func (x *CrystalLinkTeamInfo) GetBuffInfoList() []*CrystalLinkBuffInfo {
	if x != nil {
		return x.BuffInfoList
	}
	return nil
}

func (x *CrystalLinkTeamInfo) GetAvatarInfoList() []*CrystalLinkAvatarInfo {
	if x != nil {
		return x.AvatarInfoList
	}
	return nil
}

type CrystalLinkAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId uint64 `protobuf:"varint,3,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	IsTrial  bool   `protobuf:"varint,13,opt,name=is_trial,json=isTrial,proto3" json:"is_trial,omitempty"`
}

func (x *CrystalLinkAvatarInfo) Reset() {
	*x = CrystalLinkAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkAvatarInfo) ProtoMessage() {}

func (x *CrystalLinkAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkAvatarInfo.ProtoReflect.Descriptor instead.
func (*CrystalLinkAvatarInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{518}
}

func (x *CrystalLinkAvatarInfo) GetAvatarId() uint64 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *CrystalLinkAvatarInfo) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

type CrystalLinkBuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectBuffId uint32 `protobuf:"varint,1,opt,name=effect_buff_id,json=effectBuffId,proto3" json:"effect_buff_id,omitempty"`
	CondBuffId   uint32 `protobuf:"varint,10,opt,name=cond_buff_id,json=condBuffId,proto3" json:"cond_buff_id,omitempty"`
}

func (x *CrystalLinkBuffInfo) Reset() {
	*x = CrystalLinkBuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkBuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkBuffInfo) ProtoMessage() {}

func (x *CrystalLinkBuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkBuffInfo.ProtoReflect.Descriptor instead.
func (*CrystalLinkBuffInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{519}
}

func (x *CrystalLinkBuffInfo) GetEffectBuffId() uint32 {
	if x != nil {
		return x.EffectBuffId
	}
	return 0
}

func (x *CrystalLinkBuffInfo) GetCondBuffId() uint32 {
	if x != nil {
		return x.CondBuffId
	}
	return 0
}

type CrystalLinkEnterDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId      uint32                 `protobuf:"varint,7,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	TeamInfoList []*CrystalLinkTeamInfo `protobuf:"bytes,13,rep,name=team_info_list,json=teamInfoList,proto3" json:"team_info_list,omitempty"`
	DifficultyId uint32                 `protobuf:"varint,10,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
}

func (x *CrystalLinkEnterDungeonReq) Reset() {
	*x = CrystalLinkEnterDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkEnterDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkEnterDungeonReq) ProtoMessage() {}

func (x *CrystalLinkEnterDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkEnterDungeonReq.ProtoReflect.Descriptor instead.
func (*CrystalLinkEnterDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{520}
}

func (x *CrystalLinkEnterDungeonReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CrystalLinkEnterDungeonReq) GetTeamInfoList() []*CrystalLinkTeamInfo {
	if x != nil {
		return x.TeamInfoList
	}
	return nil
}

func (x *CrystalLinkEnterDungeonReq) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

type CrystalLinkEnterDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId      uint32                 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	DifficultyId uint32                 `protobuf:"varint,14,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	Retcode      int32                  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	TeamInfoList []*CrystalLinkTeamInfo `protobuf:"bytes,8,rep,name=team_info_list,json=teamInfoList,proto3" json:"team_info_list,omitempty"`
}

func (x *CrystalLinkEnterDungeonRsp) Reset() {
	*x = CrystalLinkEnterDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkEnterDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkEnterDungeonRsp) ProtoMessage() {}

func (x *CrystalLinkEnterDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkEnterDungeonRsp.ProtoReflect.Descriptor instead.
func (*CrystalLinkEnterDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{521}
}

func (x *CrystalLinkEnterDungeonRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CrystalLinkEnterDungeonRsp) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *CrystalLinkEnterDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *CrystalLinkEnterDungeonRsp) GetTeamInfoList() []*CrystalLinkTeamInfo {
	if x != nil {
		return x.TeamInfoList
	}
	return nil
}

type CrystalLinkDungeonAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTrial    bool   `protobuf:"varint,8,opt,name=is_trial,json=isTrial,proto3" json:"is_trial,omitempty"`
	AvatarGuid uint64 `protobuf:"varint,11,opt,name=avatar_guid,json=avatarGuid,proto3" json:"avatar_guid,omitempty"`
}

func (x *CrystalLinkDungeonAvatarInfo) Reset() {
	*x = CrystalLinkDungeonAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkDungeonAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkDungeonAvatarInfo) ProtoMessage() {}

func (x *CrystalLinkDungeonAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkDungeonAvatarInfo.ProtoReflect.Descriptor instead.
func (*CrystalLinkDungeonAvatarInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{522}
}

func (x *CrystalLinkDungeonAvatarInfo) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

func (x *CrystalLinkDungeonAvatarInfo) GetAvatarGuid() uint64 {
	if x != nil {
		return x.AvatarGuid
	}
	return 0
}

type CrystalLinkDungeonInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffInfoList          []*CrystalLinkBuffInfo          `protobuf:"bytes,8,rep,name=buff_info_list,json=buffInfoList,proto3" json:"buff_info_list,omitempty"`
	LevelId               uint32                          `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsUpperPart           bool                            `protobuf:"varint,15,opt,name=is_upper_part,json=isUpperPart,proto3" json:"is_upper_part,omitempty"`
	DifficultyId          uint32                          `protobuf:"varint,11,opt,name=difficulty_id,json=difficultyId,proto3" json:"difficulty_id,omitempty"`
	DungeonAvatarInfoList []*CrystalLinkDungeonAvatarInfo `protobuf:"bytes,3,rep,name=dungeon_avatar_info_list,json=dungeonAvatarInfoList,proto3" json:"dungeon_avatar_info_list,omitempty"`
	InitGalleryProgress   uint32                          `protobuf:"varint,7,opt,name=init_gallery_progress,json=initGalleryProgress,proto3" json:"init_gallery_progress,omitempty"`
}

func (x *CrystalLinkDungeonInfoNotify) Reset() {
	*x = CrystalLinkDungeonInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkDungeonInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkDungeonInfoNotify) ProtoMessage() {}

func (x *CrystalLinkDungeonInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkDungeonInfoNotify.ProtoReflect.Descriptor instead.
func (*CrystalLinkDungeonInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{523}
}

func (x *CrystalLinkDungeonInfoNotify) GetBuffInfoList() []*CrystalLinkBuffInfo {
	if x != nil {
		return x.BuffInfoList
	}
	return nil
}

func (x *CrystalLinkDungeonInfoNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CrystalLinkDungeonInfoNotify) GetIsUpperPart() bool {
	if x != nil {
		return x.IsUpperPart
	}
	return false
}

func (x *CrystalLinkDungeonInfoNotify) GetDifficultyId() uint32 {
	if x != nil {
		return x.DifficultyId
	}
	return 0
}

func (x *CrystalLinkDungeonInfoNotify) GetDungeonAvatarInfoList() []*CrystalLinkDungeonAvatarInfo {
	if x != nil {
		return x.DungeonAvatarInfoList
	}
	return nil
}

func (x *CrystalLinkDungeonInfoNotify) GetInitGalleryProgress() uint32 {
	if x != nil {
		return x.InitGalleryProgress
	}
	return 0
}

type CrystalLinkRestartDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CrystalLinkRestartDungeonReq) Reset() {
	*x = CrystalLinkRestartDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkRestartDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkRestartDungeonReq) ProtoMessage() {}

func (x *CrystalLinkRestartDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkRestartDungeonReq.ProtoReflect.Descriptor instead.
func (*CrystalLinkRestartDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{524}
}

type CrystalLinkRestartDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *CrystalLinkRestartDungeonRsp) Reset() {
	*x = CrystalLinkRestartDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrystalLinkRestartDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrystalLinkRestartDungeonRsp) ProtoMessage() {}

func (x *CrystalLinkRestartDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrystalLinkRestartDungeonRsp.ProtoReflect.Descriptor instead.
func (*CrystalLinkRestartDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{525}
}

func (x *CrystalLinkRestartDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type QuickOpenActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32 `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *QuickOpenActivityReq) Reset() {
	*x = QuickOpenActivityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickOpenActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickOpenActivityReq) ProtoMessage() {}

func (x *QuickOpenActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickOpenActivityReq.ProtoReflect.Descriptor instead.
func (*QuickOpenActivityReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{526}
}

func (x *QuickOpenActivityReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type QuickOpenActivityRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode    int32  `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ActivityId uint32 `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *QuickOpenActivityRsp) Reset() {
	*x = QuickOpenActivityRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickOpenActivityRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickOpenActivityRsp) ProtoMessage() {}

func (x *QuickOpenActivityRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickOpenActivityRsp.ProtoReflect.Descriptor instead.
func (*QuickOpenActivityRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{527}
}

func (x *QuickOpenActivityRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *QuickOpenActivityRsp) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type IrodoriChessMapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId              uint32                          `protobuf:"varint,6,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	EntranceDetailInfo *IrodoriChessEntranceDetailInfo `protobuf:"bytes,7,opt,name=entrance_detail_info,json=entranceDetailInfo,proto3" json:"entrance_detail_info,omitempty"`
	EquipedCardList    []uint32                        `protobuf:"varint,3,rep,packed,name=equiped_card_list,json=equipedCardList,proto3" json:"equiped_card_list,omitempty"`
	BestScore          uint32                          `protobuf:"varint,8,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *IrodoriChessMapData) Reset() {
	*x = IrodoriChessMapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessMapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessMapData) ProtoMessage() {}

func (x *IrodoriChessMapData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessMapData.ProtoReflect.Descriptor instead.
func (*IrodoriChessMapData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{528}
}

func (x *IrodoriChessMapData) GetMapId() uint32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *IrodoriChessMapData) GetEntranceDetailInfo() *IrodoriChessEntranceDetailInfo {
	if x != nil {
		return x.EntranceDetailInfo
	}
	return nil
}

func (x *IrodoriChessMapData) GetEquipedCardList() []uint32 {
	if x != nil {
		return x.EquipedCardList
	}
	return nil
}

func (x *IrodoriChessMapData) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type IrodoriChessLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenTime      uint32               `protobuf:"varint,8,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	LevelId       uint32               `protobuf:"varint,15,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	HardMapData   *IrodoriChessMapData `protobuf:"bytes,7,opt,name=hard_map_data,json=hardMapData,proto3" json:"hard_map_data,omitempty"`
	NormalMapData *IrodoriChessMapData `protobuf:"bytes,11,opt,name=normal_map_data,json=normalMapData,proto3" json:"normal_map_data,omitempty"`
}

func (x *IrodoriChessLevelData) Reset() {
	*x = IrodoriChessLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessLevelData) ProtoMessage() {}

func (x *IrodoriChessLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessLevelData.ProtoReflect.Descriptor instead.
func (*IrodoriChessLevelData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{529}
}

func (x *IrodoriChessLevelData) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *IrodoriChessLevelData) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *IrodoriChessLevelData) GetHardMapData() *IrodoriChessMapData {
	if x != nil {
		return x.HardMapData
	}
	return nil
}

func (x *IrodoriChessLevelData) GetNormalMapData() *IrodoriChessMapData {
	if x != nil {
		return x.NormalMapData
	}
	return nil
}

type IrodoriChessData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen        bool                     `protobuf:"varint,8,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	LevelDataList []*IrodoriChessLevelData `protobuf:"bytes,1,rep,name=level_data_list,json=levelDataList,proto3" json:"level_data_list,omitempty"`
}

func (x *IrodoriChessData) Reset() {
	*x = IrodoriChessData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessData) ProtoMessage() {}

func (x *IrodoriChessData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessData.ProtoReflect.Descriptor instead.
func (*IrodoriChessData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{530}
}

func (x *IrodoriChessData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *IrodoriChessData) GetLevelDataList() []*IrodoriChessLevelData {
	if x != nil {
		return x.LevelDataList
	}
	return nil
}

type IrodoriFlowerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishedThemeList []uint32     `protobuf:"varint,1,rep,packed,name=finished_theme_list,json=finishedThemeList,proto3" json:"finished_theme_list,omitempty"`
	UsedFlowerList    []*ItemParam `protobuf:"bytes,7,rep,name=used_flower_list,json=usedFlowerList,proto3" json:"used_flower_list,omitempty"`
}

func (x *IrodoriFlowerData) Reset() {
	*x = IrodoriFlowerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriFlowerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriFlowerData) ProtoMessage() {}

func (x *IrodoriFlowerData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriFlowerData.ProtoReflect.Descriptor instead.
func (*IrodoriFlowerData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{531}
}

func (x *IrodoriFlowerData) GetFinishedThemeList() []uint32 {
	if x != nil {
		return x.FinishedThemeList
	}
	return nil
}

func (x *IrodoriFlowerData) GetUsedFlowerList() []*ItemParam {
	if x != nil {
		return x.UsedFlowerList
	}
	return nil
}

type IrodoriPoetryThemeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScannedIndexList []uint32 `protobuf:"varint,1,rep,packed,name=scanned_index_list,json=scannedIndexList,proto3" json:"scanned_index_list,omitempty"`
	LineIdList       []uint32 `protobuf:"varint,4,rep,packed,name=line_id_list,json=lineIdList,proto3" json:"line_id_list,omitempty"`
	MaxProgress      uint32   `protobuf:"varint,2,opt,name=max_progress,json=maxProgress,proto3" json:"max_progress,omitempty"`
	ThemeId          uint32   `protobuf:"varint,13,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
	Progress         uint32   `protobuf:"varint,5,opt,name=progress,proto3" json:"progress,omitempty"`
	MinProgress      uint32   `protobuf:"varint,12,opt,name=min_progress,json=minProgress,proto3" json:"min_progress,omitempty"`
	SelectedLineId   uint32   `protobuf:"varint,9,opt,name=selected_line_id,json=selectedLineId,proto3" json:"selected_line_id,omitempty"`
}

func (x *IrodoriPoetryThemeData) Reset() {
	*x = IrodoriPoetryThemeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriPoetryThemeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriPoetryThemeData) ProtoMessage() {}

func (x *IrodoriPoetryThemeData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriPoetryThemeData.ProtoReflect.Descriptor instead.
func (*IrodoriPoetryThemeData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{532}
}

func (x *IrodoriPoetryThemeData) GetScannedIndexList() []uint32 {
	if x != nil {
		return x.ScannedIndexList
	}
	return nil
}

func (x *IrodoriPoetryThemeData) GetLineIdList() []uint32 {
	if x != nil {
		return x.LineIdList
	}
	return nil
}

func (x *IrodoriPoetryThemeData) GetMaxProgress() uint32 {
	if x != nil {
		return x.MaxProgress
	}
	return 0
}

func (x *IrodoriPoetryThemeData) GetThemeId() uint32 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *IrodoriPoetryThemeData) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *IrodoriPoetryThemeData) GetMinProgress() uint32 {
	if x != nil {
		return x.MinProgress
	}
	return 0
}

func (x *IrodoriPoetryThemeData) GetSelectedLineId() uint32 {
	if x != nil {
		return x.SelectedLineId
	}
	return 0
}

type IrodoriPoetryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeDataList []*IrodoriPoetryThemeData `protobuf:"bytes,3,rep,name=theme_data_list,json=themeDataList,proto3" json:"theme_data_list,omitempty"`
	CurThemeId    uint32                    `protobuf:"varint,14,opt,name=cur_theme_id,json=curThemeId,proto3" json:"cur_theme_id,omitempty"`
}

func (x *IrodoriPoetryData) Reset() {
	*x = IrodoriPoetryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriPoetryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriPoetryData) ProtoMessage() {}

func (x *IrodoriPoetryData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriPoetryData.ProtoReflect.Descriptor instead.
func (*IrodoriPoetryData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{533}
}

func (x *IrodoriPoetryData) GetThemeDataList() []*IrodoriPoetryThemeData {
	if x != nil {
		return x.ThemeDataList
	}
	return nil
}

func (x *IrodoriPoetryData) GetCurThemeId() uint32 {
	if x != nil {
		return x.CurThemeId
	}
	return 0
}

type IrodoriMasterLevelDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinish      bool   `protobuf:"varint,1,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	Diffculty     uint32 `protobuf:"varint,2,opt,name=diffculty,proto3" json:"diffculty,omitempty"`
	MinFinishTime uint32 `protobuf:"varint,8,opt,name=min_finish_time,json=minFinishTime,proto3" json:"min_finish_time,omitempty"`
	IsHaveTry     bool   `protobuf:"varint,7,opt,name=is_have_try,json=isHaveTry,proto3" json:"is_have_try,omitempty"`
}

func (x *IrodoriMasterLevelDetailInfo) Reset() {
	*x = IrodoriMasterLevelDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriMasterLevelDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriMasterLevelDetailInfo) ProtoMessage() {}

func (x *IrodoriMasterLevelDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriMasterLevelDetailInfo.ProtoReflect.Descriptor instead.
func (*IrodoriMasterLevelDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{534}
}

func (x *IrodoriMasterLevelDetailInfo) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *IrodoriMasterLevelDetailInfo) GetDiffculty() uint32 {
	if x != nil {
		return x.Diffculty
	}
	return 0
}

func (x *IrodoriMasterLevelDetailInfo) GetMinFinishTime() uint32 {
	if x != nil {
		return x.MinFinishTime
	}
	return 0
}

func (x *IrodoriMasterLevelDetailInfo) GetIsHaveTry() bool {
	if x != nil {
		return x.IsHaveTry
	}
	return false
}

type IrodoriMasterLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailInfo []*IrodoriMasterLevelDetailInfo `protobuf:"bytes,11,rep,name=detail_info,json=detailInfo,proto3" json:"detail_info,omitempty"`
	LevelId    uint32                          `protobuf:"varint,14,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *IrodoriMasterLevelInfo) Reset() {
	*x = IrodoriMasterLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriMasterLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriMasterLevelInfo) ProtoMessage() {}

func (x *IrodoriMasterLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriMasterLevelInfo.ProtoReflect.Descriptor instead.
func (*IrodoriMasterLevelInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{535}
}

func (x *IrodoriMasterLevelInfo) GetDetailInfo() []*IrodoriMasterLevelDetailInfo {
	if x != nil {
		return x.DetailInfo
	}
	return nil
}

func (x *IrodoriMasterLevelInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type IrodoriActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterLevelList []*IrodoriMasterLevelInfo `protobuf:"bytes,11,rep,name=master_level_list,json=masterLevelList,proto3" json:"master_level_list,omitempty"`
	FlowerData      *IrodoriFlowerData        `protobuf:"bytes,6,opt,name=flower_data,json=flowerData,proto3" json:"flower_data,omitempty"`
	PoetryData      *IrodoriPoetryData        `protobuf:"bytes,8,opt,name=poetry_data,json=poetryData,proto3" json:"poetry_data,omitempty"`
	ChessData       *IrodoriChessData         `protobuf:"bytes,14,opt,name=chess_data,json=chessData,proto3" json:"chess_data,omitempty"`
}

func (x *IrodoriActivityDetailInfo) Reset() {
	*x = IrodoriActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriActivityDetailInfo) ProtoMessage() {}

func (x *IrodoriActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*IrodoriActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{536}
}

func (x *IrodoriActivityDetailInfo) GetMasterLevelList() []*IrodoriMasterLevelInfo {
	if x != nil {
		return x.MasterLevelList
	}
	return nil
}

func (x *IrodoriActivityDetailInfo) GetFlowerData() *IrodoriFlowerData {
	if x != nil {
		return x.FlowerData
	}
	return nil
}

func (x *IrodoriActivityDetailInfo) GetPoetryData() *IrodoriPoetryData {
	if x != nil {
		return x.PoetryData
	}
	return nil
}

func (x *IrodoriActivityDetailInfo) GetChessData() *IrodoriChessData {
	if x != nil {
		return x.ChessData
	}
	return nil
}

type IrodoriEditFlowerCombinationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId        uint32                `protobuf:"varint,13,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	CombinationInfo *CustomGadgetTreeInfo `protobuf:"bytes,1,opt,name=combination_info,json=combinationInfo,proto3" json:"combination_info,omitempty"`
}

func (x *IrodoriEditFlowerCombinationReq) Reset() {
	*x = IrodoriEditFlowerCombinationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriEditFlowerCombinationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriEditFlowerCombinationReq) ProtoMessage() {}

func (x *IrodoriEditFlowerCombinationReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriEditFlowerCombinationReq.ProtoReflect.Descriptor instead.
func (*IrodoriEditFlowerCombinationReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{537}
}

func (x *IrodoriEditFlowerCombinationReq) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *IrodoriEditFlowerCombinationReq) GetCombinationInfo() *CustomGadgetTreeInfo {
	if x != nil {
		return x.CombinationInfo
	}
	return nil
}

type IrodoriEditFlowerCombinationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAlreadyFinished bool  `protobuf:"varint,4,opt,name=is_already_finished,json=isAlreadyFinished,proto3" json:"is_already_finished,omitempty"`
	IsCanTakeReward   bool  `protobuf:"varint,3,opt,name=is_can_take_reward,json=isCanTakeReward,proto3" json:"is_can_take_reward,omitempty"`
	Retcode           int32 `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *IrodoriEditFlowerCombinationRsp) Reset() {
	*x = IrodoriEditFlowerCombinationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriEditFlowerCombinationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriEditFlowerCombinationRsp) ProtoMessage() {}

func (x *IrodoriEditFlowerCombinationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriEditFlowerCombinationRsp.ProtoReflect.Descriptor instead.
func (*IrodoriEditFlowerCombinationRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{538}
}

func (x *IrodoriEditFlowerCombinationRsp) GetIsAlreadyFinished() bool {
	if x != nil {
		return x.IsAlreadyFinished
	}
	return false
}

func (x *IrodoriEditFlowerCombinationRsp) GetIsCanTakeReward() bool {
	if x != nil {
		return x.IsCanTakeReward
	}
	return false
}

func (x *IrodoriEditFlowerCombinationRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type IrodoriScanEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId uint32 `protobuf:"varint,11,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (x *IrodoriScanEntityReq) Reset() {
	*x = IrodoriScanEntityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriScanEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriScanEntityReq) ProtoMessage() {}

func (x *IrodoriScanEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriScanEntityReq.ProtoReflect.Descriptor instead.
func (*IrodoriScanEntityReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{539}
}

func (x *IrodoriScanEntityReq) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

type IrodoriScanEntityRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeData        *IrodoriPoetryThemeData `protobuf:"bytes,10,opt,name=theme_data,json=themeData,proto3" json:"theme_data,omitempty"`
	Retcode          int32                   `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsGetInspiration bool                    `protobuf:"varint,1,opt,name=is_get_inspiration,json=isGetInspiration,proto3" json:"is_get_inspiration,omitempty"`
}

func (x *IrodoriScanEntityRsp) Reset() {
	*x = IrodoriScanEntityRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriScanEntityRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriScanEntityRsp) ProtoMessage() {}

func (x *IrodoriScanEntityRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriScanEntityRsp.ProtoReflect.Descriptor instead.
func (*IrodoriScanEntityRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{540}
}

func (x *IrodoriScanEntityRsp) GetThemeData() *IrodoriPoetryThemeData {
	if x != nil {
		return x.ThemeData
	}
	return nil
}

func (x *IrodoriScanEntityRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *IrodoriScanEntityRsp) GetIsGetInspiration() bool {
	if x != nil {
		return x.IsGetInspiration
	}
	return false
}

type IrodoriFillPoetryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeId uint32 `protobuf:"varint,9,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
	LineId  uint32 `protobuf:"varint,13,opt,name=line_id,json=lineId,proto3" json:"line_id,omitempty"`
}

func (x *IrodoriFillPoetryReq) Reset() {
	*x = IrodoriFillPoetryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[541]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriFillPoetryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriFillPoetryReq) ProtoMessage() {}

func (x *IrodoriFillPoetryReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[541]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriFillPoetryReq.ProtoReflect.Descriptor instead.
func (*IrodoriFillPoetryReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{541}
}

func (x *IrodoriFillPoetryReq) GetThemeId() uint32 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *IrodoriFillPoetryReq) GetLineId() uint32 {
	if x != nil {
		return x.LineId
	}
	return 0
}

type IrodoriFillPoetryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeData *IrodoriPoetryThemeData `protobuf:"bytes,13,opt,name=theme_data,json=themeData,proto3" json:"theme_data,omitempty"`
	Retcode   int32                   `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *IrodoriFillPoetryRsp) Reset() {
	*x = IrodoriFillPoetryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[542]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriFillPoetryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriFillPoetryRsp) ProtoMessage() {}

func (x *IrodoriFillPoetryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[542]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriFillPoetryRsp.ProtoReflect.Descriptor instead.
func (*IrodoriFillPoetryRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{542}
}

func (x *IrodoriFillPoetryRsp) GetThemeData() *IrodoriPoetryThemeData {
	if x != nil {
		return x.ThemeData
	}
	return nil
}

func (x *IrodoriFillPoetryRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type IrodoriChessEquipCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHardMap bool   `protobuf:"varint,2,opt,name=is_hard_map,json=isHardMap,proto3" json:"is_hard_map,omitempty"`
	LevelId   uint32 `protobuf:"varint,12,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	CardId    uint32 `protobuf:"varint,9,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *IrodoriChessEquipCardReq) Reset() {
	*x = IrodoriChessEquipCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[543]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessEquipCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessEquipCardReq) ProtoMessage() {}

func (x *IrodoriChessEquipCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[543]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessEquipCardReq.ProtoReflect.Descriptor instead.
func (*IrodoriChessEquipCardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{543}
}

func (x *IrodoriChessEquipCardReq) GetIsHardMap() bool {
	if x != nil {
		return x.IsHardMap
	}
	return false
}

func (x *IrodoriChessEquipCardReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *IrodoriChessEquipCardReq) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type IrodoriChessEquipCardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	CardId    uint32 `protobuf:"varint,8,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	LevelId   uint32 `protobuf:"varint,5,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsHardMap bool   `protobuf:"varint,12,opt,name=is_hard_map,json=isHardMap,proto3" json:"is_hard_map,omitempty"`
}

func (x *IrodoriChessEquipCardRsp) Reset() {
	*x = IrodoriChessEquipCardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessEquipCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessEquipCardRsp) ProtoMessage() {}

func (x *IrodoriChessEquipCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessEquipCardRsp.ProtoReflect.Descriptor instead.
func (*IrodoriChessEquipCardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{544}
}

func (x *IrodoriChessEquipCardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *IrodoriChessEquipCardRsp) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *IrodoriChessEquipCardRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *IrodoriChessEquipCardRsp) GetIsHardMap() bool {
	if x != nil {
		return x.IsHardMap
	}
	return false
}

type IrodoriChessUnequipCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId    uint32 `protobuf:"varint,8,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	LevelId   uint32 `protobuf:"varint,5,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsHardMap bool   `protobuf:"varint,10,opt,name=is_hard_map,json=isHardMap,proto3" json:"is_hard_map,omitempty"`
}

func (x *IrodoriChessUnequipCardReq) Reset() {
	*x = IrodoriChessUnequipCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessUnequipCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessUnequipCardReq) ProtoMessage() {}

func (x *IrodoriChessUnequipCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessUnequipCardReq.ProtoReflect.Descriptor instead.
func (*IrodoriChessUnequipCardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{545}
}

func (x *IrodoriChessUnequipCardReq) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *IrodoriChessUnequipCardReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *IrodoriChessUnequipCardReq) GetIsHardMap() bool {
	if x != nil {
		return x.IsHardMap
	}
	return false
}

type IrodoriChessUnequipCardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHardMap bool   `protobuf:"varint,10,opt,name=is_hard_map,json=isHardMap,proto3" json:"is_hard_map,omitempty"`
	CardId    uint32 `protobuf:"varint,13,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	LevelId   uint32 `protobuf:"varint,14,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Retcode   int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *IrodoriChessUnequipCardRsp) Reset() {
	*x = IrodoriChessUnequipCardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[546]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriChessUnequipCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriChessUnequipCardRsp) ProtoMessage() {}

func (x *IrodoriChessUnequipCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[546]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriChessUnequipCardRsp.ProtoReflect.Descriptor instead.
func (*IrodoriChessUnequipCardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{546}
}

func (x *IrodoriChessUnequipCardRsp) GetIsHardMap() bool {
	if x != nil {
		return x.IsHardMap
	}
	return false
}

func (x *IrodoriChessUnequipCardRsp) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *IrodoriChessUnequipCardRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *IrodoriChessUnequipCardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type EnterIrodoriChessDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHardMap bool   `protobuf:"varint,1,opt,name=is_hard_map,json=isHardMap,proto3" json:"is_hard_map,omitempty"`
	LevelId   uint32 `protobuf:"varint,11,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *EnterIrodoriChessDungeonReq) Reset() {
	*x = EnterIrodoriChessDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[547]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterIrodoriChessDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterIrodoriChessDungeonReq) ProtoMessage() {}

func (x *EnterIrodoriChessDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[547]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterIrodoriChessDungeonReq.ProtoReflect.Descriptor instead.
func (*EnterIrodoriChessDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{547}
}

func (x *EnterIrodoriChessDungeonReq) GetIsHardMap() bool {
	if x != nil {
		return x.IsHardMap
	}
	return false
}

func (x *EnterIrodoriChessDungeonReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type EnterIrodoriChessDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsHardMap bool   `protobuf:"varint,7,opt,name=is_hard_map,json=isHardMap,proto3" json:"is_hard_map,omitempty"`
	LevelId   uint32 `protobuf:"varint,13,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *EnterIrodoriChessDungeonRsp) Reset() {
	*x = EnterIrodoriChessDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[548]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterIrodoriChessDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterIrodoriChessDungeonRsp) ProtoMessage() {}

func (x *EnterIrodoriChessDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[548]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterIrodoriChessDungeonRsp.ProtoReflect.Descriptor instead.
func (*EnterIrodoriChessDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{548}
}

func (x *EnterIrodoriChessDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *EnterIrodoriChessDungeonRsp) GetIsHardMap() bool {
	if x != nil {
		return x.IsHardMap
	}
	return false
}

func (x *EnterIrodoriChessDungeonRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type IrodoriMasterStartGalleryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId    uint32 `protobuf:"varint,12,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Difficulty uint32 `protobuf:"varint,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
}

func (x *IrodoriMasterStartGalleryReq) Reset() {
	*x = IrodoriMasterStartGalleryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[549]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriMasterStartGalleryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriMasterStartGalleryReq) ProtoMessage() {}

func (x *IrodoriMasterStartGalleryReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[549]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriMasterStartGalleryReq.ProtoReflect.Descriptor instead.
func (*IrodoriMasterStartGalleryReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{549}
}

func (x *IrodoriMasterStartGalleryReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *IrodoriMasterStartGalleryReq) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

type IrodoriMasterStartGalleryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *IrodoriMasterStartGalleryRsp) Reset() {
	*x = IrodoriMasterStartGalleryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[550]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriMasterStartGalleryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriMasterStartGalleryRsp) ProtoMessage() {}

func (x *IrodoriMasterStartGalleryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[550]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriMasterStartGalleryRsp.ProtoReflect.Descriptor instead.
func (*IrodoriMasterStartGalleryRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{550}
}

func (x *IrodoriMasterStartGalleryRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type IrodoriMasterGalleryCgEndNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId   uint32 `protobuf:"varint,15,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	GalleryId uint32 `protobuf:"varint,4,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *IrodoriMasterGalleryCgEndNotify) Reset() {
	*x = IrodoriMasterGalleryCgEndNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[551]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriMasterGalleryCgEndNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriMasterGalleryCgEndNotify) ProtoMessage() {}

func (x *IrodoriMasterGalleryCgEndNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[551]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriMasterGalleryCgEndNotify.ProtoReflect.Descriptor instead.
func (*IrodoriMasterGalleryCgEndNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{551}
}

func (x *IrodoriMasterGalleryCgEndNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *IrodoriMasterGalleryCgEndNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type IrodoriMasterGallerySettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettleInfo *IrodoriMasterGallerySettleInfo `protobuf:"bytes,13,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
	GalleryId  uint32                          `protobuf:"varint,5,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *IrodoriMasterGallerySettleNotify) Reset() {
	*x = IrodoriMasterGallerySettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[552]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrodoriMasterGallerySettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrodoriMasterGallerySettleNotify) ProtoMessage() {}

func (x *IrodoriMasterGallerySettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[552]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrodoriMasterGallerySettleNotify.ProtoReflect.Descriptor instead.
func (*IrodoriMasterGallerySettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{552}
}

func (x *IrodoriMasterGallerySettleNotify) GetSettleInfo() *IrodoriMasterGallerySettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

func (x *IrodoriMasterGallerySettleNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type PhotoPosData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Center   *Vector `protobuf:"bytes,15,opt,name=center,proto3" json:"center,omitempty"`
	OpenTime uint32  `protobuf:"varint,2,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	IsView   bool    `protobuf:"varint,4,opt,name=is_view,json=isView,proto3" json:"is_view,omitempty"`
	PosId    uint32  `protobuf:"varint,9,opt,name=pos_id,json=posId,proto3" json:"pos_id,omitempty"`
	IsOpen   bool    `protobuf:"varint,6,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *PhotoPosData) Reset() {
	*x = PhotoPosData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[553]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoPosData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoPosData) ProtoMessage() {}

func (x *PhotoPosData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[553]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoPosData.ProtoReflect.Descriptor instead.
func (*PhotoPosData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{553}
}

func (x *PhotoPosData) GetCenter() *Vector {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *PhotoPosData) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *PhotoPosData) GetIsView() bool {
	if x != nil {
		return x.IsView
	}
	return false
}

func (x *PhotoPosData) GetPosId() uint32 {
	if x != nil {
		return x.PosId
	}
	return 0
}

func (x *PhotoPosData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type PhotoActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsContentClosed  bool            `protobuf:"varint,4,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	PhotoPosDataList []*PhotoPosData `protobuf:"bytes,12,rep,name=photo_pos_data_list,json=photoPosDataList,proto3" json:"photo_pos_data_list,omitempty"`
}

func (x *PhotoActivityDetailInfo) Reset() {
	*x = PhotoActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[554]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoActivityDetailInfo) ProtoMessage() {}

func (x *PhotoActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[554]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*PhotoActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{554}
}

func (x *PhotoActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *PhotoActivityDetailInfo) GetPhotoPosDataList() []*PhotoPosData {
	if x != nil {
		return x.PhotoPosDataList
	}
	return nil
}

type PhotoActivityFinishReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosId       uint32 `protobuf:"varint,15,opt,name=pos_id,json=posId,proto3" json:"pos_id,omitempty"`
	CheckRootId uint32 `protobuf:"varint,2,opt,name=check_root_id,json=checkRootId,proto3" json:"check_root_id,omitempty"`
	IsSucc      bool   `protobuf:"varint,5,opt,name=is_succ,json=isSucc,proto3" json:"is_succ,omitempty"`
}

func (x *PhotoActivityFinishReq) Reset() {
	*x = PhotoActivityFinishReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[555]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoActivityFinishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoActivityFinishReq) ProtoMessage() {}

func (x *PhotoActivityFinishReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[555]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoActivityFinishReq.ProtoReflect.Descriptor instead.
func (*PhotoActivityFinishReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{555}
}

func (x *PhotoActivityFinishReq) GetPosId() uint32 {
	if x != nil {
		return x.PosId
	}
	return 0
}

func (x *PhotoActivityFinishReq) GetCheckRootId() uint32 {
	if x != nil {
		return x.CheckRootId
	}
	return 0
}

func (x *PhotoActivityFinishReq) GetIsSucc() bool {
	if x != nil {
		return x.IsSucc
	}
	return false
}

type PhotoActivityFinishRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	PosId   uint32 `protobuf:"varint,8,opt,name=pos_id,json=posId,proto3" json:"pos_id,omitempty"`
}

func (x *PhotoActivityFinishRsp) Reset() {
	*x = PhotoActivityFinishRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[556]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoActivityFinishRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoActivityFinishRsp) ProtoMessage() {}

func (x *PhotoActivityFinishRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[556]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoActivityFinishRsp.ProtoReflect.Descriptor instead.
func (*PhotoActivityFinishRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{556}
}

func (x *PhotoActivityFinishRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PhotoActivityFinishRsp) GetPosId() uint32 {
	if x != nil {
		return x.PosId
	}
	return 0
}

type PhotoActivityClientViewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosId uint32 `protobuf:"varint,13,opt,name=pos_id,json=posId,proto3" json:"pos_id,omitempty"`
}

func (x *PhotoActivityClientViewReq) Reset() {
	*x = PhotoActivityClientViewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[557]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoActivityClientViewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoActivityClientViewReq) ProtoMessage() {}

func (x *PhotoActivityClientViewReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[557]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoActivityClientViewReq.ProtoReflect.Descriptor instead.
func (*PhotoActivityClientViewReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{557}
}

func (x *PhotoActivityClientViewReq) GetPosId() uint32 {
	if x != nil {
		return x.PosId
	}
	return 0
}

type PhotoActivityClientViewRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
	PosId   uint32 `protobuf:"varint,8,opt,name=pos_id,json=posId,proto3" json:"pos_id,omitempty"`
}

func (x *PhotoActivityClientViewRsp) Reset() {
	*x = PhotoActivityClientViewRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[558]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoActivityClientViewRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoActivityClientViewRsp) ProtoMessage() {}

func (x *PhotoActivityClientViewRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[558]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoActivityClientViewRsp.ProtoReflect.Descriptor instead.
func (*PhotoActivityClientViewRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{558}
}

func (x *PhotoActivityClientViewRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PhotoActivityClientViewRsp) GetPosId() uint32 {
	if x != nil {
		return x.PosId
	}
	return 0
}

type SpiceStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen       bool   `protobuf:"varint,12,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	SuccessTimes uint32 `protobuf:"varint,1,opt,name=success_times,json=successTimes,proto3" json:"success_times,omitempty"`
	StageId      uint32 `protobuf:"varint,6,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *SpiceStageData) Reset() {
	*x = SpiceStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[559]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiceStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiceStageData) ProtoMessage() {}

func (x *SpiceStageData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[559]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiceStageData.ProtoReflect.Descriptor instead.
func (*SpiceStageData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{559}
}

func (x *SpiceStageData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SpiceStageData) GetSuccessTimes() uint32 {
	if x != nil {
		return x.SuccessTimes
	}
	return 0
}

func (x *SpiceStageData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type SpiceActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentIncreaseAvatarFetterTimes uint32            `protobuf:"varint,15,opt,name=current_increase_avatar_fetter_times,json=currentIncreaseAvatarFetterTimes,proto3" json:"current_increase_avatar_fetter_times,omitempty"`
	SpiceStageDataList               []*SpiceStageData `protobuf:"bytes,7,rep,name=spice_stage_data_list,json=spiceStageDataList,proto3" json:"spice_stage_data_list,omitempty"`
	IncreaseAvatarFetterLimitTimes   uint32            `protobuf:"varint,13,opt,name=increase_avatar_fetter_limit_times,json=increaseAvatarFetterLimitTimes,proto3" json:"increase_avatar_fetter_limit_times,omitempty"`
}

func (x *SpiceActivityDetailInfo) Reset() {
	*x = SpiceActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[560]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiceActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiceActivityDetailInfo) ProtoMessage() {}

func (x *SpiceActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[560]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiceActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*SpiceActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{560}
}

func (x *SpiceActivityDetailInfo) GetCurrentIncreaseAvatarFetterTimes() uint32 {
	if x != nil {
		return x.CurrentIncreaseAvatarFetterTimes
	}
	return 0
}

func (x *SpiceActivityDetailInfo) GetSpiceStageDataList() []*SpiceStageData {
	if x != nil {
		return x.SpiceStageDataList
	}
	return nil
}

func (x *SpiceActivityDetailInfo) GetIncreaseAvatarFetterLimitTimes() uint32 {
	if x != nil {
		return x.IncreaseAvatarFetterLimitTimes
	}
	return 0
}

type SpiceActivityFinishMakeSpiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftTurns          uint32   `protobuf:"varint,4,opt,name=left_turns,json=leftTurns,proto3" json:"left_turns,omitempty"`
	IsSuccess          bool     `protobuf:"varint,9,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	LeftMaterialIdList []uint32 `protobuf:"varint,12,rep,packed,name=left_material_id_list,json=leftMaterialIdList,proto3" json:"left_material_id_list,omitempty"`
	StageId            uint32   `protobuf:"varint,15,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *SpiceActivityFinishMakeSpiceReq) Reset() {
	*x = SpiceActivityFinishMakeSpiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[561]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiceActivityFinishMakeSpiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiceActivityFinishMakeSpiceReq) ProtoMessage() {}

func (x *SpiceActivityFinishMakeSpiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[561]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiceActivityFinishMakeSpiceReq.ProtoReflect.Descriptor instead.
func (*SpiceActivityFinishMakeSpiceReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{561}
}

func (x *SpiceActivityFinishMakeSpiceReq) GetLeftTurns() uint32 {
	if x != nil {
		return x.LeftTurns
	}
	return 0
}

func (x *SpiceActivityFinishMakeSpiceReq) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *SpiceActivityFinishMakeSpiceReq) GetLeftMaterialIdList() []uint32 {
	if x != nil {
		return x.LeftMaterialIdList
	}
	return nil
}

func (x *SpiceActivityFinishMakeSpiceReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type SpiceActivityFinishMakeSpiceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   uint32 `protobuf:"varint,13,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Retcode   int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsSuccess bool   `protobuf:"varint,3,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *SpiceActivityFinishMakeSpiceRsp) Reset() {
	*x = SpiceActivityFinishMakeSpiceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[562]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiceActivityFinishMakeSpiceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiceActivityFinishMakeSpiceRsp) ProtoMessage() {}

func (x *SpiceActivityFinishMakeSpiceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[562]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiceActivityFinishMakeSpiceRsp.ProtoReflect.Descriptor instead.
func (*SpiceActivityFinishMakeSpiceRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{562}
}

func (x *SpiceActivityFinishMakeSpiceRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SpiceActivityFinishMakeSpiceRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *SpiceActivityFinishMakeSpiceRsp) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type SpiceActivityProcessFoodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalFoodList []*ItemParam `protobuf:"bytes,1,rep,name=normal_food_list,json=normalFoodList,proto3" json:"normal_food_list,omitempty"`
}

func (x *SpiceActivityProcessFoodReq) Reset() {
	*x = SpiceActivityProcessFoodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[563]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiceActivityProcessFoodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiceActivityProcessFoodReq) ProtoMessage() {}

func (x *SpiceActivityProcessFoodReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[563]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiceActivityProcessFoodReq.ProtoReflect.Descriptor instead.
func (*SpiceActivityProcessFoodReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{563}
}

func (x *SpiceActivityProcessFoodReq) GetNormalFoodList() []*ItemParam {
	if x != nil {
		return x.NormalFoodList
	}
	return nil
}

type SpiceActivityProcessFoodRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode         int32        `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
	SpecialFoodList []*ItemParam `protobuf:"bytes,14,rep,name=special_food_list,json=specialFoodList,proto3" json:"special_food_list,omitempty"`
	NormalFoodList  []*ItemParam `protobuf:"bytes,1,rep,name=normal_food_list,json=normalFoodList,proto3" json:"normal_food_list,omitempty"`
}

func (x *SpiceActivityProcessFoodRsp) Reset() {
	*x = SpiceActivityProcessFoodRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[564]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiceActivityProcessFoodRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiceActivityProcessFoodRsp) ProtoMessage() {}

func (x *SpiceActivityProcessFoodRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[564]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiceActivityProcessFoodRsp.ProtoReflect.Descriptor instead.
func (*SpiceActivityProcessFoodRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{564}
}

func (x *SpiceActivityProcessFoodRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *SpiceActivityProcessFoodRsp) GetSpecialFoodList() []*ItemParam {
	if x != nil {
		return x.SpecialFoodList
	}
	return nil
}

func (x *SpiceActivityProcessFoodRsp) GetNormalFoodList() []*ItemParam {
	if x != nil {
		return x.NormalFoodList
	}
	return nil
}

type SpiceActivityGivingRecordNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentIncreaseAvatarFetterTimes uint32 `protobuf:"varint,3,opt,name=current_increase_avatar_fetter_times,json=currentIncreaseAvatarFetterTimes,proto3" json:"current_increase_avatar_fetter_times,omitempty"`
	IncreaseAvatarFetterLimitTimes   uint32 `protobuf:"varint,7,opt,name=increase_avatar_fetter_limit_times,json=increaseAvatarFetterLimitTimes,proto3" json:"increase_avatar_fetter_limit_times,omitempty"`
	AvatarId                         uint32 `protobuf:"varint,11,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *SpiceActivityGivingRecordNotify) Reset() {
	*x = SpiceActivityGivingRecordNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[565]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiceActivityGivingRecordNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiceActivityGivingRecordNotify) ProtoMessage() {}

func (x *SpiceActivityGivingRecordNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[565]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiceActivityGivingRecordNotify.ProtoReflect.Descriptor instead.
func (*SpiceActivityGivingRecordNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{565}
}

func (x *SpiceActivityGivingRecordNotify) GetCurrentIncreaseAvatarFetterTimes() uint32 {
	if x != nil {
		return x.CurrentIncreaseAvatarFetterTimes
	}
	return 0
}

func (x *SpiceActivityGivingRecordNotify) GetIncreaseAvatarFetterLimitTimes() uint32 {
	if x != nil {
		return x.IncreaseAvatarFetterLimitTimes
	}
	return 0
}

func (x *SpiceActivityGivingRecordNotify) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type GachaStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId      uint32            `protobuf:"varint,15,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	TargetNumMap map[uint32]uint32 `protobuf:"bytes,14,rep,name=target_num_map,json=targetNumMap,proto3" json:"target_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsOpen       bool              `protobuf:"varint,13,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *GachaStageData) Reset() {
	*x = GachaStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[566]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaStageData) ProtoMessage() {}

func (x *GachaStageData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[566]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaStageData.ProtoReflect.Descriptor instead.
func (*GachaStageData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{566}
}

func (x *GachaStageData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *GachaStageData) GetTargetNumMap() map[uint32]uint32 {
	if x != nil {
		return x.TargetNumMap
	}
	return nil
}

func (x *GachaStageData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type GachaActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HaveGetRobotList      []uint32          `protobuf:"varint,6,rep,packed,name=have_get_robot_list,json=haveGetRobotList,proto3" json:"have_get_robot_list,omitempty"`
	GachaStageDataList    []*GachaStageData `protobuf:"bytes,4,rep,name=gacha_stage_data_list,json=gachaStageDataList,proto3" json:"gacha_stage_data_list,omitempty"`
	HaveRewardRobotNumMap map[uint32]uint32 `protobuf:"bytes,8,rep,name=have_reward_robot_num_map,json=haveRewardRobotNumMap,proto3" json:"have_reward_robot_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TechCreateRobotId     uint32            `protobuf:"varint,3,opt,name=tech_create_robot_id,json=techCreateRobotId,proto3" json:"tech_create_robot_id,omitempty"`
	RobotNumMap           map[uint32]uint32 `protobuf:"bytes,5,rep,name=robot_num_map,json=robotNumMap,proto3" json:"robot_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RobotFinishNum        uint32            `protobuf:"varint,12,opt,name=robot_finish_num,json=robotFinishNum,proto3" json:"robot_finish_num,omitempty"`
}

func (x *GachaActivityDetailInfo) Reset() {
	*x = GachaActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[567]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaActivityDetailInfo) ProtoMessage() {}

func (x *GachaActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[567]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*GachaActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{567}
}

func (x *GachaActivityDetailInfo) GetHaveGetRobotList() []uint32 {
	if x != nil {
		return x.HaveGetRobotList
	}
	return nil
}

func (x *GachaActivityDetailInfo) GetGachaStageDataList() []*GachaStageData {
	if x != nil {
		return x.GachaStageDataList
	}
	return nil
}

func (x *GachaActivityDetailInfo) GetHaveRewardRobotNumMap() map[uint32]uint32 {
	if x != nil {
		return x.HaveRewardRobotNumMap
	}
	return nil
}

func (x *GachaActivityDetailInfo) GetTechCreateRobotId() uint32 {
	if x != nil {
		return x.TechCreateRobotId
	}
	return 0
}

func (x *GachaActivityDetailInfo) GetRobotNumMap() map[uint32]uint32 {
	if x != nil {
		return x.RobotNumMap
	}
	return nil
}

func (x *GachaActivityDetailInfo) GetRobotFinishNum() uint32 {
	if x != nil {
		return x.RobotFinishNum
	}
	return 0
}

type GachaActivityPercentNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemStage    uint32            `protobuf:"varint,14,opt,name=item_stage,json=itemStage,proto3" json:"item_stage,omitempty"`
	TargetNumMap map[uint32]uint32 `protobuf:"bytes,6,rep,name=target_num_map,json=targetNumMap,proto3" json:"target_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SubItemStage uint32            `protobuf:"varint,2,opt,name=sub_item_stage,json=subItemStage,proto3" json:"sub_item_stage,omitempty"`
	Percent      uint32            `protobuf:"varint,13,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (x *GachaActivityPercentNotify) Reset() {
	*x = GachaActivityPercentNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[568]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaActivityPercentNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaActivityPercentNotify) ProtoMessage() {}

func (x *GachaActivityPercentNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[568]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaActivityPercentNotify.ProtoReflect.Descriptor instead.
func (*GachaActivityPercentNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{568}
}

func (x *GachaActivityPercentNotify) GetItemStage() uint32 {
	if x != nil {
		return x.ItemStage
	}
	return 0
}

func (x *GachaActivityPercentNotify) GetTargetNumMap() map[uint32]uint32 {
	if x != nil {
		return x.TargetNumMap
	}
	return nil
}

func (x *GachaActivityPercentNotify) GetSubItemStage() uint32 {
	if x != nil {
		return x.SubItemStage
	}
	return 0
}

func (x *GachaActivityPercentNotify) GetPercent() uint32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type GachaActivityUpdateElemNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElemType uint32 `protobuf:"varint,10,opt,name=elem_type,json=elemType,proto3" json:"elem_type,omitempty"`
}

func (x *GachaActivityUpdateElemNotify) Reset() {
	*x = GachaActivityUpdateElemNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[569]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaActivityUpdateElemNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaActivityUpdateElemNotify) ProtoMessage() {}

func (x *GachaActivityUpdateElemNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[569]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaActivityUpdateElemNotify.ProtoReflect.Descriptor instead.
func (*GachaActivityUpdateElemNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{569}
}

func (x *GachaActivityUpdateElemNotify) GetElemType() uint32 {
	if x != nil {
		return x.ElemType
	}
	return 0
}

type GachaActivityCreateRobotReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GachaActivityCreateRobotReq) Reset() {
	*x = GachaActivityCreateRobotReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[570]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaActivityCreateRobotReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaActivityCreateRobotReq) ProtoMessage() {}

func (x *GachaActivityCreateRobotReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[570]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaActivityCreateRobotReq.ProtoReflect.Descriptor instead.
func (*GachaActivityCreateRobotReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{570}
}

type GachaActivityCreateRobotRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotId uint32 `protobuf:"varint,1,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
	Retcode int32  `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GachaActivityCreateRobotRsp) Reset() {
	*x = GachaActivityCreateRobotRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[571]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaActivityCreateRobotRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaActivityCreateRobotRsp) ProtoMessage() {}

func (x *GachaActivityCreateRobotRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[571]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaActivityCreateRobotRsp.ProtoReflect.Descriptor instead.
func (*GachaActivityCreateRobotRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{571}
}

func (x *GachaActivityCreateRobotRsp) GetRobotId() uint32 {
	if x != nil {
		return x.RobotId
	}
	return 0
}

func (x *GachaActivityCreateRobotRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GachaActivityTakeRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotNumMap map[uint32]uint32 `protobuf:"bytes,12,rep,name=robot_num_map,json=robotNumMap,proto3" json:"robot_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GachaActivityTakeRewardReq) Reset() {
	*x = GachaActivityTakeRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[572]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaActivityTakeRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaActivityTakeRewardReq) ProtoMessage() {}

func (x *GachaActivityTakeRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[572]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaActivityTakeRewardReq.ProtoReflect.Descriptor instead.
func (*GachaActivityTakeRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{572}
}

func (x *GachaActivityTakeRewardReq) GetRobotNumMap() map[uint32]uint32 {
	if x != nil {
		return x.RobotNumMap
	}
	return nil
}

type GachaActivityTakeRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotNumMap map[uint32]uint32 `protobuf:"bytes,3,rep,name=robot_num_map,json=robotNumMap,proto3" json:"robot_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Retcode     int32             `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GachaActivityTakeRewardRsp) Reset() {
	*x = GachaActivityTakeRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[573]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaActivityTakeRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaActivityTakeRewardRsp) ProtoMessage() {}

func (x *GachaActivityTakeRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[573]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaActivityTakeRewardRsp.ProtoReflect.Descriptor instead.
func (*GachaActivityTakeRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{573}
}

func (x *GachaActivityTakeRewardRsp) GetRobotNumMap() map[uint32]uint32 {
	if x != nil {
		return x.RobotNumMap
	}
	return nil
}

func (x *GachaActivityTakeRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GachaActivityResetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *GachaActivityResetReq) Reset() {
	*x = GachaActivityResetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[574]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaActivityResetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaActivityResetReq) ProtoMessage() {}

func (x *GachaActivityResetReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[574]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaActivityResetReq.ProtoReflect.Descriptor instead.
func (*GachaActivityResetReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{574}
}

func (x *GachaActivityResetReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type GachaActivityResetRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
	StageId uint32 `protobuf:"varint,6,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *GachaActivityResetRsp) Reset() {
	*x = GachaActivityResetRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[575]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaActivityResetRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaActivityResetRsp) ProtoMessage() {}

func (x *GachaActivityResetRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[575]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaActivityResetRsp.ProtoReflect.Descriptor instead.
func (*GachaActivityResetRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{575}
}

func (x *GachaActivityResetRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GachaActivityResetRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type GachaActivityNextStageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GachaActivityNextStageReq) Reset() {
	*x = GachaActivityNextStageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[576]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaActivityNextStageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaActivityNextStageReq) ProtoMessage() {}

func (x *GachaActivityNextStageReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[576]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaActivityNextStageReq.ProtoReflect.Descriptor instead.
func (*GachaActivityNextStageReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{576}
}

type GachaActivityNextStageRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,13,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Retcode int32  `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GachaActivityNextStageRsp) Reset() {
	*x = GachaActivityNextStageRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[577]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaActivityNextStageRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaActivityNextStageRsp) ProtoMessage() {}

func (x *GachaActivityNextStageRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[577]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaActivityNextStageRsp.ProtoReflect.Descriptor instead.
func (*GachaActivityNextStageRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{577}
}

func (x *GachaActivityNextStageRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *GachaActivityNextStageRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ActivityGiveFriendGiftReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint32            `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	ScheduleId uint32            `protobuf:"varint,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	GiftNumMap map[uint32]uint32 `protobuf:"bytes,4,rep,name=gift_num_map,json=giftNumMap,proto3" json:"gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ActivityGiveFriendGiftReq) Reset() {
	*x = ActivityGiveFriendGiftReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[578]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityGiveFriendGiftReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityGiveFriendGiftReq) ProtoMessage() {}

func (x *ActivityGiveFriendGiftReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[578]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityGiveFriendGiftReq.ProtoReflect.Descriptor instead.
func (*ActivityGiveFriendGiftReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{578}
}

func (x *ActivityGiveFriendGiftReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ActivityGiveFriendGiftReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityGiveFriendGiftReq) GetGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.GiftNumMap
	}
	return nil
}

type ActivityGiveFriendGiftRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitGiftList []uint32 `protobuf:"varint,3,rep,packed,name=limit_gift_list,json=limitGiftList,proto3" json:"limit_gift_list,omitempty"`
	ScheduleId    uint32   `protobuf:"varint,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode       int32    `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ActivityGiveFriendGiftRsp) Reset() {
	*x = ActivityGiveFriendGiftRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[579]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityGiveFriendGiftRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityGiveFriendGiftRsp) ProtoMessage() {}

func (x *ActivityGiveFriendGiftRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[579]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityGiveFriendGiftRsp.ProtoReflect.Descriptor instead.
func (*ActivityGiveFriendGiftRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{579}
}

func (x *ActivityGiveFriendGiftRsp) GetLimitGiftList() []uint32 {
	if x != nil {
		return x.LimitGiftList
	}
	return nil
}

func (x *ActivityGiveFriendGiftRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityGiveFriendGiftRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ActivityRecvGiftData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            uint32            `protobuf:"varint,15,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname       string            `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	RemarkName     string            `protobuf:"bytes,10,opt,name=remark_name,json=remarkName,proto3" json:"remark_name,omitempty"`
	ProfilePicture *ProfilePicture   `protobuf:"bytes,14,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	GiftNumMap     map[uint32]uint32 `protobuf:"bytes,8,rep,name=gift_num_map,json=giftNumMap,proto3" json:"gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ActivityRecvGiftData) Reset() {
	*x = ActivityRecvGiftData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[580]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityRecvGiftData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityRecvGiftData) ProtoMessage() {}

func (x *ActivityRecvGiftData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[580]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityRecvGiftData.ProtoReflect.Descriptor instead.
func (*ActivityRecvGiftData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{580}
}

func (x *ActivityRecvGiftData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ActivityRecvGiftData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ActivityRecvGiftData) GetRemarkName() string {
	if x != nil {
		return x.RemarkName
	}
	return ""
}

func (x *ActivityRecvGiftData) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *ActivityRecvGiftData) GetGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.GiftNumMap
	}
	return nil
}

type ActivityGetRecvGiftListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,8,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *ActivityGetRecvGiftListReq) Reset() {
	*x = ActivityGetRecvGiftListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[581]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityGetRecvGiftListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityGetRecvGiftListReq) ProtoMessage() {}

func (x *ActivityGetRecvGiftListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[581]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityGetRecvGiftListReq.ProtoReflect.Descriptor instead.
func (*ActivityGetRecvGiftListReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{581}
}

func (x *ActivityGetRecvGiftListReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type ActivityGetRecvGiftListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode      int32                   `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RecvGiftList []*ActivityRecvGiftData `protobuf:"bytes,11,rep,name=recv_gift_list,json=recvGiftList,proto3" json:"recv_gift_list,omitempty"`
	ScheduleId   uint32                  `protobuf:"varint,6,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *ActivityGetRecvGiftListRsp) Reset() {
	*x = ActivityGetRecvGiftListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[582]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityGetRecvGiftListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityGetRecvGiftListRsp) ProtoMessage() {}

func (x *ActivityGetRecvGiftListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[582]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityGetRecvGiftListRsp.ProtoReflect.Descriptor instead.
func (*ActivityGetRecvGiftListRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{582}
}

func (x *ActivityGetRecvGiftListRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ActivityGetRecvGiftListRsp) GetRecvGiftList() []*ActivityRecvGiftData {
	if x != nil {
		return x.RecvGiftList
	}
	return nil
}

func (x *ActivityGetRecvGiftListRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type ActivityHaveRecvGiftNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,7,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *ActivityHaveRecvGiftNotify) Reset() {
	*x = ActivityHaveRecvGiftNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[583]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityHaveRecvGiftNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityHaveRecvGiftNotify) ProtoMessage() {}

func (x *ActivityHaveRecvGiftNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[583]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityHaveRecvGiftNotify.ProtoReflect.Descriptor instead.
func (*ActivityHaveRecvGiftNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{583}
}

func (x *ActivityHaveRecvGiftNotify) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type ActivityAcceptGiftResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnacceptGiftNumMap map[uint32]uint32 `protobuf:"bytes,3,rep,name=unaccept_gift_num_map,json=unacceptGiftNumMap,proto3" json:"unaccept_gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Uid                uint32            `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	AcceptGiftNumMap   map[uint32]uint32 `protobuf:"bytes,13,rep,name=accept_gift_num_map,json=acceptGiftNumMap,proto3" json:"accept_gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ActivityAcceptGiftResultInfo) Reset() {
	*x = ActivityAcceptGiftResultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[584]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityAcceptGiftResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityAcceptGiftResultInfo) ProtoMessage() {}

func (x *ActivityAcceptGiftResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[584]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityAcceptGiftResultInfo.ProtoReflect.Descriptor instead.
func (*ActivityAcceptGiftResultInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{584}
}

func (x *ActivityAcceptGiftResultInfo) GetUnacceptGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.UnacceptGiftNumMap
	}
	return nil
}

func (x *ActivityAcceptGiftResultInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ActivityAcceptGiftResultInfo) GetAcceptGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.AcceptGiftNumMap
	}
	return nil
}

type ActivityAcceptGiveGiftReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Uid        uint32 `protobuf:"varint,12,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *ActivityAcceptGiveGiftReq) Reset() {
	*x = ActivityAcceptGiveGiftReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[585]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityAcceptGiveGiftReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityAcceptGiveGiftReq) ProtoMessage() {}

func (x *ActivityAcceptGiveGiftReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[585]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityAcceptGiveGiftReq.ProtoReflect.Descriptor instead.
func (*ActivityAcceptGiveGiftReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{585}
}

func (x *ActivityAcceptGiveGiftReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityAcceptGiveGiftReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type ActivityAcceptGiveGiftRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptGiftResultInfo *ActivityAcceptGiftResultInfo `protobuf:"bytes,4,opt,name=accept_gift_result_info,json=acceptGiftResultInfo,proto3" json:"accept_gift_result_info,omitempty"`
	Retcode              int32                         `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ScheduleId           uint32                        `protobuf:"varint,10,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *ActivityAcceptGiveGiftRsp) Reset() {
	*x = ActivityAcceptGiveGiftRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[586]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityAcceptGiveGiftRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityAcceptGiveGiftRsp) ProtoMessage() {}

func (x *ActivityAcceptGiveGiftRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[586]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityAcceptGiveGiftRsp.ProtoReflect.Descriptor instead.
func (*ActivityAcceptGiveGiftRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{586}
}

func (x *ActivityAcceptGiveGiftRsp) GetAcceptGiftResultInfo() *ActivityAcceptGiftResultInfo {
	if x != nil {
		return x.AcceptGiftResultInfo
	}
	return nil
}

func (x *ActivityAcceptGiveGiftRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ActivityAcceptGiveGiftRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type ActivityAcceptAllGiveGiftReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *ActivityAcceptAllGiveGiftReq) Reset() {
	*x = ActivityAcceptAllGiveGiftReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[587]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityAcceptAllGiveGiftReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityAcceptAllGiveGiftReq) ProtoMessage() {}

func (x *ActivityAcceptAllGiveGiftReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[587]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityAcceptAllGiveGiftReq.ProtoReflect.Descriptor instead.
func (*ActivityAcceptAllGiveGiftReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{587}
}

func (x *ActivityAcceptAllGiveGiftReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type ActivityAcceptAllGiveGiftRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptGiftResultInfoList []*ActivityAcceptGiftResultInfo `protobuf:"bytes,5,rep,name=accept_gift_result_info_list,json=acceptGiftResultInfoList,proto3" json:"accept_gift_result_info_list,omitempty"`
	ScheduleId               uint32                          `protobuf:"varint,10,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode                  int32                           `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ActivityAcceptAllGiveGiftRsp) Reset() {
	*x = ActivityAcceptAllGiveGiftRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[588]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityAcceptAllGiveGiftRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityAcceptAllGiveGiftRsp) ProtoMessage() {}

func (x *ActivityAcceptAllGiveGiftRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[588]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityAcceptAllGiveGiftRsp.ProtoReflect.Descriptor instead.
func (*ActivityAcceptAllGiveGiftRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{588}
}

func (x *ActivityAcceptAllGiveGiftRsp) GetAcceptGiftResultInfoList() []*ActivityAcceptGiftResultInfo {
	if x != nil {
		return x.AcceptGiftResultInfoList
	}
	return nil
}

func (x *ActivityAcceptAllGiveGiftRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityAcceptAllGiveGiftRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ActivityGetCanGiveFriendGiftReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,8,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *ActivityGetCanGiveFriendGiftReq) Reset() {
	*x = ActivityGetCanGiveFriendGiftReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[589]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityGetCanGiveFriendGiftReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityGetCanGiveFriendGiftReq) ProtoMessage() {}

func (x *ActivityGetCanGiveFriendGiftReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[589]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityGetCanGiveFriendGiftReq.ProtoReflect.Descriptor instead.
func (*ActivityGetCanGiveFriendGiftReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{589}
}

func (x *ActivityGetCanGiveFriendGiftReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type ActivityGetCanGiveFriendGiftRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32            `protobuf:"varint,7,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode    int32             `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GiftNumMap map[uint32]uint32 `protobuf:"bytes,14,rep,name=gift_num_map,json=giftNumMap,proto3" json:"gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ActivityGetCanGiveFriendGiftRsp) Reset() {
	*x = ActivityGetCanGiveFriendGiftRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[590]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityGetCanGiveFriendGiftRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityGetCanGiveFriendGiftRsp) ProtoMessage() {}

func (x *ActivityGetCanGiveFriendGiftRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[590]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityGetCanGiveFriendGiftRsp.ProtoReflect.Descriptor instead.
func (*ActivityGetCanGiveFriendGiftRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{590}
}

func (x *ActivityGetCanGiveFriendGiftRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityGetCanGiveFriendGiftRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ActivityGetCanGiveFriendGiftRsp) GetGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.GiftNumMap
	}
	return nil
}

type ActivitySetGiftWishReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftNumMap map[uint32]uint32 `protobuf:"bytes,2,rep,name=gift_num_map,json=giftNumMap,proto3" json:"gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ScheduleId uint32            `protobuf:"varint,14,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *ActivitySetGiftWishReq) Reset() {
	*x = ActivitySetGiftWishReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[591]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivitySetGiftWishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivitySetGiftWishReq) ProtoMessage() {}

func (x *ActivitySetGiftWishReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[591]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivitySetGiftWishReq.ProtoReflect.Descriptor instead.
func (*ActivitySetGiftWishReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{591}
}

func (x *ActivitySetGiftWishReq) GetGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.GiftNumMap
	}
	return nil
}

func (x *ActivitySetGiftWishReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type ActivitySetGiftWishRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,15,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Retcode    int32  `protobuf:"varint,7,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ActivitySetGiftWishRsp) Reset() {
	*x = ActivitySetGiftWishRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[592]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivitySetGiftWishRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivitySetGiftWishRsp) ProtoMessage() {}

func (x *ActivitySetGiftWishRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[592]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivitySetGiftWishRsp.ProtoReflect.Descriptor instead.
func (*ActivitySetGiftWishRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{592}
}

func (x *ActivitySetGiftWishRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivitySetGiftWishRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ActivityFriendGiftWishData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname       string            `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname,omitempty"`
	RemarkName     string            `protobuf:"bytes,3,opt,name=remark_name,json=remarkName,proto3" json:"remark_name,omitempty"`
	ProfilePicture *ProfilePicture   `protobuf:"bytes,11,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	GiftNumMap     map[uint32]uint32 `protobuf:"bytes,9,rep,name=gift_num_map,json=giftNumMap,proto3" json:"gift_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Uid            uint32            `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *ActivityFriendGiftWishData) Reset() {
	*x = ActivityFriendGiftWishData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[593]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityFriendGiftWishData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityFriendGiftWishData) ProtoMessage() {}

func (x *ActivityFriendGiftWishData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[593]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityFriendGiftWishData.ProtoReflect.Descriptor instead.
func (*ActivityFriendGiftWishData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{593}
}

func (x *ActivityFriendGiftWishData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ActivityFriendGiftWishData) GetRemarkName() string {
	if x != nil {
		return x.RemarkName
	}
	return ""
}

func (x *ActivityFriendGiftWishData) GetProfilePicture() *ProfilePicture {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *ActivityFriendGiftWishData) GetGiftNumMap() map[uint32]uint32 {
	if x != nil {
		return x.GiftNumMap
	}
	return nil
}

func (x *ActivityFriendGiftWishData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type ActivityGetFriendGiftWishListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId uint32 `protobuf:"varint,6,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *ActivityGetFriendGiftWishListReq) Reset() {
	*x = ActivityGetFriendGiftWishListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[594]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityGetFriendGiftWishListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityGetFriendGiftWishListReq) ProtoMessage() {}

func (x *ActivityGetFriendGiftWishListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[594]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityGetFriendGiftWishListReq.ProtoReflect.Descriptor instead.
func (*ActivityGetFriendGiftWishListReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{594}
}

func (x *ActivityGetFriendGiftWishListReq) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type ActivityGetFriendGiftWishListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode            int32                         `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	FriendGiftWishList []*ActivityFriendGiftWishData `protobuf:"bytes,11,rep,name=friend_gift_wish_list,json=friendGiftWishList,proto3" json:"friend_gift_wish_list,omitempty"`
	ScheduleId         uint32                        `protobuf:"varint,10,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *ActivityGetFriendGiftWishListRsp) Reset() {
	*x = ActivityGetFriendGiftWishListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[595]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityGetFriendGiftWishListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityGetFriendGiftWishListRsp) ProtoMessage() {}

func (x *ActivityGetFriendGiftWishListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[595]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityGetFriendGiftWishListRsp.ProtoReflect.Descriptor instead.
func (*ActivityGetFriendGiftWishListRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{595}
}

func (x *ActivityGetFriendGiftWishListRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ActivityGetFriendGiftWishListRsp) GetFriendGiftWishList() []*ActivityFriendGiftWishData {
	if x != nil {
		return x.FriendGiftWishList
	}
	return nil
}

func (x *ActivityGetFriendGiftWishListRsp) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type LuminanceStoneChallengeActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestScore              uint32 `protobuf:"varint,11,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
	IsContentClosed        bool   `protobuf:"varint,6,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	IsFinalGalleryComplete bool   `protobuf:"varint,12,opt,name=is_final_gallery_complete,json=isFinalGalleryComplete,proto3" json:"is_final_gallery_complete,omitempty"`
	CurrentStageId         uint32 `protobuf:"varint,15,opt,name=current_stage_id,json=currentStageId,proto3" json:"current_stage_id,omitempty"`
}

func (x *LuminanceStoneChallengeActivityDetailInfo) Reset() {
	*x = LuminanceStoneChallengeActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[596]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuminanceStoneChallengeActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuminanceStoneChallengeActivityDetailInfo) ProtoMessage() {}

func (x *LuminanceStoneChallengeActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[596]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuminanceStoneChallengeActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*LuminanceStoneChallengeActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{596}
}

func (x *LuminanceStoneChallengeActivityDetailInfo) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

func (x *LuminanceStoneChallengeActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *LuminanceStoneChallengeActivityDetailInfo) GetIsFinalGalleryComplete() bool {
	if x != nil {
		return x.IsFinalGalleryComplete
	}
	return false
}

func (x *LuminanceStoneChallengeActivityDetailInfo) GetCurrentStageId() uint32 {
	if x != nil {
		return x.CurrentStageId
	}
	return 0
}

type LuminanceStoneChallengeSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettleInfo  *LuminanceStoneChallengeGallerySettleInfo `protobuf:"bytes,13,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
	IsNewRecord bool                                      `protobuf:"varint,12,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
}

func (x *LuminanceStoneChallengeSettleInfo) Reset() {
	*x = LuminanceStoneChallengeSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[597]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuminanceStoneChallengeSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuminanceStoneChallengeSettleInfo) ProtoMessage() {}

func (x *LuminanceStoneChallengeSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[597]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuminanceStoneChallengeSettleInfo.ProtoReflect.Descriptor instead.
func (*LuminanceStoneChallengeSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{597}
}

func (x *LuminanceStoneChallengeSettleInfo) GetSettleInfo() *LuminanceStoneChallengeGallerySettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

func (x *LuminanceStoneChallengeSettleInfo) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

type LuminanceStoneChallengeSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId  uint32                             `protobuf:"varint,10,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	SettleInfo *LuminanceStoneChallengeSettleInfo `protobuf:"bytes,13,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
}

func (x *LuminanceStoneChallengeSettleNotify) Reset() {
	*x = LuminanceStoneChallengeSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[598]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuminanceStoneChallengeSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuminanceStoneChallengeSettleNotify) ProtoMessage() {}

func (x *LuminanceStoneChallengeSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[598]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuminanceStoneChallengeSettleNotify.ProtoReflect.Descriptor instead.
func (*LuminanceStoneChallengeSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{598}
}

func (x *LuminanceStoneChallengeSettleNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *LuminanceStoneChallengeSettleNotify) GetSettleInfo() *LuminanceStoneChallengeSettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

type RogueDiaryDungeonRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinish   bool   `protobuf:"varint,10,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	MaxRound   uint32 `protobuf:"varint,5,opt,name=max_round,json=maxRound,proto3" json:"max_round,omitempty"`
	FinishTime uint32 `protobuf:"varint,15,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Difficulty uint32 `protobuf:"varint,13,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
}

func (x *RogueDiaryDungeonRecord) Reset() {
	*x = RogueDiaryDungeonRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[599]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryDungeonRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryDungeonRecord) ProtoMessage() {}

func (x *RogueDiaryDungeonRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[599]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryDungeonRecord.ProtoReflect.Descriptor instead.
func (*RogueDiaryDungeonRecord) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{599}
}

func (x *RogueDiaryDungeonRecord) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *RogueDiaryDungeonRecord) GetMaxRound() uint32 {
	if x != nil {
		return x.MaxRound
	}
	return 0
}

func (x *RogueDiaryDungeonRecord) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *RogueDiaryDungeonRecord) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

type RogueDiaryStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId    uint32                   `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	BestRecord *RogueDiaryDungeonRecord `protobuf:"bytes,12,opt,name=best_record,json=bestRecord,proto3" json:"best_record,omitempty"`
	IsHaveTry  bool                     `protobuf:"varint,10,opt,name=is_have_try,json=isHaveTry,proto3" json:"is_have_try,omitempty"`
}

func (x *RogueDiaryStageInfo) Reset() {
	*x = RogueDiaryStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[600]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryStageInfo) ProtoMessage() {}

func (x *RogueDiaryStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[600]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryStageInfo.ProtoReflect.Descriptor instead.
func (*RogueDiaryStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{600}
}

func (x *RogueDiaryStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RogueDiaryStageInfo) GetBestRecord() *RogueDiaryDungeonRecord {
	if x != nil {
		return x.BestRecord
	}
	return nil
}

func (x *RogueDiaryStageInfo) GetIsHaveTry() bool {
	if x != nil {
		return x.IsHaveTry
	}
	return false
}

type RogueDiaryProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difficulty       uint32   `protobuf:"varint,7,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	OptionalCardList []uint32 `protobuf:"varint,4,rep,packed,name=optional_card_list,json=optionalCardList,proto3" json:"optional_card_list,omitempty"`
	IsEnterDungeon   bool     `protobuf:"varint,9,opt,name=is_enter_dungeon,json=isEnterDungeon,proto3" json:"is_enter_dungeon,omitempty"`
	StageId          uint32   `protobuf:"varint,12,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	CurRound         uint32   `protobuf:"varint,3,opt,name=cur_round,json=curRound,proto3" json:"cur_round,omitempty"`
}

func (x *RogueDiaryProgress) Reset() {
	*x = RogueDiaryProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[601]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryProgress) ProtoMessage() {}

func (x *RogueDiaryProgress) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[601]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryProgress.ProtoReflect.Descriptor instead.
func (*RogueDiaryProgress) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{601}
}

func (x *RogueDiaryProgress) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *RogueDiaryProgress) GetOptionalCardList() []uint32 {
	if x != nil {
		return x.OptionalCardList
	}
	return nil
}

func (x *RogueDiaryProgress) GetIsEnterDungeon() bool {
	if x != nil {
		return x.IsEnterDungeon
	}
	return false
}

func (x *RogueDiaryProgress) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RogueDiaryProgress) GetCurRound() uint32 {
	if x != nil {
		return x.CurRound
	}
	return 0
}

type RogueDiaryActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageList       []*RogueDiaryStageInfo `protobuf:"bytes,11,rep,name=stage_list,json=stageList,proto3" json:"stage_list,omitempty"`
	IsHaveProgress  bool                   `protobuf:"varint,10,opt,name=is_have_progress,json=isHaveProgress,proto3" json:"is_have_progress,omitempty"`
	IsContentClosed bool                   `protobuf:"varint,2,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	CurProgress     *RogueDiaryProgress    `protobuf:"bytes,7,opt,name=cur_progress,json=curProgress,proto3" json:"cur_progress,omitempty"`
}

func (x *RogueDiaryActivityDetailInfo) Reset() {
	*x = RogueDiaryActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[602]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryActivityDetailInfo) ProtoMessage() {}

func (x *RogueDiaryActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[602]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*RogueDiaryActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{602}
}

func (x *RogueDiaryActivityDetailInfo) GetStageList() []*RogueDiaryStageInfo {
	if x != nil {
		return x.StageList
	}
	return nil
}

func (x *RogueDiaryActivityDetailInfo) GetIsHaveProgress() bool {
	if x != nil {
		return x.IsHaveProgress
	}
	return false
}

func (x *RogueDiaryActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *RogueDiaryActivityDetailInfo) GetCurProgress() *RogueDiaryProgress {
	if x != nil {
		return x.CurProgress
	}
	return nil
}

type RogueDiaryAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar            *ActivityDungeonAvatar          `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Level             uint32                          `protobuf:"varint,14,opt,name=level,proto3" json:"level,omitempty"`
	TiredRound        uint32                          `protobuf:"varint,13,opt,name=tired_round,json=tiredRound,proto3" json:"tired_round,omitempty"`
	DisableStatusList []RogueDiaryAvatarDisableStatus `protobuf:"varint,9,rep,packed,name=disable_status_list,json=disableStatusList,proto3,enum=proto.RogueDiaryAvatarDisableStatus" json:"disable_status_list,omitempty"`
}

func (x *RogueDiaryAvatar) Reset() {
	*x = RogueDiaryAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[603]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryAvatar) ProtoMessage() {}

func (x *RogueDiaryAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[603]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryAvatar.ProtoReflect.Descriptor instead.
func (*RogueDiaryAvatar) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{603}
}

func (x *RogueDiaryAvatar) GetAvatar() *ActivityDungeonAvatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *RogueDiaryAvatar) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RogueDiaryAvatar) GetTiredRound() uint32 {
	if x != nil {
		return x.TiredRound
	}
	return 0
}

func (x *RogueDiaryAvatar) GetDisableStatusList() []RogueDiaryAvatarDisableStatus {
	if x != nil {
		return x.DisableStatusList
	}
	return nil
}

type RogueDiaryRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterList []*Uint32Pair `protobuf:"bytes,1,rep,name=monster_list,json=monsterList,proto3" json:"monster_list,omitempty"`
	IsBoss      bool          `protobuf:"varint,3,opt,name=is_boss,json=isBoss,proto3" json:"is_boss,omitempty"`
	ConfigId    uint32        `protobuf:"varint,7,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (x *RogueDiaryRoomInfo) Reset() {
	*x = RogueDiaryRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[604]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryRoomInfo) ProtoMessage() {}

func (x *RogueDiaryRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[604]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryRoomInfo.ProtoReflect.Descriptor instead.
func (*RogueDiaryRoomInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{604}
}

func (x *RogueDiaryRoomInfo) GetMonsterList() []*Uint32Pair {
	if x != nil {
		return x.MonsterList
	}
	return nil
}

func (x *RogueDiaryRoomInfo) GetIsBoss() bool {
	if x != nil {
		return x.IsBoss
	}
	return false
}

func (x *RogueDiaryRoomInfo) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

type StartRogueDiaryPlayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difficulty uint32 `protobuf:"varint,1,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	StageId    uint32 `protobuf:"varint,12,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *StartRogueDiaryPlayReq) Reset() {
	*x = StartRogueDiaryPlayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[605]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRogueDiaryPlayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRogueDiaryPlayReq) ProtoMessage() {}

func (x *StartRogueDiaryPlayReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[605]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRogueDiaryPlayReq.ProtoReflect.Descriptor instead.
func (*StartRogueDiaryPlayReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{605}
}

func (x *StartRogueDiaryPlayReq) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *StartRogueDiaryPlayReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type StartRogueDiaryPlayRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode         int32               `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	TrialAvatarList []*RogueDiaryAvatar `protobuf:"bytes,13,rep,name=trial_avatar_list,json=trialAvatarList,proto3" json:"trial_avatar_list,omitempty"`
	RandCardList    []uint32            `protobuf:"varint,12,rep,packed,name=rand_card_list,json=randCardList,proto3" json:"rand_card_list,omitempty"`
	AvatarList      []*RogueDiaryAvatar `protobuf:"bytes,9,rep,name=avatar_list,json=avatarList,proto3" json:"avatar_list,omitempty"`
}

func (x *StartRogueDiaryPlayRsp) Reset() {
	*x = StartRogueDiaryPlayRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[606]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRogueDiaryPlayRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRogueDiaryPlayRsp) ProtoMessage() {}

func (x *StartRogueDiaryPlayRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[606]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRogueDiaryPlayRsp.ProtoReflect.Descriptor instead.
func (*StartRogueDiaryPlayRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{606}
}

func (x *StartRogueDiaryPlayRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *StartRogueDiaryPlayRsp) GetTrialAvatarList() []*RogueDiaryAvatar {
	if x != nil {
		return x.TrialAvatarList
	}
	return nil
}

func (x *StartRogueDiaryPlayRsp) GetRandCardList() []uint32 {
	if x != nil {
		return x.RandCardList
	}
	return nil
}

func (x *StartRogueDiaryPlayRsp) GetAvatarList() []*RogueDiaryAvatar {
	if x != nil {
		return x.AvatarList
	}
	return nil
}

type ResetRogueDiaryPlayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,5,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *ResetRogueDiaryPlayReq) Reset() {
	*x = ResetRogueDiaryPlayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[607]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRogueDiaryPlayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRogueDiaryPlayReq) ProtoMessage() {}

func (x *ResetRogueDiaryPlayReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[607]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRogueDiaryPlayReq.ProtoReflect.Descriptor instead.
func (*ResetRogueDiaryPlayReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{607}
}

func (x *ResetRogueDiaryPlayReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type ResetRogueDiaryPlayRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ResetRogueDiaryPlayRsp) Reset() {
	*x = ResetRogueDiaryPlayRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[608]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRogueDiaryPlayRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRogueDiaryPlayRsp) ProtoMessage() {}

func (x *ResetRogueDiaryPlayRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[608]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRogueDiaryPlayRsp.ProtoReflect.Descriptor instead.
func (*ResetRogueDiaryPlayRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{608}
}

func (x *ResetRogueDiaryPlayRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type EnterRogueDiaryDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChosenCardList   []uint32            `protobuf:"varint,9,rep,packed,name=chosen_card_list,json=chosenCardList,proto3" json:"chosen_card_list,omitempty"`
	ChosenAvatarList []*RogueDiaryAvatar `protobuf:"bytes,11,rep,name=chosen_avatar_list,json=chosenAvatarList,proto3" json:"chosen_avatar_list,omitempty"`
}

func (x *EnterRogueDiaryDungeonReq) Reset() {
	*x = EnterRogueDiaryDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[609]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterRogueDiaryDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterRogueDiaryDungeonReq) ProtoMessage() {}

func (x *EnterRogueDiaryDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[609]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterRogueDiaryDungeonReq.ProtoReflect.Descriptor instead.
func (*EnterRogueDiaryDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{609}
}

func (x *EnterRogueDiaryDungeonReq) GetChosenCardList() []uint32 {
	if x != nil {
		return x.ChosenCardList
	}
	return nil
}

func (x *EnterRogueDiaryDungeonReq) GetChosenAvatarList() []*RogueDiaryAvatar {
	if x != nil {
		return x.ChosenAvatarList
	}
	return nil
}

type EnterRogueDiaryDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *EnterRogueDiaryDungeonRsp) Reset() {
	*x = EnterRogueDiaryDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[610]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterRogueDiaryDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterRogueDiaryDungeonRsp) ProtoMessage() {}

func (x *EnterRogueDiaryDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[610]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterRogueDiaryDungeonRsp.ProtoReflect.Descriptor instead.
func (*EnterRogueDiaryDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{610}
}

func (x *EnterRogueDiaryDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ResumeRogueDiaryDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *ResumeRogueDiaryDungeonReq) Reset() {
	*x = ResumeRogueDiaryDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[611]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeRogueDiaryDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeRogueDiaryDungeonReq) ProtoMessage() {}

func (x *ResumeRogueDiaryDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[611]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeRogueDiaryDungeonReq.ProtoReflect.Descriptor instead.
func (*ResumeRogueDiaryDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{611}
}

func (x *ResumeRogueDiaryDungeonReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type ResumeRogueDiaryDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ResumeRogueDiaryDungeonRsp) Reset() {
	*x = ResumeRogueDiaryDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[612]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeRogueDiaryDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeRogueDiaryDungeonRsp) ProtoMessage() {}

func (x *ResumeRogueDiaryDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[612]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeRogueDiaryDungeonRsp.ProtoReflect.Descriptor instead.
func (*ResumeRogueDiaryDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{612}
}

func (x *ResumeRogueDiaryDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RogueDiaryDungeonInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId          uint32                `protobuf:"varint,12,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	RoundMonsterList []uint32              `protobuf:"varint,15,rep,packed,name=round_monster_list,json=roundMonsterList,proto3" json:"round_monster_list,omitempty"`
	Time             uint32                `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	CurRoom          uint32                `protobuf:"varint,5,opt,name=cur_room,json=curRoom,proto3" json:"cur_room,omitempty"`
	CurRound         uint32                `protobuf:"varint,6,opt,name=cur_round,json=curRound,proto3" json:"cur_round,omitempty"`
	Coin             uint32                `protobuf:"varint,11,opt,name=coin,proto3" json:"coin,omitempty"`
	Difficulty       uint32                `protobuf:"varint,8,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	DungeonId        uint32                `protobuf:"varint,14,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	RoomList         []*RogueDiaryRoomInfo `protobuf:"bytes,7,rep,name=room_list,json=roomList,proto3" json:"room_list,omitempty"`
	RoundCardList    []uint32              `protobuf:"varint,10,rep,packed,name=round_card_list,json=roundCardList,proto3" json:"round_card_list,omitempty"`
}

func (x *RogueDiaryDungeonInfoNotify) Reset() {
	*x = RogueDiaryDungeonInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[613]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryDungeonInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryDungeonInfoNotify) ProtoMessage() {}

func (x *RogueDiaryDungeonInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[613]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryDungeonInfoNotify.ProtoReflect.Descriptor instead.
func (*RogueDiaryDungeonInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{613}
}

func (x *RogueDiaryDungeonInfoNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RogueDiaryDungeonInfoNotify) GetRoundMonsterList() []uint32 {
	if x != nil {
		return x.RoundMonsterList
	}
	return nil
}

func (x *RogueDiaryDungeonInfoNotify) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RogueDiaryDungeonInfoNotify) GetCurRoom() uint32 {
	if x != nil {
		return x.CurRoom
	}
	return 0
}

func (x *RogueDiaryDungeonInfoNotify) GetCurRound() uint32 {
	if x != nil {
		return x.CurRound
	}
	return 0
}

func (x *RogueDiaryDungeonInfoNotify) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RogueDiaryDungeonInfoNotify) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *RogueDiaryDungeonInfoNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *RogueDiaryDungeonInfoNotify) GetRoomList() []*RogueDiaryRoomInfo {
	if x != nil {
		return x.RoomList
	}
	return nil
}

func (x *RogueDiaryDungeonInfoNotify) GetRoundCardList() []uint32 {
	if x != nil {
		return x.RoundCardList
	}
	return nil
}

type RogueDiaryDungeonSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExploreTime uint32 `protobuf:"varint,1,opt,name=explore_time,json=exploreTime,proto3" json:"explore_time,omitempty"`
	IsFinish    bool   `protobuf:"varint,3,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	CurRound    uint32 `protobuf:"varint,2,opt,name=cur_round,json=curRound,proto3" json:"cur_round,omitempty"`
}

func (x *RogueDiaryDungeonSettleNotify) Reset() {
	*x = RogueDiaryDungeonSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[614]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryDungeonSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryDungeonSettleNotify) ProtoMessage() {}

func (x *RogueDiaryDungeonSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[614]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryDungeonSettleNotify.ProtoReflect.Descriptor instead.
func (*RogueDiaryDungeonSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{614}
}

func (x *RogueDiaryDungeonSettleNotify) GetExploreTime() uint32 {
	if x != nil {
		return x.ExploreTime
	}
	return 0
}

func (x *RogueDiaryDungeonSettleNotify) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *RogueDiaryDungeonSettleNotify) GetCurRound() uint32 {
	if x != nil {
		return x.CurRound
	}
	return 0
}

type StartRogueDiaryRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomDifficulty uint32 `protobuf:"varint,13,opt,name=room_difficulty,json=roomDifficulty,proto3" json:"room_difficulty,omitempty"`
	IsSelectHard   bool   `protobuf:"varint,1,opt,name=is_select_hard,json=isSelectHard,proto3" json:"is_select_hard,omitempty"`
}

func (x *StartRogueDiaryRoomReq) Reset() {
	*x = StartRogueDiaryRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[615]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRogueDiaryRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRogueDiaryRoomReq) ProtoMessage() {}

func (x *StartRogueDiaryRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[615]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRogueDiaryRoomReq.ProtoReflect.Descriptor instead.
func (*StartRogueDiaryRoomReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{615}
}

func (x *StartRogueDiaryRoomReq) GetRoomDifficulty() uint32 {
	if x != nil {
		return x.RoomDifficulty
	}
	return 0
}

func (x *StartRogueDiaryRoomReq) GetIsSelectHard() bool {
	if x != nil {
		return x.IsSelectHard
	}
	return false
}

type StartRogueDiaryRoomRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *StartRogueDiaryRoomRsp) Reset() {
	*x = StartRogueDiaryRoomRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[616]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRogueDiaryRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRogueDiaryRoomRsp) ProtoMessage() {}

func (x *StartRogueDiaryRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[616]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRogueDiaryRoomRsp.ProtoReflect.Descriptor instead.
func (*StartRogueDiaryRoomRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{616}
}

func (x *StartRogueDiaryRoomRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RogueDiaryTiredAvatarNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptianalTiredAvatarList []*RogueDiaryAvatar `protobuf:"bytes,10,rep,name=optianal_tired_avatar_list,json=optianalTiredAvatarList,proto3" json:"optianal_tired_avatar_list,omitempty"`
	ReserveAvatarNum        uint32              `protobuf:"varint,6,opt,name=reserve_avatar_num,json=reserveAvatarNum,proto3" json:"reserve_avatar_num,omitempty"`
	TiredType               uint32              `protobuf:"varint,8,opt,name=tired_type,json=tiredType,proto3" json:"tired_type,omitempty"`
	IsNeedShow              bool                `protobuf:"varint,7,opt,name=is_need_show,json=isNeedShow,proto3" json:"is_need_show,omitempty"`
}

func (x *RogueDiaryTiredAvatarNotify) Reset() {
	*x = RogueDiaryTiredAvatarNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[617]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryTiredAvatarNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryTiredAvatarNotify) ProtoMessage() {}

func (x *RogueDiaryTiredAvatarNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[617]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryTiredAvatarNotify.ProtoReflect.Descriptor instead.
func (*RogueDiaryTiredAvatarNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{617}
}

func (x *RogueDiaryTiredAvatarNotify) GetOptianalTiredAvatarList() []*RogueDiaryAvatar {
	if x != nil {
		return x.OptianalTiredAvatarList
	}
	return nil
}

func (x *RogueDiaryTiredAvatarNotify) GetReserveAvatarNum() uint32 {
	if x != nil {
		return x.ReserveAvatarNum
	}
	return 0
}

func (x *RogueDiaryTiredAvatarNotify) GetTiredType() uint32 {
	if x != nil {
		return x.TiredType
	}
	return 0
}

func (x *RogueDiaryTiredAvatarNotify) GetIsNeedShow() bool {
	if x != nil {
		return x.IsNeedShow
	}
	return false
}

type ReserveRogueDiaryAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReserveAvatarList []*RogueDiaryAvatar `protobuf:"bytes,6,rep,name=reserve_avatar_list,json=reserveAvatarList,proto3" json:"reserve_avatar_list,omitempty"`
}

func (x *ReserveRogueDiaryAvatarReq) Reset() {
	*x = ReserveRogueDiaryAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[618]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveRogueDiaryAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveRogueDiaryAvatarReq) ProtoMessage() {}

func (x *ReserveRogueDiaryAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[618]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveRogueDiaryAvatarReq.ProtoReflect.Descriptor instead.
func (*ReserveRogueDiaryAvatarReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{618}
}

func (x *ReserveRogueDiaryAvatarReq) GetReserveAvatarList() []*RogueDiaryAvatar {
	if x != nil {
		return x.ReserveAvatarList
	}
	return nil
}

type ReserveRogueDiaryAvatarRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ReserveRogueDiaryAvatarRsp) Reset() {
	*x = ReserveRogueDiaryAvatarRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[619]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveRogueDiaryAvatarRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveRogueDiaryAvatarRsp) ProtoMessage() {}

func (x *ReserveRogueDiaryAvatarRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[619]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveRogueDiaryAvatarRsp.ProtoReflect.Descriptor instead.
func (*ReserveRogueDiaryAvatarRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{619}
}

func (x *ReserveRogueDiaryAvatarRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GetRogueDairyRepairInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRogueDairyRepairInfoReq) Reset() {
	*x = GetRogueDairyRepairInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[620]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRogueDairyRepairInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRogueDairyRepairInfoReq) ProtoMessage() {}

func (x *GetRogueDairyRepairInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[620]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRogueDairyRepairInfoReq.ProtoReflect.Descriptor instead.
func (*GetRogueDairyRepairInfoReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{620}
}

type GetRogueDairyRepairInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GetRogueDairyRepairInfoRsp) Reset() {
	*x = GetRogueDairyRepairInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[621]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRogueDairyRepairInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRogueDairyRepairInfoRsp) ProtoMessage() {}

func (x *GetRogueDairyRepairInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[621]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRogueDairyRepairInfoRsp.ProtoReflect.Descriptor instead.
func (*GetRogueDairyRepairInfoRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{621}
}

func (x *GetRogueDairyRepairInfoRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RefreshRogueDiaryCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshCardList []uint32 `protobuf:"varint,8,rep,packed,name=refresh_card_list,json=refreshCardList,proto3" json:"refresh_card_list,omitempty"`
}

func (x *RefreshRogueDiaryCardReq) Reset() {
	*x = RefreshRogueDiaryCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[622]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRogueDiaryCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRogueDiaryCardReq) ProtoMessage() {}

func (x *RefreshRogueDiaryCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[622]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRogueDiaryCardReq.ProtoReflect.Descriptor instead.
func (*RefreshRogueDiaryCardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{622}
}

func (x *RefreshRogueDiaryCardReq) GetRefreshCardList() []uint32 {
	if x != nil {
		return x.RefreshCardList
	}
	return nil
}

type RefreshRogueDiaryCardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandCardList []uint32 `protobuf:"varint,15,rep,packed,name=rand_card_list,json=randCardList,proto3" json:"rand_card_list,omitempty"`
	Retcode      int32    `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *RefreshRogueDiaryCardRsp) Reset() {
	*x = RefreshRogueDiaryCardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[623]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRogueDiaryCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRogueDiaryCardRsp) ProtoMessage() {}

func (x *RefreshRogueDiaryCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[623]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRogueDiaryCardRsp.ProtoReflect.Descriptor instead.
func (*RefreshRogueDiaryCardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{623}
}

func (x *RefreshRogueDiaryCardRsp) GetRandCardList() []uint32 {
	if x != nil {
		return x.RandCardList
	}
	return nil
}

func (x *RefreshRogueDiaryCardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RogueFinishRepairReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChosenCardList   []uint32            `protobuf:"varint,1,rep,packed,name=chosen_card_list,json=chosenCardList,proto3" json:"chosen_card_list,omitempty"`
	ChosenAvatarList []*RogueDiaryAvatar `protobuf:"bytes,8,rep,name=chosen_avatar_list,json=chosenAvatarList,proto3" json:"chosen_avatar_list,omitempty"`
}

func (x *RogueFinishRepairReq) Reset() {
	*x = RogueFinishRepairReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[624]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueFinishRepairReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueFinishRepairReq) ProtoMessage() {}

func (x *RogueFinishRepairReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[624]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueFinishRepairReq.ProtoReflect.Descriptor instead.
func (*RogueFinishRepairReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{624}
}

func (x *RogueFinishRepairReq) GetChosenCardList() []uint32 {
	if x != nil {
		return x.ChosenCardList
	}
	return nil
}

func (x *RogueFinishRepairReq) GetChosenAvatarList() []*RogueDiaryAvatar {
	if x != nil {
		return x.ChosenAvatarList
	}
	return nil
}

type RogueFinishRepairRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *RogueFinishRepairRsp) Reset() {
	*x = RogueFinishRepairRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[625]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueFinishRepairRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueFinishRepairRsp) ProtoMessage() {}

func (x *RogueFinishRepairRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[625]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueFinishRepairRsp.ProtoReflect.Descriptor instead.
func (*RogueFinishRepairRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{625}
}

func (x *RogueFinishRepairRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type TryInterruptRogueDiaryDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TryInterruptRogueDiaryDungeonReq) Reset() {
	*x = TryInterruptRogueDiaryDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[626]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryInterruptRogueDiaryDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryInterruptRogueDiaryDungeonReq) ProtoMessage() {}

func (x *TryInterruptRogueDiaryDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[626]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryInterruptRogueDiaryDungeonReq.ProtoReflect.Descriptor instead.
func (*TryInterruptRogueDiaryDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{626}
}

type TryInterruptRogueDiaryDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *TryInterruptRogueDiaryDungeonRsp) Reset() {
	*x = TryInterruptRogueDiaryDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[627]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryInterruptRogueDiaryDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryInterruptRogueDiaryDungeonRsp) ProtoMessage() {}

func (x *TryInterruptRogueDiaryDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[627]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryInterruptRogueDiaryDungeonRsp.ProtoReflect.Descriptor instead.
func (*TryInterruptRogueDiaryDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{627}
}

func (x *TryInterruptRogueDiaryDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RogueDiaryRepairInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId          uint32                `protobuf:"varint,8,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	SelectCardList   []uint32              `protobuf:"varint,14,rep,packed,name=select_card_list,json=selectCardList,proto3" json:"select_card_list,omitempty"`
	AvatarList       []*RogueDiaryAvatar   `protobuf:"bytes,13,rep,name=avatar_list,json=avatarList,proto3" json:"avatar_list,omitempty"`
	RoomList         []*RogueDiaryRoomInfo `protobuf:"bytes,2,rep,name=room_list,json=roomList,proto3" json:"room_list,omitempty"`
	RandCardList     []uint32              `protobuf:"varint,10,rep,packed,name=rand_card_list,json=randCardList,proto3" json:"rand_card_list,omitempty"`
	SelectAvatarList []*RogueDiaryAvatar   `protobuf:"bytes,9,rep,name=select_avatar_list,json=selectAvatarList,proto3" json:"select_avatar_list,omitempty"`
	ChosenCardList   []uint32              `protobuf:"varint,15,rep,packed,name=chosen_card_list,json=chosenCardList,proto3" json:"chosen_card_list,omitempty"`
	TrialAvatarList  []*RogueDiaryAvatar   `protobuf:"bytes,11,rep,name=trial_avatar_list,json=trialAvatarList,proto3" json:"trial_avatar_list,omitempty"`
}

func (x *RogueDiaryRepairInfoNotify) Reset() {
	*x = RogueDiaryRepairInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[628]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryRepairInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryRepairInfoNotify) ProtoMessage() {}

func (x *RogueDiaryRepairInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[628]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryRepairInfoNotify.ProtoReflect.Descriptor instead.
func (*RogueDiaryRepairInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{628}
}

func (x *RogueDiaryRepairInfoNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *RogueDiaryRepairInfoNotify) GetSelectCardList() []uint32 {
	if x != nil {
		return x.SelectCardList
	}
	return nil
}

func (x *RogueDiaryRepairInfoNotify) GetAvatarList() []*RogueDiaryAvatar {
	if x != nil {
		return x.AvatarList
	}
	return nil
}

func (x *RogueDiaryRepairInfoNotify) GetRoomList() []*RogueDiaryRoomInfo {
	if x != nil {
		return x.RoomList
	}
	return nil
}

func (x *RogueDiaryRepairInfoNotify) GetRandCardList() []uint32 {
	if x != nil {
		return x.RandCardList
	}
	return nil
}

func (x *RogueDiaryRepairInfoNotify) GetSelectAvatarList() []*RogueDiaryAvatar {
	if x != nil {
		return x.SelectAvatarList
	}
	return nil
}

func (x *RogueDiaryRepairInfoNotify) GetChosenCardList() []uint32 {
	if x != nil {
		return x.ChosenCardList
	}
	return nil
}

func (x *RogueDiaryRepairInfoNotify) GetTrialAvatarList() []*RogueDiaryAvatar {
	if x != nil {
		return x.TrialAvatarList
	}
	return nil
}

type RetryCurRogueDiaryDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RetryCurRogueDiaryDungeonReq) Reset() {
	*x = RetryCurRogueDiaryDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[629]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryCurRogueDiaryDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryCurRogueDiaryDungeonReq) ProtoMessage() {}

func (x *RetryCurRogueDiaryDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[629]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryCurRogueDiaryDungeonReq.ProtoReflect.Descriptor instead.
func (*RetryCurRogueDiaryDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{629}
}

type RetryCurRogueDiaryDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *RetryCurRogueDiaryDungeonRsp) Reset() {
	*x = RetryCurRogueDiaryDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[630]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryCurRogueDiaryDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryCurRogueDiaryDungeonRsp) ProtoMessage() {}

func (x *RetryCurRogueDiaryDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[630]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryCurRogueDiaryDungeonRsp.ProtoReflect.Descriptor instead.
func (*RetryCurRogueDiaryDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{630}
}

func (x *RetryCurRogueDiaryDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RogueDiaryReviveAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReviveAvatar *RogueDiaryAvatar `protobuf:"bytes,2,opt,name=revive_avatar,json=reviveAvatar,proto3" json:"revive_avatar,omitempty"`
}

func (x *RogueDiaryReviveAvatarReq) Reset() {
	*x = RogueDiaryReviveAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[631]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryReviveAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryReviveAvatarReq) ProtoMessage() {}

func (x *RogueDiaryReviveAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[631]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryReviveAvatarReq.ProtoReflect.Descriptor instead.
func (*RogueDiaryReviveAvatarReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{631}
}

func (x *RogueDiaryReviveAvatarReq) GetReviveAvatar() *RogueDiaryAvatar {
	if x != nil {
		return x.ReviveAvatar
	}
	return nil
}

type RogueDiaryReviveAvatarRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *RogueDiaryReviveAvatarRsp) Reset() {
	*x = RogueDiaryReviveAvatarRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[632]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryReviveAvatarRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryReviveAvatarRsp) ProtoMessage() {}

func (x *RogueDiaryReviveAvatarRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[632]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryReviveAvatarRsp.ProtoReflect.Descriptor instead.
func (*RogueDiaryReviveAvatarRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{632}
}

func (x *RogueDiaryReviveAvatarRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type TryEnterNextRogueDiaryDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TryEnterNextRogueDiaryDungeonReq) Reset() {
	*x = TryEnterNextRogueDiaryDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[633]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryEnterNextRogueDiaryDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryEnterNextRogueDiaryDungeonReq) ProtoMessage() {}

func (x *TryEnterNextRogueDiaryDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[633]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryEnterNextRogueDiaryDungeonReq.ProtoReflect.Descriptor instead.
func (*TryEnterNextRogueDiaryDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{633}
}

type TryEnterNextRogueDiaryDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *TryEnterNextRogueDiaryDungeonRsp) Reset() {
	*x = TryEnterNextRogueDiaryDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[634]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryEnterNextRogueDiaryDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryEnterNextRogueDiaryDungeonRsp) ProtoMessage() {}

func (x *TryEnterNextRogueDiaryDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[634]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryEnterNextRogueDiaryDungeonRsp.ProtoReflect.Descriptor instead.
func (*TryEnterNextRogueDiaryDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{634}
}

func (x *TryEnterNextRogueDiaryDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RogueDiaryCoinAddNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num uint32 `protobuf:"varint,10,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *RogueDiaryCoinAddNotify) Reset() {
	*x = RogueDiaryCoinAddNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[635]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueDiaryCoinAddNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueDiaryCoinAddNotify) ProtoMessage() {}

func (x *RogueDiaryCoinAddNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[635]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueDiaryCoinAddNotify.ProtoReflect.Descriptor instead.
func (*RogueDiaryCoinAddNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{635}
}

func (x *RogueDiaryCoinAddNotify) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type SummerTimeV2DetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonStageInfoList  []*SummerTimeV2DungeonStageInfo `protobuf:"bytes,13,rep,name=dungeon_stage_info_list,json=dungeonStageInfoList,proto3" json:"dungeon_stage_info_list,omitempty"`
	CurDungeonRewardLimit uint32                          `protobuf:"varint,10,opt,name=cur_dungeon_reward_limit,json=curDungeonRewardLimit,proto3" json:"cur_dungeon_reward_limit,omitempty"`
	IsContentClosed       bool                            `protobuf:"varint,4,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	TakenRewardCount      uint32                          `protobuf:"varint,5,opt,name=taken_reward_count,json=takenRewardCount,proto3" json:"taken_reward_count,omitempty"`
	BoatStageInfoList     []*SummerTimeV2BoatStageInfo    `protobuf:"bytes,15,rep,name=boat_stage_info_list,json=boatStageInfoList,proto3" json:"boat_stage_info_list,omitempty"`
}

func (x *SummerTimeV2DetailInfo) Reset() {
	*x = SummerTimeV2DetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[636]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2DetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2DetailInfo) ProtoMessage() {}

func (x *SummerTimeV2DetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[636]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2DetailInfo.ProtoReflect.Descriptor instead.
func (*SummerTimeV2DetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{636}
}

func (x *SummerTimeV2DetailInfo) GetDungeonStageInfoList() []*SummerTimeV2DungeonStageInfo {
	if x != nil {
		return x.DungeonStageInfoList
	}
	return nil
}

func (x *SummerTimeV2DetailInfo) GetCurDungeonRewardLimit() uint32 {
	if x != nil {
		return x.CurDungeonRewardLimit
	}
	return 0
}

func (x *SummerTimeV2DetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *SummerTimeV2DetailInfo) GetTakenRewardCount() uint32 {
	if x != nil {
		return x.TakenRewardCount
	}
	return 0
}

func (x *SummerTimeV2DetailInfo) GetBoatStageInfoList() []*SummerTimeV2BoatStageInfo {
	if x != nil {
		return x.BoatStageInfoList
	}
	return nil
}

type SummerTimeV2DungeonStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId              uint32 `protobuf:"varint,10,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen               bool   `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	OpenTime             uint32 `protobuf:"varint,12,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	IsPrevDungeonSucceed bool   `protobuf:"varint,15,opt,name=is_prev_dungeon_succeed,json=isPrevDungeonSucceed,proto3" json:"is_prev_dungeon_succeed,omitempty"`
}

func (x *SummerTimeV2DungeonStageInfo) Reset() {
	*x = SummerTimeV2DungeonStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[637]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2DungeonStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2DungeonStageInfo) ProtoMessage() {}

func (x *SummerTimeV2DungeonStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[637]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2DungeonStageInfo.ProtoReflect.Descriptor instead.
func (*SummerTimeV2DungeonStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{637}
}

func (x *SummerTimeV2DungeonStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SummerTimeV2DungeonStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SummerTimeV2DungeonStageInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *SummerTimeV2DungeonStageInfo) GetIsPrevDungeonSucceed() bool {
	if x != nil {
		return x.IsPrevDungeonSucceed
	}
	return false
}

type SummerTimeV2BoatStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenTime  uint32 `protobuf:"varint,7,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	IsOpen    bool   `protobuf:"varint,14,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	StageId   uint32 `protobuf:"varint,10,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	BestScore uint32 `protobuf:"varint,13,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *SummerTimeV2BoatStageInfo) Reset() {
	*x = SummerTimeV2BoatStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[638]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2BoatStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2BoatStageInfo) ProtoMessage() {}

func (x *SummerTimeV2BoatStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[638]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2BoatStageInfo.ProtoReflect.Descriptor instead.
func (*SummerTimeV2BoatStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{638}
}

func (x *SummerTimeV2BoatStageInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *SummerTimeV2BoatStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SummerTimeV2BoatStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SummerTimeV2BoatStageInfo) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type SummerTimeV2BoatSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettleInfo  *SummerTimeV2BoatGallerySettleInfo `protobuf:"bytes,11,opt,name=settle_info,json=settleInfo,proto3" json:"settle_info,omitempty"`
	StageId     uint32                             `protobuf:"varint,7,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsNewRecord bool                               `protobuf:"varint,2,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	GalleryId   uint32                             `protobuf:"varint,1,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *SummerTimeV2BoatSettleNotify) Reset() {
	*x = SummerTimeV2BoatSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[639]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2BoatSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2BoatSettleNotify) ProtoMessage() {}

func (x *SummerTimeV2BoatSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[639]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2BoatSettleNotify.ProtoReflect.Descriptor instead.
func (*SummerTimeV2BoatSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{639}
}

func (x *SummerTimeV2BoatSettleNotify) GetSettleInfo() *SummerTimeV2BoatGallerySettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

func (x *SummerTimeV2BoatSettleNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SummerTimeV2BoatSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *SummerTimeV2BoatSettleNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type ActivityPushTipsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State              ActivityPushTipsState `protobuf:"varint,10,opt,name=state,proto3,enum=proto.ActivityPushTipsState" json:"state,omitempty"`
	ActivityPushTipsId uint32                `protobuf:"varint,4,opt,name=activity_push_tips_id,json=activityPushTipsId,proto3" json:"activity_push_tips_id,omitempty"`
}

func (x *ActivityPushTipsData) Reset() {
	*x = ActivityPushTipsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[640]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityPushTipsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityPushTipsData) ProtoMessage() {}

func (x *ActivityPushTipsData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[640]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityPushTipsData.ProtoReflect.Descriptor instead.
func (*ActivityPushTipsData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{640}
}

func (x *ActivityPushTipsData) GetState() ActivityPushTipsState {
	if x != nil {
		return x.State
	}
	return ActivityPushTipsState_ACTIVITY_PUSH_TIPS_STATE_NONE
}

func (x *ActivityPushTipsData) GetActivityPushTipsId() uint32 {
	if x != nil {
		return x.ActivityPushTipsId
	}
	return 0
}

type ActivityPushTipsInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId               uint32                  `protobuf:"varint,14,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	ActivityPushTipsDataList []*ActivityPushTipsData `protobuf:"bytes,3,rep,name=activity_push_tips_data_list,json=activityPushTipsDataList,proto3" json:"activity_push_tips_data_list,omitempty"`
	ActivityId               uint32                  `protobuf:"varint,10,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *ActivityPushTipsInfoNotify) Reset() {
	*x = ActivityPushTipsInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[641]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityPushTipsInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityPushTipsInfoNotify) ProtoMessage() {}

func (x *ActivityPushTipsInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[641]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityPushTipsInfoNotify.ProtoReflect.Descriptor instead.
func (*ActivityPushTipsInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{641}
}

func (x *ActivityPushTipsInfoNotify) GetScheduleId() uint32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

func (x *ActivityPushTipsInfoNotify) GetActivityPushTipsDataList() []*ActivityPushTipsData {
	if x != nil {
		return x.ActivityPushTipsDataList
	}
	return nil
}

func (x *ActivityPushTipsInfoNotify) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type ActivityReadPushTipsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityPushTipsIdList []uint32 `protobuf:"varint,14,rep,packed,name=activity_push_tips_id_list,json=activityPushTipsIdList,proto3" json:"activity_push_tips_id_list,omitempty"`
	ActivityId             uint32   `protobuf:"varint,7,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *ActivityReadPushTipsReq) Reset() {
	*x = ActivityReadPushTipsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[642]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityReadPushTipsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityReadPushTipsReq) ProtoMessage() {}

func (x *ActivityReadPushTipsReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[642]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityReadPushTipsReq.ProtoReflect.Descriptor instead.
func (*ActivityReadPushTipsReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{642}
}

func (x *ActivityReadPushTipsReq) GetActivityPushTipsIdList() []uint32 {
	if x != nil {
		return x.ActivityPushTipsIdList
	}
	return nil
}

func (x *ActivityReadPushTipsReq) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type ActivityReadPushTipsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *ActivityReadPushTipsRsp) Reset() {
	*x = ActivityReadPushTipsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[643]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityReadPushTipsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityReadPushTipsRsp) ProtoMessage() {}

func (x *ActivityReadPushTipsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[643]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityReadPushTipsRsp.ProtoReflect.Descriptor instead.
func (*ActivityReadPushTipsRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{643}
}

func (x *ActivityReadPushTipsRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type SummerTimeV2RestartBoatGalleryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,5,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *SummerTimeV2RestartBoatGalleryReq) Reset() {
	*x = SummerTimeV2RestartBoatGalleryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[644]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2RestartBoatGalleryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2RestartBoatGalleryReq) ProtoMessage() {}

func (x *SummerTimeV2RestartBoatGalleryReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[644]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2RestartBoatGalleryReq.ProtoReflect.Descriptor instead.
func (*SummerTimeV2RestartBoatGalleryReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{644}
}

func (x *SummerTimeV2RestartBoatGalleryReq) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type SummerTimeV2RestartBoatGalleryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,13,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	Retcode   int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SummerTimeV2RestartBoatGalleryRsp) Reset() {
	*x = SummerTimeV2RestartBoatGalleryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[645]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2RestartBoatGalleryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2RestartBoatGalleryRsp) ProtoMessage() {}

func (x *SummerTimeV2RestartBoatGalleryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[645]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2RestartBoatGalleryRsp.ProtoReflect.Descriptor instead.
func (*SummerTimeV2RestartBoatGalleryRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{645}
}

func (x *SummerTimeV2RestartBoatGalleryRsp) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *SummerTimeV2RestartBoatGalleryRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type SummerTimeV2RestartDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SummerTimeV2RestartDungeonReq) Reset() {
	*x = SummerTimeV2RestartDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[646]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2RestartDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2RestartDungeonReq) ProtoMessage() {}

func (x *SummerTimeV2RestartDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[646]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2RestartDungeonReq.ProtoReflect.Descriptor instead.
func (*SummerTimeV2RestartDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{646}
}

type SummerTimeV2RestartDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SummerTimeV2RestartDungeonRsp) Reset() {
	*x = SummerTimeV2RestartDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[647]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummerTimeV2RestartDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummerTimeV2RestartDungeonRsp) ProtoMessage() {}

func (x *SummerTimeV2RestartDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[647]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummerTimeV2RestartDungeonRsp.ProtoReflect.Descriptor instead.
func (*SummerTimeV2RestartDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{647}
}

func (x *SummerTimeV2RestartDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type IslandPartyStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   uint32 `protobuf:"varint,13,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen    bool   `protobuf:"varint,14,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	BestScore uint32 `protobuf:"varint,4,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *IslandPartyStageData) Reset() {
	*x = IslandPartyStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[648]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IslandPartyStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IslandPartyStageData) ProtoMessage() {}

func (x *IslandPartyStageData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[648]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IslandPartyStageData.ProtoReflect.Descriptor instead.
func (*IslandPartyStageData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{648}
}

func (x *IslandPartyStageData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *IslandPartyStageData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *IslandPartyStageData) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type IslandPartyDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageDataList []*IslandPartyStageData `protobuf:"bytes,15,rep,name=stage_data_list,json=stageDataList,proto3" json:"stage_data_list,omitempty"`
}

func (x *IslandPartyDetailInfo) Reset() {
	*x = IslandPartyDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[649]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IslandPartyDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IslandPartyDetailInfo) ProtoMessage() {}

func (x *IslandPartyDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[649]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IslandPartyDetailInfo.ProtoReflect.Descriptor instead.
func (*IslandPartyDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{649}
}

func (x *IslandPartyDetailInfo) GetStageDataList() []*IslandPartyStageData {
	if x != nil {
		return x.StageDataList
	}
	return nil
}

type IslandPartySettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNewRecord    bool                            `protobuf:"varint,13,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	Reason         GalleryStopReason               `protobuf:"varint,1,opt,name=reason,proto3,enum=proto.GalleryStopReason" json:"reason,omitempty"`
	SettleInfoList []*IslandPartyGallerySettleInfo `protobuf:"bytes,8,rep,name=settle_info_list,json=settleInfoList,proto3" json:"settle_info_list,omitempty"`
	ScoreList      []*ExhibitionDisplayInfo        `protobuf:"bytes,6,rep,name=score_list,json=scoreList,proto3" json:"score_list,omitempty"`
	TimeRemain     uint32                          `protobuf:"varint,15,opt,name=time_remain,json=timeRemain,proto3" json:"time_remain,omitempty"`
}

func (x *IslandPartySettleNotify) Reset() {
	*x = IslandPartySettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[650]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IslandPartySettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IslandPartySettleNotify) ProtoMessage() {}

func (x *IslandPartySettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[650]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IslandPartySettleNotify.ProtoReflect.Descriptor instead.
func (*IslandPartySettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{650}
}

func (x *IslandPartySettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *IslandPartySettleNotify) GetReason() GalleryStopReason {
	if x != nil {
		return x.Reason
	}
	return GalleryStopReason_GALLERY_STOP_NONE
}

func (x *IslandPartySettleNotify) GetSettleInfoList() []*IslandPartyGallerySettleInfo {
	if x != nil {
		return x.SettleInfoList
	}
	return nil
}

func (x *IslandPartySettleNotify) GetScoreList() []*ExhibitionDisplayInfo {
	if x != nil {
		return x.ScoreList
	}
	return nil
}

func (x *IslandPartySettleNotify) GetTimeRemain() uint32 {
	if x != nil {
		return x.TimeRemain
	}
	return 0
}

type GearLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortestTime uint32 `protobuf:"varint,8,opt,name=shortest_time,json=shortestTime,proto3" json:"shortest_time,omitempty"`
	OpenTime     uint32 `protobuf:"varint,11,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	LastDuration uint32 `protobuf:"varint,5,opt,name=last_duration,json=lastDuration,proto3" json:"last_duration,omitempty"`
	LevelId      uint32 `protobuf:"varint,12,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsFinished   bool   `protobuf:"varint,9,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	IsOpen       bool   `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *GearLevelData) Reset() {
	*x = GearLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[651]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearLevelData) ProtoMessage() {}

func (x *GearLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[651]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearLevelData.ProtoReflect.Descriptor instead.
func (*GearLevelData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{651}
}

func (x *GearLevelData) GetShortestTime() uint32 {
	if x != nil {
		return x.ShortestTime
	}
	return 0
}

func (x *GearLevelData) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *GearLevelData) GetLastDuration() uint32 {
	if x != nil {
		return x.LastDuration
	}
	return 0
}

func (x *GearLevelData) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GearLevelData) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *GearLevelData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type JigsawPictureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished   bool   `protobuf:"varint,7,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	ShortestTime uint32 `protobuf:"varint,10,opt,name=shortest_time,json=shortestTime,proto3" json:"shortest_time,omitempty"`
	IsOpen       bool   `protobuf:"varint,5,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	LastDuration uint32 `protobuf:"varint,6,opt,name=last_duration,json=lastDuration,proto3" json:"last_duration,omitempty"`
}

func (x *JigsawPictureData) Reset() {
	*x = JigsawPictureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[652]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JigsawPictureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JigsawPictureData) ProtoMessage() {}

func (x *JigsawPictureData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[652]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JigsawPictureData.ProtoReflect.Descriptor instead.
func (*JigsawPictureData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{652}
}

func (x *JigsawPictureData) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *JigsawPictureData) GetShortestTime() uint32 {
	if x != nil {
		return x.ShortestTime
	}
	return 0
}

func (x *JigsawPictureData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *JigsawPictureData) GetLastDuration() uint32 {
	if x != nil {
		return x.LastDuration
	}
	return 0
}

type GearActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GearLevelDataList []*GearLevelData   `protobuf:"bytes,14,rep,name=gear_level_data_list,json=gearLevelDataList,proto3" json:"gear_level_data_list,omitempty"`
	JigsawPictureData *JigsawPictureData `protobuf:"bytes,8,opt,name=jigsaw_picture_data,json=jigsawPictureData,proto3" json:"jigsaw_picture_data,omitempty"`
}

func (x *GearActivityDetailInfo) Reset() {
	*x = GearActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[653]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearActivityDetailInfo) ProtoMessage() {}

func (x *GearActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[653]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*GearActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{653}
}

func (x *GearActivityDetailInfo) GetGearLevelDataList() []*GearLevelData {
	if x != nil {
		return x.GearLevelDataList
	}
	return nil
}

func (x *GearActivityDetailInfo) GetJigsawPictureData() *JigsawPictureData {
	if x != nil {
		return x.JigsawPictureData
	}
	return nil
}

type GearActivityStartPlayGearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,5,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *GearActivityStartPlayGearReq) Reset() {
	*x = GearActivityStartPlayGearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[654]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearActivityStartPlayGearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearActivityStartPlayGearReq) ProtoMessage() {}

func (x *GearActivityStartPlayGearReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[654]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearActivityStartPlayGearReq.ProtoReflect.Descriptor instead.
func (*GearActivityStartPlayGearReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{654}
}

func (x *GearActivityStartPlayGearReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type GearActivityStartPlayGearRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,9,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Retcode int32  `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GearActivityStartPlayGearRsp) Reset() {
	*x = GearActivityStartPlayGearRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[655]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearActivityStartPlayGearRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearActivityStartPlayGearRsp) ProtoMessage() {}

func (x *GearActivityStartPlayGearRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[655]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearActivityStartPlayGearRsp.ProtoReflect.Descriptor instead.
func (*GearActivityStartPlayGearRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{655}
}

func (x *GearActivityStartPlayGearRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GearActivityStartPlayGearRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GearColumnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GearColumnIndex uint32 `protobuf:"varint,7,opt,name=gear_column_index,json=gearColumnIndex,proto3" json:"gear_column_index,omitempty"`
	IsOverturn      bool   `protobuf:"varint,3,opt,name=is_overturn,json=isOverturn,proto3" json:"is_overturn,omitempty"`
	HasGear         bool   `protobuf:"varint,2,opt,name=has_gear,json=hasGear,proto3" json:"has_gear,omitempty"`
	GearId          uint32 `protobuf:"varint,11,opt,name=gear_id,json=gearId,proto3" json:"gear_id,omitempty"`
	PlacementLayer  uint32 `protobuf:"varint,6,opt,name=placement_layer,json=placementLayer,proto3" json:"placement_layer,omitempty"`
}

func (x *GearColumnInfo) Reset() {
	*x = GearColumnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[656]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearColumnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearColumnInfo) ProtoMessage() {}

func (x *GearColumnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[656]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearColumnInfo.ProtoReflect.Descriptor instead.
func (*GearColumnInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{656}
}

func (x *GearColumnInfo) GetGearColumnIndex() uint32 {
	if x != nil {
		return x.GearColumnIndex
	}
	return 0
}

func (x *GearColumnInfo) GetIsOverturn() bool {
	if x != nil {
		return x.IsOverturn
	}
	return false
}

func (x *GearColumnInfo) GetHasGear() bool {
	if x != nil {
		return x.HasGear
	}
	return false
}

func (x *GearColumnInfo) GetGearId() uint32 {
	if x != nil {
		return x.GearId
	}
	return 0
}

func (x *GearColumnInfo) GetPlacementLayer() uint32 {
	if x != nil {
		return x.PlacementLayer
	}
	return 0
}

type GearActivityFinishPlayGearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess          bool              `protobuf:"varint,4,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	UseClue            bool              `protobuf:"varint,12,opt,name=use_clue,json=useClue,proto3" json:"use_clue,omitempty"`
	GearColumnInfoList []*GearColumnInfo `protobuf:"bytes,9,rep,name=gear_column_info_list,json=gearColumnInfoList,proto3" json:"gear_column_info_list,omitempty"`
	LevelId            uint32            `protobuf:"varint,5,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *GearActivityFinishPlayGearReq) Reset() {
	*x = GearActivityFinishPlayGearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[657]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearActivityFinishPlayGearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearActivityFinishPlayGearReq) ProtoMessage() {}

func (x *GearActivityFinishPlayGearReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[657]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearActivityFinishPlayGearReq.ProtoReflect.Descriptor instead.
func (*GearActivityFinishPlayGearReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{657}
}

func (x *GearActivityFinishPlayGearReq) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *GearActivityFinishPlayGearReq) GetUseClue() bool {
	if x != nil {
		return x.UseClue
	}
	return false
}

func (x *GearActivityFinishPlayGearReq) GetGearColumnInfoList() []*GearColumnInfo {
	if x != nil {
		return x.GearColumnInfoList
	}
	return nil
}

func (x *GearActivityFinishPlayGearReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type GearActivityFinishPlayGearRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsSuccess bool   `protobuf:"varint,15,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	LevelId   uint32 `protobuf:"varint,3,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *GearActivityFinishPlayGearRsp) Reset() {
	*x = GearActivityFinishPlayGearRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[658]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearActivityFinishPlayGearRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearActivityFinishPlayGearRsp) ProtoMessage() {}

func (x *GearActivityFinishPlayGearRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[658]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearActivityFinishPlayGearRsp.ProtoReflect.Descriptor instead.
func (*GearActivityFinishPlayGearRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{658}
}

func (x *GearActivityFinishPlayGearRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GearActivityFinishPlayGearRsp) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *GearActivityFinishPlayGearRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type GearActivityStartPlayPictureReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GearActivityStartPlayPictureReq) Reset() {
	*x = GearActivityStartPlayPictureReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[659]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearActivityStartPlayPictureReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearActivityStartPlayPictureReq) ProtoMessage() {}

func (x *GearActivityStartPlayPictureReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[659]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearActivityStartPlayPictureReq.ProtoReflect.Descriptor instead.
func (*GearActivityStartPlayPictureReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{659}
}

type GearActivityStartPlayPictureRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GearActivityStartPlayPictureRsp) Reset() {
	*x = GearActivityStartPlayPictureRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[660]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearActivityStartPlayPictureRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearActivityStartPlayPictureRsp) ProtoMessage() {}

func (x *GearActivityStartPlayPictureRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[660]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearActivityStartPlayPictureRsp.ProtoReflect.Descriptor instead.
func (*GearActivityStartPlayPictureRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{660}
}

func (x *GearActivityStartPlayPictureRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GearActivityFinishPlayPictureReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool `protobuf:"varint,8,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *GearActivityFinishPlayPictureReq) Reset() {
	*x = GearActivityFinishPlayPictureReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[661]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearActivityFinishPlayPictureReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearActivityFinishPlayPictureReq) ProtoMessage() {}

func (x *GearActivityFinishPlayPictureReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[661]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearActivityFinishPlayPictureReq.ProtoReflect.Descriptor instead.
func (*GearActivityFinishPlayPictureReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{661}
}

func (x *GearActivityFinishPlayPictureReq) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type GearActivityFinishPlayPictureRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32 `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsSuccess bool  `protobuf:"varint,6,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *GearActivityFinishPlayPictureRsp) Reset() {
	*x = GearActivityFinishPlayPictureRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[662]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearActivityFinishPlayPictureRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearActivityFinishPlayPictureRsp) ProtoMessage() {}

func (x *GearActivityFinishPlayPictureRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[662]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearActivityFinishPlayPictureRsp.ProtoReflect.Descriptor instead.
func (*GearActivityFinishPlayPictureRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{662}
}

func (x *GearActivityFinishPlayPictureRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GearActivityFinishPlayPictureRsp) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type GravenInnocencePhotoStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished bool   `protobuf:"varint,11,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	StageId    uint32 `protobuf:"varint,6,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen     bool   `protobuf:"varint,9,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *GravenInnocencePhotoStageInfo) Reset() {
	*x = GravenInnocencePhotoStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[663]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocencePhotoStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocencePhotoStageInfo) ProtoMessage() {}

func (x *GravenInnocencePhotoStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[663]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocencePhotoStageInfo.ProtoReflect.Descriptor instead.
func (*GravenInnocencePhotoStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{663}
}

func (x *GravenInnocencePhotoStageInfo) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *GravenInnocencePhotoStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *GravenInnocencePhotoStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type GravenInnocencePhotoObjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId   uint32 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	FinishTime uint32 `protobuf:"varint,4,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Param      uint32 `protobuf:"varint,14,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *GravenInnocencePhotoObjectInfo) Reset() {
	*x = GravenInnocencePhotoObjectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[664]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocencePhotoObjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocencePhotoObjectInfo) ProtoMessage() {}

func (x *GravenInnocencePhotoObjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[664]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocencePhotoObjectInfo.ProtoReflect.Descriptor instead.
func (*GravenInnocencePhotoObjectInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{664}
}

func (x *GravenInnocencePhotoObjectInfo) GetObjectId() uint32 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *GravenInnocencePhotoObjectInfo) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *GravenInnocencePhotoObjectInfo) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type GravenInnocencePhotoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageInfoList  []*GravenInnocencePhotoStageInfo  `protobuf:"bytes,5,rep,name=stage_info_list,json=stageInfoList,proto3" json:"stage_info_list,omitempty"`
	ObjectInfoList []*GravenInnocencePhotoObjectInfo `protobuf:"bytes,7,rep,name=object_info_list,json=objectInfoList,proto3" json:"object_info_list,omitempty"`
}

func (x *GravenInnocencePhotoInfo) Reset() {
	*x = GravenInnocencePhotoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[665]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocencePhotoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocencePhotoInfo) ProtoMessage() {}

func (x *GravenInnocencePhotoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[665]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocencePhotoInfo.ProtoReflect.Descriptor instead.
func (*GravenInnocencePhotoInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{665}
}

func (x *GravenInnocencePhotoInfo) GetStageInfoList() []*GravenInnocencePhotoStageInfo {
	if x != nil {
		return x.StageInfoList
	}
	return nil
}

func (x *GravenInnocencePhotoInfo) GetObjectInfoList() []*GravenInnocencePhotoObjectInfo {
	if x != nil {
		return x.ObjectInfoList
	}
	return nil
}

type GravenInnocenceCampStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen     bool   `protobuf:"varint,15,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	LevelId    uint32 `protobuf:"varint,10,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	StageId    uint32 `protobuf:"varint,9,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsFinished bool   `protobuf:"varint,3,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
}

func (x *GravenInnocenceCampStageInfo) Reset() {
	*x = GravenInnocenceCampStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[666]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceCampStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceCampStageInfo) ProtoMessage() {}

func (x *GravenInnocenceCampStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[666]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceCampStageInfo.ProtoReflect.Descriptor instead.
func (*GravenInnocenceCampStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{666}
}

func (x *GravenInnocenceCampStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *GravenInnocenceCampStageInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GravenInnocenceCampStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *GravenInnocenceCampStageInfo) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

type GravenInnocenceCampInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageInfoList []*GravenInnocenceCampStageInfo `protobuf:"bytes,5,rep,name=stage_info_list,json=stageInfoList,proto3" json:"stage_info_list,omitempty"`
}

func (x *GravenInnocenceCampInfo) Reset() {
	*x = GravenInnocenceCampInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[667]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceCampInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceCampInfo) ProtoMessage() {}

func (x *GravenInnocenceCampInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[667]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceCampInfo.ProtoReflect.Descriptor instead.
func (*GravenInnocenceCampInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{667}
}

func (x *GravenInnocenceCampInfo) GetStageInfoList() []*GravenInnocenceCampStageInfo {
	if x != nil {
		return x.StageInfoList
	}
	return nil
}

type GravenInnocenceRaceLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId  uint32 `protobuf:"varint,13,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	MaxScore uint32 `protobuf:"varint,14,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	IsOpen   bool   `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *GravenInnocenceRaceLevelInfo) Reset() {
	*x = GravenInnocenceRaceLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[668]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceRaceLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceRaceLevelInfo) ProtoMessage() {}

func (x *GravenInnocenceRaceLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[668]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceRaceLevelInfo.ProtoReflect.Descriptor instead.
func (*GravenInnocenceRaceLevelInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{668}
}

func (x *GravenInnocenceRaceLevelInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *GravenInnocenceRaceLevelInfo) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *GravenInnocenceRaceLevelInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type GravenInnocenceRaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelInfoList []*GravenInnocenceRaceLevelInfo `protobuf:"bytes,11,rep,name=level_info_list,json=levelInfoList,proto3" json:"level_info_list,omitempty"`
}

func (x *GravenInnocenceRaceInfo) Reset() {
	*x = GravenInnocenceRaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[669]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceRaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceRaceInfo) ProtoMessage() {}

func (x *GravenInnocenceRaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[669]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceRaceInfo.ProtoReflect.Descriptor instead.
func (*GravenInnocenceRaceInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{669}
}

func (x *GravenInnocenceRaceInfo) GetLevelInfoList() []*GravenInnocenceRaceLevelInfo {
	if x != nil {
		return x.LevelInfoList
	}
	return nil
}

type GravenInnocenceCarveStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,9,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen  bool   `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *GravenInnocenceCarveStageInfo) Reset() {
	*x = GravenInnocenceCarveStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[670]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceCarveStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceCarveStageInfo) ProtoMessage() {}

func (x *GravenInnocenceCarveStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[670]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceCarveStageInfo.ProtoReflect.Descriptor instead.
func (*GravenInnocenceCarveStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{670}
}

func (x *GravenInnocenceCarveStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *GravenInnocenceCarveStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type GravenInnocenceCarveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageInfoList       []*GravenInnocenceCarveStageInfo `protobuf:"bytes,10,rep,name=stage_info_list,json=stageInfoList,proto3" json:"stage_info_list,omitempty"`
	CanEditCount        uint32                           `protobuf:"varint,7,opt,name=can_edit_count,json=canEditCount,proto3" json:"can_edit_count,omitempty"`
	HasEditConfigIdList []uint32                         `protobuf:"varint,6,rep,packed,name=has_edit_config_id_list,json=hasEditConfigIdList,proto3" json:"has_edit_config_id_list,omitempty"`
}

func (x *GravenInnocenceCarveInfo) Reset() {
	*x = GravenInnocenceCarveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[671]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceCarveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceCarveInfo) ProtoMessage() {}

func (x *GravenInnocenceCarveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[671]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceCarveInfo.ProtoReflect.Descriptor instead.
func (*GravenInnocenceCarveInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{671}
}

func (x *GravenInnocenceCarveInfo) GetStageInfoList() []*GravenInnocenceCarveStageInfo {
	if x != nil {
		return x.StageInfoList
	}
	return nil
}

func (x *GravenInnocenceCarveInfo) GetCanEditCount() uint32 {
	if x != nil {
		return x.CanEditCount
	}
	return 0
}

func (x *GravenInnocenceCarveInfo) GetHasEditConfigIdList() []uint32 {
	if x != nil {
		return x.HasEditConfigIdList
	}
	return nil
}

type GravenInnocenceDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsContentClosed bool                      `protobuf:"varint,8,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	RaceInfo        *GravenInnocenceRaceInfo  `protobuf:"bytes,10,opt,name=race_info,json=raceInfo,proto3" json:"race_info,omitempty"`
	PhotoInfo       *GravenInnocencePhotoInfo `protobuf:"bytes,7,opt,name=photo_info,json=photoInfo,proto3" json:"photo_info,omitempty"`
	CarveInfo       *GravenInnocenceCarveInfo `protobuf:"bytes,13,opt,name=carve_info,json=carveInfo,proto3" json:"carve_info,omitempty"`
	CampInfo        *GravenInnocenceCampInfo  `protobuf:"bytes,12,opt,name=camp_info,json=campInfo,proto3" json:"camp_info,omitempty"`
}

func (x *GravenInnocenceDetailInfo) Reset() {
	*x = GravenInnocenceDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[672]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceDetailInfo) ProtoMessage() {}

func (x *GravenInnocenceDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[672]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceDetailInfo.ProtoReflect.Descriptor instead.
func (*GravenInnocenceDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{672}
}

func (x *GravenInnocenceDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *GravenInnocenceDetailInfo) GetRaceInfo() *GravenInnocenceRaceInfo {
	if x != nil {
		return x.RaceInfo
	}
	return nil
}

func (x *GravenInnocenceDetailInfo) GetPhotoInfo() *GravenInnocencePhotoInfo {
	if x != nil {
		return x.PhotoInfo
	}
	return nil
}

func (x *GravenInnocenceDetailInfo) GetCarveInfo() *GravenInnocenceCarveInfo {
	if x != nil {
		return x.CarveInfo
	}
	return nil
}

func (x *GravenInnocenceDetailInfo) GetCampInfo() *GravenInnocenceCampInfo {
	if x != nil {
		return x.CampInfo
	}
	return nil
}

type GravenInnocenceRaceSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNewRecord       bool              `protobuf:"varint,4,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	GalleryId         uint32            `protobuf:"varint,6,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	Score             uint32            `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Reason            GalleryStopReason `protobuf:"varint,2,opt,name=reason,proto3,enum=proto.GalleryStopReason" json:"reason,omitempty"`
	TotalCointCount   uint32            `protobuf:"varint,13,opt,name=total_coint_count,json=totalCointCount,proto3" json:"total_coint_count,omitempty"`
	RemainTime        uint32            `protobuf:"varint,10,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"`
	ChallengeProgress uint32            `protobuf:"varint,1,opt,name=challenge_progress,json=challengeProgress,proto3" json:"challenge_progress,omitempty"`
	CoinCount         uint32            `protobuf:"varint,8,opt,name=coin_count,json=coinCount,proto3" json:"coin_count,omitempty"`
	IsSuccess         bool              `protobuf:"varint,7,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	LevelId           uint32            `protobuf:"varint,11,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *GravenInnocenceRaceSettleNotify) Reset() {
	*x = GravenInnocenceRaceSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[673]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceRaceSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceRaceSettleNotify) ProtoMessage() {}

func (x *GravenInnocenceRaceSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[673]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceRaceSettleNotify.ProtoReflect.Descriptor instead.
func (*GravenInnocenceRaceSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{673}
}

func (x *GravenInnocenceRaceSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *GravenInnocenceRaceSettleNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *GravenInnocenceRaceSettleNotify) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GravenInnocenceRaceSettleNotify) GetReason() GalleryStopReason {
	if x != nil {
		return x.Reason
	}
	return GalleryStopReason_GALLERY_STOP_NONE
}

func (x *GravenInnocenceRaceSettleNotify) GetTotalCointCount() uint32 {
	if x != nil {
		return x.TotalCointCount
	}
	return 0
}

func (x *GravenInnocenceRaceSettleNotify) GetRemainTime() uint32 {
	if x != nil {
		return x.RemainTime
	}
	return 0
}

func (x *GravenInnocenceRaceSettleNotify) GetChallengeProgress() uint32 {
	if x != nil {
		return x.ChallengeProgress
	}
	return 0
}

func (x *GravenInnocenceRaceSettleNotify) GetCoinCount() uint32 {
	if x != nil {
		return x.CoinCount
	}
	return 0
}

func (x *GravenInnocenceRaceSettleNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *GravenInnocenceRaceSettleNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type GravenInnocenceRaceRestartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,6,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *GravenInnocenceRaceRestartReq) Reset() {
	*x = GravenInnocenceRaceRestartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[674]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceRaceRestartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceRaceRestartReq) ProtoMessage() {}

func (x *GravenInnocenceRaceRestartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[674]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceRaceRestartReq.ProtoReflect.Descriptor instead.
func (*GravenInnocenceRaceRestartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{674}
}

func (x *GravenInnocenceRaceRestartReq) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type GravenInnocenceRaceRestartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GalleryId uint32 `protobuf:"varint,6,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *GravenInnocenceRaceRestartRsp) Reset() {
	*x = GravenInnocenceRaceRestartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[675]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceRaceRestartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceRaceRestartRsp) ProtoMessage() {}

func (x *GravenInnocenceRaceRestartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[675]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceRaceRestartRsp.ProtoReflect.Descriptor instead.
func (*GravenInnocenceRaceRestartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{675}
}

func (x *GravenInnocenceRaceRestartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GravenInnocenceRaceRestartRsp) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type GravenInnocenceEditCarveCombinationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId        uint32                `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	CombinationInfo *CustomGadgetTreeInfo `protobuf:"bytes,11,opt,name=combination_info,json=combinationInfo,proto3" json:"combination_info,omitempty"`
}

func (x *GravenInnocenceEditCarveCombinationReq) Reset() {
	*x = GravenInnocenceEditCarveCombinationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[676]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceEditCarveCombinationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceEditCarveCombinationReq) ProtoMessage() {}

func (x *GravenInnocenceEditCarveCombinationReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[676]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceEditCarveCombinationReq.ProtoReflect.Descriptor instead.
func (*GravenInnocenceEditCarveCombinationReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{676}
}

func (x *GravenInnocenceEditCarveCombinationReq) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *GravenInnocenceEditCarveCombinationReq) GetCombinationInfo() *CustomGadgetTreeInfo {
	if x != nil {
		return x.CombinationInfo
	}
	return nil
}

type GravenInnocenceEditCarveCombinationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GravenInnocenceEditCarveCombinationRsp) Reset() {
	*x = GravenInnocenceEditCarveCombinationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[677]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocenceEditCarveCombinationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocenceEditCarveCombinationRsp) ProtoMessage() {}

func (x *GravenInnocenceEditCarveCombinationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[677]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocenceEditCarveCombinationRsp.ProtoReflect.Descriptor instead.
func (*GravenInnocenceEditCarveCombinationRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{677}
}

func (x *GravenInnocenceEditCarveCombinationRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GravenInnocencePhotoFinishReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param    uint32 `protobuf:"varint,1,opt,name=param,proto3" json:"param,omitempty"`
	ObjectId uint32 `protobuf:"varint,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *GravenInnocencePhotoFinishReq) Reset() {
	*x = GravenInnocencePhotoFinishReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[678]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocencePhotoFinishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocencePhotoFinishReq) ProtoMessage() {}

func (x *GravenInnocencePhotoFinishReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[678]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocencePhotoFinishReq.ProtoReflect.Descriptor instead.
func (*GravenInnocencePhotoFinishReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{678}
}

func (x *GravenInnocencePhotoFinishReq) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *GravenInnocencePhotoFinishReq) GetObjectId() uint32 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

type GravenInnocencePhotoFinishRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId uint32 `protobuf:"varint,6,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Param    uint32 `protobuf:"varint,11,opt,name=param,proto3" json:"param,omitempty"`
	Retcode  int32  `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *GravenInnocencePhotoFinishRsp) Reset() {
	*x = GravenInnocencePhotoFinishRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[679]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocencePhotoFinishRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocencePhotoFinishRsp) ProtoMessage() {}

func (x *GravenInnocencePhotoFinishRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[679]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocencePhotoFinishRsp.ProtoReflect.Descriptor instead.
func (*GravenInnocencePhotoFinishRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{679}
}

func (x *GravenInnocencePhotoFinishRsp) GetObjectId() uint32 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *GravenInnocencePhotoFinishRsp) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *GravenInnocencePhotoFinishRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type GravenInnocencePhotoReminderNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupBundleId uint32 `protobuf:"varint,14,opt,name=group_bundle_id,json=groupBundleId,proto3" json:"group_bundle_id,omitempty"`
	ReminderId    uint32 `protobuf:"varint,6,opt,name=reminder_id,json=reminderId,proto3" json:"reminder_id,omitempty"`
}

func (x *GravenInnocencePhotoReminderNotify) Reset() {
	*x = GravenInnocencePhotoReminderNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[680]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravenInnocencePhotoReminderNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravenInnocencePhotoReminderNotify) ProtoMessage() {}

func (x *GravenInnocencePhotoReminderNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[680]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravenInnocencePhotoReminderNotify.ProtoReflect.Descriptor instead.
func (*GravenInnocencePhotoReminderNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{680}
}

func (x *GravenInnocencePhotoReminderNotify) GetGroupBundleId() uint32 {
	if x != nil {
		return x.GroupBundleId
	}
	return 0
}

func (x *GravenInnocencePhotoReminderNotify) GetReminderId() uint32 {
	if x != nil {
		return x.ReminderId
	}
	return 0
}

type InstableSprayTeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarInfoList []*InstableSprayAvatarInfo `protobuf:"bytes,13,rep,name=avatar_info_list,json=avatarInfoList,proto3" json:"avatar_info_list,omitempty"`
}

func (x *InstableSprayTeamInfo) Reset() {
	*x = InstableSprayTeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[681]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayTeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayTeamInfo) ProtoMessage() {}

func (x *InstableSprayTeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[681]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayTeamInfo.ProtoReflect.Descriptor instead.
func (*InstableSprayTeamInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{681}
}

func (x *InstableSprayTeamInfo) GetAvatarInfoList() []*InstableSprayAvatarInfo {
	if x != nil {
		return x.AvatarInfoList
	}
	return nil
}

type InstableSprayStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished   bool                     `protobuf:"varint,10,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	MaxScore     uint32                   `protobuf:"varint,3,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	StageId      uint32                   `protobuf:"varint,4,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	TeamInfoList []*InstableSprayTeamInfo `protobuf:"bytes,6,rep,name=team_info_list,json=teamInfoList,proto3" json:"team_info_list,omitempty"`
}

func (x *InstableSprayStageInfo) Reset() {
	*x = InstableSprayStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[682]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayStageInfo) ProtoMessage() {}

func (x *InstableSprayStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[682]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayStageInfo.ProtoReflect.Descriptor instead.
func (*InstableSprayStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{682}
}

func (x *InstableSprayStageInfo) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *InstableSprayStageInfo) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *InstableSprayStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *InstableSprayStageInfo) GetTeamInfoList() []*InstableSprayTeamInfo {
	if x != nil {
		return x.TeamInfoList
	}
	return nil
}

type InstableSprayDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageInfoList []*InstableSprayStageInfo `protobuf:"bytes,9,rep,name=stage_info_list,json=stageInfoList,proto3" json:"stage_info_list,omitempty"`
}

func (x *InstableSprayDetailInfo) Reset() {
	*x = InstableSprayDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[683]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayDetailInfo) ProtoMessage() {}

func (x *InstableSprayDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[683]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayDetailInfo.ProtoReflect.Descriptor instead.
func (*InstableSprayDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{683}
}

func (x *InstableSprayDetailInfo) GetStageInfoList() []*InstableSprayStageInfo {
	if x != nil {
		return x.StageInfoList
	}
	return nil
}

type InstableSprayAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTrial  bool   `protobuf:"varint,8,opt,name=is_trial,json=isTrial,proto3" json:"is_trial,omitempty"`
	AvatarId uint64 `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *InstableSprayAvatarInfo) Reset() {
	*x = InstableSprayAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[684]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayAvatarInfo) ProtoMessage() {}

func (x *InstableSprayAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[684]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayAvatarInfo.ProtoReflect.Descriptor instead.
func (*InstableSprayAvatarInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{684}
}

func (x *InstableSprayAvatarInfo) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

func (x *InstableSprayAvatarInfo) GetAvatarId() uint64 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type InstableSprayEnterDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId        uint32                     `protobuf:"varint,13,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Difficulty     uint32                     `protobuf:"varint,2,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	AvatarInfoList []*InstableSprayAvatarInfo `protobuf:"bytes,7,rep,name=avatar_info_list,json=avatarInfoList,proto3" json:"avatar_info_list,omitempty"`
}

func (x *InstableSprayEnterDungeonReq) Reset() {
	*x = InstableSprayEnterDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[685]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayEnterDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayEnterDungeonReq) ProtoMessage() {}

func (x *InstableSprayEnterDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[685]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayEnterDungeonReq.ProtoReflect.Descriptor instead.
func (*InstableSprayEnterDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{685}
}

func (x *InstableSprayEnterDungeonReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *InstableSprayEnterDungeonReq) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *InstableSprayEnterDungeonReq) GetAvatarInfoList() []*InstableSprayAvatarInfo {
	if x != nil {
		return x.AvatarInfoList
	}
	return nil
}

type InstableSprayEnterDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,11,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Retcode int32  `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *InstableSprayEnterDungeonRsp) Reset() {
	*x = InstableSprayEnterDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[686]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayEnterDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayEnterDungeonRsp) ProtoMessage() {}

func (x *InstableSprayEnterDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[686]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayEnterDungeonRsp.ProtoReflect.Descriptor instead.
func (*InstableSprayEnterDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{686}
}

func (x *InstableSprayEnterDungeonRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *InstableSprayEnterDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type InstableSpraySwitchTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarInfoList []*InstableSprayAvatarInfo `protobuf:"bytes,13,rep,name=avatar_info_list,json=avatarInfoList,proto3" json:"avatar_info_list,omitempty"`
}

func (x *InstableSpraySwitchTeamReq) Reset() {
	*x = InstableSpraySwitchTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[687]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSpraySwitchTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSpraySwitchTeamReq) ProtoMessage() {}

func (x *InstableSpraySwitchTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[687]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSpraySwitchTeamReq.ProtoReflect.Descriptor instead.
func (*InstableSpraySwitchTeamReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{687}
}

func (x *InstableSpraySwitchTeamReq) GetAvatarInfoList() []*InstableSprayAvatarInfo {
	if x != nil {
		return x.AvatarInfoList
	}
	return nil
}

type InstableSpraySwitchTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Retcode int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *InstableSpraySwitchTeamRsp) Reset() {
	*x = InstableSpraySwitchTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[688]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSpraySwitchTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSpraySwitchTeamRsp) ProtoMessage() {}

func (x *InstableSpraySwitchTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[688]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSpraySwitchTeamRsp.ProtoReflect.Descriptor instead.
func (*InstableSpraySwitchTeamRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{688}
}

func (x *InstableSpraySwitchTeamRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *InstableSpraySwitchTeamRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type InstableSprayLevelFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNeedSwitchTeam  bool   `protobuf:"varint,11,opt,name=is_need_switch_team,json=isNeedSwitchTeam,proto3" json:"is_need_switch_team,omitempty"`
	IsSkipBlackScreen bool   `protobuf:"varint,7,opt,name=is_skip_black_screen,json=isSkipBlackScreen,proto3" json:"is_skip_black_screen,omitempty"`
	Round             uint32 `protobuf:"varint,15,opt,name=round,proto3" json:"round,omitempty"`
	StageId           uint32 `protobuf:"varint,8,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	LevelId           uint32 `protobuf:"varint,10,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *InstableSprayLevelFinishNotify) Reset() {
	*x = InstableSprayLevelFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[689]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayLevelFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayLevelFinishNotify) ProtoMessage() {}

func (x *InstableSprayLevelFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[689]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayLevelFinishNotify.ProtoReflect.Descriptor instead.
func (*InstableSprayLevelFinishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{689}
}

func (x *InstableSprayLevelFinishNotify) GetIsNeedSwitchTeam() bool {
	if x != nil {
		return x.IsNeedSwitchTeam
	}
	return false
}

func (x *InstableSprayLevelFinishNotify) GetIsSkipBlackScreen() bool {
	if x != nil {
		return x.IsSkipBlackScreen
	}
	return false
}

func (x *InstableSprayLevelFinishNotify) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *InstableSprayLevelFinishNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *InstableSprayLevelFinishNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type InstableSprayRestartDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarInfoList []*InstableSprayAvatarInfo `protobuf:"bytes,6,rep,name=avatar_info_list,json=avatarInfoList,proto3" json:"avatar_info_list,omitempty"`
}

func (x *InstableSprayRestartDungeonReq) Reset() {
	*x = InstableSprayRestartDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[690]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayRestartDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayRestartDungeonReq) ProtoMessage() {}

func (x *InstableSprayRestartDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[690]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayRestartDungeonReq.ProtoReflect.Descriptor instead.
func (*InstableSprayRestartDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{690}
}

func (x *InstableSprayRestartDungeonReq) GetAvatarInfoList() []*InstableSprayAvatarInfo {
	if x != nil {
		return x.AvatarInfoList
	}
	return nil
}

type InstableSprayRestartDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Retcode int32  `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *InstableSprayRestartDungeonRsp) Reset() {
	*x = InstableSprayRestartDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[691]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstableSprayRestartDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstableSprayRestartDungeonRsp) ProtoMessage() {}

func (x *InstableSprayRestartDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[691]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstableSprayRestartDungeonRsp.ProtoReflect.Descriptor instead.
func (*InstableSprayRestartDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{691}
}

func (x *InstableSprayRestartDungeonRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *InstableSprayRestartDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type MuqadasPotionLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId  uint32 `protobuf:"varint,15,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	MaxScore uint32 `protobuf:"varint,9,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	IsOpen   bool   `protobuf:"varint,10,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *MuqadasPotionLevelData) Reset() {
	*x = MuqadasPotionLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[692]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuqadasPotionLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuqadasPotionLevelData) ProtoMessage() {}

func (x *MuqadasPotionLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[692]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuqadasPotionLevelData.ProtoReflect.Descriptor instead.
func (*MuqadasPotionLevelData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{692}
}

func (x *MuqadasPotionLevelData) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *MuqadasPotionLevelData) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *MuqadasPotionLevelData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type MuqadasPotionActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MuqadasPotionLevelDataList []*MuqadasPotionLevelData `protobuf:"bytes,8,rep,name=muqadas_potion_level_data_list,json=muqadasPotionLevelDataList,proto3" json:"muqadas_potion_level_data_list,omitempty"`
}

func (x *MuqadasPotionActivityDetailInfo) Reset() {
	*x = MuqadasPotionActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[693]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuqadasPotionActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuqadasPotionActivityDetailInfo) ProtoMessage() {}

func (x *MuqadasPotionActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[693]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuqadasPotionActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*MuqadasPotionActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{693}
}

func (x *MuqadasPotionActivityDetailInfo) GetMuqadasPotionLevelDataList() []*MuqadasPotionLevelData {
	if x != nil {
		return x.MuqadasPotionLevelDataList
	}
	return nil
}

type MuqadasPotionActivityEnterDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,12,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *MuqadasPotionActivityEnterDungeonReq) Reset() {
	*x = MuqadasPotionActivityEnterDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[694]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuqadasPotionActivityEnterDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuqadasPotionActivityEnterDungeonReq) ProtoMessage() {}

func (x *MuqadasPotionActivityEnterDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[694]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuqadasPotionActivityEnterDungeonReq.ProtoReflect.Descriptor instead.
func (*MuqadasPotionActivityEnterDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{694}
}

func (x *MuqadasPotionActivityEnterDungeonReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type MuqadasPotionActivityEnterDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	LevelId uint32 `protobuf:"varint,9,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *MuqadasPotionActivityEnterDungeonRsp) Reset() {
	*x = MuqadasPotionActivityEnterDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[695]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuqadasPotionActivityEnterDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuqadasPotionActivityEnterDungeonRsp) ProtoMessage() {}

func (x *MuqadasPotionActivityEnterDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[695]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuqadasPotionActivityEnterDungeonRsp.ProtoReflect.Descriptor instead.
func (*MuqadasPotionActivityEnterDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{695}
}

func (x *MuqadasPotionActivityEnterDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *MuqadasPotionActivityEnterDungeonRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type MuqadasPotionDungeonSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinalScore           uint32 `protobuf:"varint,11,opt,name=final_score,json=finalScore,proto3" json:"final_score,omitempty"`
	CaptureWeaknessCount uint32 `protobuf:"varint,15,opt,name=capture_weakness_count,json=captureWeaknessCount,proto3" json:"capture_weakness_count,omitempty"`
	IsSuccess            bool   `protobuf:"varint,6,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	LevelId              uint32 `protobuf:"varint,10,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsNewRecord          bool   `protobuf:"varint,2,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
}

func (x *MuqadasPotionDungeonSettleNotify) Reset() {
	*x = MuqadasPotionDungeonSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[696]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuqadasPotionDungeonSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuqadasPotionDungeonSettleNotify) ProtoMessage() {}

func (x *MuqadasPotionDungeonSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[696]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuqadasPotionDungeonSettleNotify.ProtoReflect.Descriptor instead.
func (*MuqadasPotionDungeonSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{696}
}

func (x *MuqadasPotionDungeonSettleNotify) GetFinalScore() uint32 {
	if x != nil {
		return x.FinalScore
	}
	return 0
}

func (x *MuqadasPotionDungeonSettleNotify) GetCaptureWeaknessCount() uint32 {
	if x != nil {
		return x.CaptureWeaknessCount
	}
	return 0
}

func (x *MuqadasPotionDungeonSettleNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *MuqadasPotionDungeonSettleNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *MuqadasPotionDungeonSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

type MuqadasPotionRestartDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MuqadasPotionRestartDungeonReq) Reset() {
	*x = MuqadasPotionRestartDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[697]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuqadasPotionRestartDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuqadasPotionRestartDungeonReq) ProtoMessage() {}

func (x *MuqadasPotionRestartDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[697]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuqadasPotionRestartDungeonReq.ProtoReflect.Descriptor instead.
func (*MuqadasPotionRestartDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{697}
}

type MuqadasPotionRestartDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *MuqadasPotionRestartDungeonRsp) Reset() {
	*x = MuqadasPotionRestartDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[698]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuqadasPotionRestartDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuqadasPotionRestartDungeonRsp) ProtoMessage() {}

func (x *MuqadasPotionRestartDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[698]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuqadasPotionRestartDungeonRsp.ProtoReflect.Descriptor instead.
func (*MuqadasPotionRestartDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{698}
}

func (x *MuqadasPotionRestartDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type MuqadasPotionCaptureWeaknessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureWeaknessCount uint32 `protobuf:"varint,10,opt,name=capture_weakness_count,json=captureWeaknessCount,proto3" json:"capture_weakness_count,omitempty"`
	LevelId              uint32 `protobuf:"varint,15,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *MuqadasPotionCaptureWeaknessReq) Reset() {
	*x = MuqadasPotionCaptureWeaknessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[699]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuqadasPotionCaptureWeaknessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuqadasPotionCaptureWeaknessReq) ProtoMessage() {}

func (x *MuqadasPotionCaptureWeaknessReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[699]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuqadasPotionCaptureWeaknessReq.ProtoReflect.Descriptor instead.
func (*MuqadasPotionCaptureWeaknessReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{699}
}

func (x *MuqadasPotionCaptureWeaknessReq) GetCaptureWeaknessCount() uint32 {
	if x != nil {
		return x.CaptureWeaknessCount
	}
	return 0
}

func (x *MuqadasPotionCaptureWeaknessReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type MuqadasPotionCaptureWeaknessRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *MuqadasPotionCaptureWeaknessRsp) Reset() {
	*x = MuqadasPotionCaptureWeaknessRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[700]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuqadasPotionCaptureWeaknessRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuqadasPotionCaptureWeaknessRsp) ProtoMessage() {}

func (x *MuqadasPotionCaptureWeaknessRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[700]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuqadasPotionCaptureWeaknessRsp.ProtoReflect.Descriptor instead.
func (*MuqadasPotionCaptureWeaknessRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{700}
}

func (x *MuqadasPotionCaptureWeaknessRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type TreasureSeelieRegionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDone          bool    `protobuf:"varint,12,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	OpenDay         uint32  `protobuf:"varint,6,opt,name=open_day,json=openDay,proto3" json:"open_day,omitempty"`
	OpenedChestNum  uint32  `protobuf:"varint,10,opt,name=opened_chest_num,json=openedChestNum,proto3" json:"opened_chest_num,omitempty"`
	RegionRadius    float32 `protobuf:"fixed32,7,opt,name=region_radius,json=regionRadius,proto3" json:"region_radius,omitempty"`
	IsOpen          bool    `protobuf:"varint,9,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	OpenTime        uint32  `protobuf:"varint,8,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	RegionCenterPos *Vector `protobuf:"bytes,11,opt,name=region_center_pos,json=regionCenterPos,proto3" json:"region_center_pos,omitempty"`
	SceneId         uint32  `protobuf:"varint,13,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	TotalChestNum   uint32  `protobuf:"varint,15,opt,name=total_chest_num,json=totalChestNum,proto3" json:"total_chest_num,omitempty"`
	RegionId        uint32  `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *TreasureSeelieRegionData) Reset() {
	*x = TreasureSeelieRegionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[701]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureSeelieRegionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureSeelieRegionData) ProtoMessage() {}

func (x *TreasureSeelieRegionData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[701]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureSeelieRegionData.ProtoReflect.Descriptor instead.
func (*TreasureSeelieRegionData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{701}
}

func (x *TreasureSeelieRegionData) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *TreasureSeelieRegionData) GetOpenDay() uint32 {
	if x != nil {
		return x.OpenDay
	}
	return 0
}

func (x *TreasureSeelieRegionData) GetOpenedChestNum() uint32 {
	if x != nil {
		return x.OpenedChestNum
	}
	return 0
}

func (x *TreasureSeelieRegionData) GetRegionRadius() float32 {
	if x != nil {
		return x.RegionRadius
	}
	return 0
}

func (x *TreasureSeelieRegionData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *TreasureSeelieRegionData) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *TreasureSeelieRegionData) GetRegionCenterPos() *Vector {
	if x != nil {
		return x.RegionCenterPos
	}
	return nil
}

func (x *TreasureSeelieRegionData) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *TreasureSeelieRegionData) GetTotalChestNum() uint32 {
	if x != nil {
		return x.TotalChestNum
	}
	return 0
}

func (x *TreasureSeelieRegionData) GetRegionId() uint32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

type TreasureSeelieActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreasureCloseTime uint32                      `protobuf:"varint,10,opt,name=treasure_close_time,json=treasureCloseTime,proto3" json:"treasure_close_time,omitempty"`
	IsContentClosed   bool                        `protobuf:"varint,8,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
	RegionDataList    []*TreasureSeelieRegionData `protobuf:"bytes,14,rep,name=region_data_list,json=regionDataList,proto3" json:"region_data_list,omitempty"`
}

func (x *TreasureSeelieActivityDetailInfo) Reset() {
	*x = TreasureSeelieActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[702]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureSeelieActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureSeelieActivityDetailInfo) ProtoMessage() {}

func (x *TreasureSeelieActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[702]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureSeelieActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*TreasureSeelieActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{702}
}

func (x *TreasureSeelieActivityDetailInfo) GetTreasureCloseTime() uint32 {
	if x != nil {
		return x.TreasureCloseTime
	}
	return 0
}

func (x *TreasureSeelieActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

func (x *TreasureSeelieActivityDetailInfo) GetRegionDataList() []*TreasureSeelieRegionData {
	if x != nil {
		return x.RegionDataList
	}
	return nil
}

type TreasureSeelieCollectOrbsNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentNum uint32 `protobuf:"varint,11,opt,name=current_num,json=currentNum,proto3" json:"current_num,omitempty"`
	TotalNum   uint32 `protobuf:"varint,5,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
}

func (x *TreasureSeelieCollectOrbsNotify) Reset() {
	*x = TreasureSeelieCollectOrbsNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[703]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureSeelieCollectOrbsNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureSeelieCollectOrbsNotify) ProtoMessage() {}

func (x *TreasureSeelieCollectOrbsNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[703]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureSeelieCollectOrbsNotify.ProtoReflect.Descriptor instead.
func (*TreasureSeelieCollectOrbsNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{703}
}

func (x *TreasureSeelieCollectOrbsNotify) GetCurrentNum() uint32 {
	if x != nil {
		return x.CurrentNum
	}
	return 0
}

func (x *TreasureSeelieCollectOrbsNotify) GetTotalNum() uint32 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

type RockBoardExploreStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinish bool   `protobuf:"varint,6,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	OpenTime uint32 `protobuf:"varint,7,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	IsOpen   bool   `protobuf:"varint,5,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	StageId  uint32 `protobuf:"varint,3,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *RockBoardExploreStageData) Reset() {
	*x = RockBoardExploreStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[704]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RockBoardExploreStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RockBoardExploreStageData) ProtoMessage() {}

func (x *RockBoardExploreStageData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[704]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RockBoardExploreStageData.ProtoReflect.Descriptor instead.
func (*RockBoardExploreStageData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{704}
}

func (x *RockBoardExploreStageData) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *RockBoardExploreStageData) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *RockBoardExploreStageData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *RockBoardExploreStageData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type RockBoardExploreDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageDataList []*RockBoardExploreStageData `protobuf:"bytes,9,rep,name=stage_data_list,json=stageDataList,proto3" json:"stage_data_list,omitempty"`
}

func (x *RockBoardExploreDetailInfo) Reset() {
	*x = RockBoardExploreDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[705]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RockBoardExploreDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RockBoardExploreDetailInfo) ProtoMessage() {}

func (x *RockBoardExploreDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[705]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RockBoardExploreDetailInfo.ProtoReflect.Descriptor instead.
func (*RockBoardExploreDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{705}
}

func (x *RockBoardExploreDetailInfo) GetStageDataList() []*RockBoardExploreStageData {
	if x != nil {
		return x.StageDataList
	}
	return nil
}

type VintageHuntingStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenTime    uint32 `protobuf:"varint,10,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	IsFinish    bool   `protobuf:"varint,3,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	IsOpen      bool   `protobuf:"varint,9,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	RecordValue uint32 `protobuf:"varint,12,opt,name=record_value,json=recordValue,proto3" json:"record_value,omitempty"`
	StageId     uint32 `protobuf:"varint,7,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *VintageHuntingStageData) Reset() {
	*x = VintageHuntingStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[706]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageHuntingStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageHuntingStageData) ProtoMessage() {}

func (x *VintageHuntingStageData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[706]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageHuntingStageData.ProtoReflect.Descriptor instead.
func (*VintageHuntingStageData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{706}
}

func (x *VintageHuntingStageData) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *VintageHuntingStageData) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *VintageHuntingStageData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *VintageHuntingStageData) GetRecordValue() uint32 {
	if x != nil {
		return x.RecordValue
	}
	return 0
}

func (x *VintageHuntingStageData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type VintagePresentLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresentId uint32 `protobuf:"varint,10,opt,name=present_id,json=presentId,proto3" json:"present_id,omitempty"`
	IsOpen    bool   `protobuf:"varint,11,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsFinish  bool   `protobuf:"varint,5,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	StageId   uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *VintagePresentLevelData) Reset() {
	*x = VintagePresentLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[707]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintagePresentLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintagePresentLevelData) ProtoMessage() {}

func (x *VintagePresentLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[707]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintagePresentLevelData.ProtoReflect.Descriptor instead.
func (*VintagePresentLevelData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{707}
}

func (x *VintagePresentLevelData) GetPresentId() uint32 {
	if x != nil {
		return x.PresentId
	}
	return 0
}

func (x *VintagePresentLevelData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *VintagePresentLevelData) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *VintagePresentLevelData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type VintagePresentStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenTime        uint32                              `protobuf:"varint,1,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	StageId         uint32                              `protobuf:"varint,15,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsFinish        bool                                `protobuf:"varint,13,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	IsOpen          bool                                `protobuf:"varint,10,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	PresentLevelMap map[uint32]*VintagePresentLevelData `protobuf:"bytes,2,rep,name=present_level_map,json=presentLevelMap,proto3" json:"present_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VintagePresentStageData) Reset() {
	*x = VintagePresentStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[708]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintagePresentStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintagePresentStageData) ProtoMessage() {}

func (x *VintagePresentStageData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[708]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintagePresentStageData.ProtoReflect.Descriptor instead.
func (*VintagePresentStageData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{708}
}

func (x *VintagePresentStageData) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *VintagePresentStageData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *VintagePresentStageData) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *VintagePresentStageData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *VintagePresentStageData) GetPresentLevelMap() map[uint32]*VintagePresentLevelData {
	if x != nil {
		return x.PresentLevelMap
	}
	return nil
}

type VintageBoothUsedItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen   bool   `protobuf:"varint,7,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	GadgetId uint32 `protobuf:"varint,8,opt,name=gadget_id,json=gadgetId,proto3" json:"gadget_id,omitempty"`
}

func (x *VintageBoothUsedItemData) Reset() {
	*x = VintageBoothUsedItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[709]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageBoothUsedItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageBoothUsedItemData) ProtoMessage() {}

func (x *VintageBoothUsedItemData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[709]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageBoothUsedItemData.ProtoReflect.Descriptor instead.
func (*VintageBoothUsedItemData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{709}
}

func (x *VintageBoothUsedItemData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *VintageBoothUsedItemData) GetGadgetId() uint32 {
	if x != nil {
		return x.GadgetId
	}
	return 0
}

type VintageCampChallengeLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId  uint32 `protobuf:"varint,14,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	LevelId  uint32 `protobuf:"varint,11,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsFinish bool   `protobuf:"varint,8,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	IsOpen   bool   `protobuf:"varint,6,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *VintageCampChallengeLevelData) Reset() {
	*x = VintageCampChallengeLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[710]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageCampChallengeLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageCampChallengeLevelData) ProtoMessage() {}

func (x *VintageCampChallengeLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[710]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageCampChallengeLevelData.ProtoReflect.Descriptor instead.
func (*VintageCampChallengeLevelData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{710}
}

func (x *VintageCampChallengeLevelData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *VintageCampChallengeLevelData) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *VintageCampChallengeLevelData) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *VintageCampChallengeLevelData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type VintageCampChallengeStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen           bool                                      `protobuf:"varint,5,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	MaxFinishedLevel uint32                                    `protobuf:"varint,11,opt,name=max_finished_level,json=maxFinishedLevel,proto3" json:"max_finished_level,omitempty"`
	OpenTime         uint32                                    `protobuf:"varint,3,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	IsFinish         bool                                      `protobuf:"varint,10,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	StageId          uint32                                    `protobuf:"varint,4,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	CampLevelMap     map[uint32]*VintageCampChallengeLevelData `protobuf:"bytes,2,rep,name=camp_level_map,json=campLevelMap,proto3" json:"camp_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VintageCampChallengeStageData) Reset() {
	*x = VintageCampChallengeStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[711]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageCampChallengeStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageCampChallengeStageData) ProtoMessage() {}

func (x *VintageCampChallengeStageData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[711]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageCampChallengeStageData.ProtoReflect.Descriptor instead.
func (*VintageCampChallengeStageData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{711}
}

func (x *VintageCampChallengeStageData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *VintageCampChallengeStageData) GetMaxFinishedLevel() uint32 {
	if x != nil {
		return x.MaxFinishedLevel
	}
	return 0
}

func (x *VintageCampChallengeStageData) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *VintageCampChallengeStageData) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *VintageCampChallengeStageData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *VintageCampChallengeStageData) GetCampLevelMap() map[uint32]*VintageCampChallengeLevelData {
	if x != nil {
		return x.CampLevelMap
	}
	return nil
}

type VintageMarketTraderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraderId          uint32       `protobuf:"varint,7,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
	AvailableItemList []*ItemParam `protobuf:"bytes,9,rep,name=available_item_list,json=availableItemList,proto3" json:"available_item_list,omitempty"`
}

func (x *VintageMarketTraderInfo) Reset() {
	*x = VintageMarketTraderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[712]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketTraderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketTraderInfo) ProtoMessage() {}

func (x *VintageMarketTraderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[712]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketTraderInfo.ProtoReflect.Descriptor instead.
func (*VintageMarketTraderInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{712}
}

func (x *VintageMarketTraderInfo) GetTraderId() uint32 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

func (x *VintageMarketTraderInfo) GetAvailableItemList() []*ItemParam {
	if x != nil {
		return x.AvailableItemList
	}
	return nil
}

type VintageMarketDealInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraderItemInfoMap map[uint32]*VintageMarketTraderInfo `protobuf:"bytes,13,rep,name=trader_item_info_map,json=traderItemInfoMap,proto3" json:"trader_item_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VintageMarketDealInfo) Reset() {
	*x = VintageMarketDealInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[713]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketDealInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketDealInfo) ProtoMessage() {}

func (x *VintageMarketDealInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[713]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketDealInfo.ProtoReflect.Descriptor instead.
func (*VintageMarketDealInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{713}
}

func (x *VintageMarketDealInfo) GetTraderItemInfoMap() map[uint32]*VintageMarketTraderInfo {
	if x != nil {
		return x.TraderItemInfoMap
	}
	return nil
}

type VintageMarketStoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurAttrList     []uint32 `protobuf:"varint,5,rep,packed,name=cur_attr_list,json=curAttrList,proto3" json:"cur_attr_list,omitempty"`
	NextAimAttrList []uint32 `protobuf:"varint,14,rep,packed,name=next_aim_attr_list,json=nextAimAttrList,proto3" json:"next_aim_attr_list,omitempty"`
	StrategyList    []uint32 `protobuf:"varint,2,rep,packed,name=strategy_list,json=strategyList,proto3" json:"strategy_list,omitempty"`
	SlotCount       uint32   `protobuf:"varint,3,opt,name=slot_count,json=slotCount,proto3" json:"slot_count,omitempty"`
	StoreId         uint32   `protobuf:"varint,10,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
}

func (x *VintageMarketStoreInfo) Reset() {
	*x = VintageMarketStoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[714]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketStoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketStoreInfo) ProtoMessage() {}

func (x *VintageMarketStoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[714]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketStoreInfo.ProtoReflect.Descriptor instead.
func (*VintageMarketStoreInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{714}
}

func (x *VintageMarketStoreInfo) GetCurAttrList() []uint32 {
	if x != nil {
		return x.CurAttrList
	}
	return nil
}

func (x *VintageMarketStoreInfo) GetNextAimAttrList() []uint32 {
	if x != nil {
		return x.NextAimAttrList
	}
	return nil
}

func (x *VintageMarketStoreInfo) GetStrategyList() []uint32 {
	if x != nil {
		return x.StrategyList
	}
	return nil
}

func (x *VintageMarketStoreInfo) GetSlotCount() uint32 {
	if x != nil {
		return x.SlotCount
	}
	return 0
}

func (x *VintageMarketStoreInfo) GetStoreId() uint32 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

type VintageMarketStoreOpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyList []uint32 `protobuf:"varint,5,rep,packed,name=strategy_list,json=strategyList,proto3" json:"strategy_list,omitempty"`
	HelpUid      uint32   `protobuf:"varint,9,opt,name=help_uid,json=helpUid,proto3" json:"help_uid,omitempty"`
	StoreId      uint32   `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	HelpSkillId  uint32   `protobuf:"varint,7,opt,name=help_skill_id,json=helpSkillId,proto3" json:"help_skill_id,omitempty"`
	AddAttrList  []uint32 `protobuf:"varint,15,rep,packed,name=add_attr_list,json=addAttrList,proto3" json:"add_attr_list,omitempty"`
}

func (x *VintageMarketStoreOpInfo) Reset() {
	*x = VintageMarketStoreOpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[715]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketStoreOpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketStoreOpInfo) ProtoMessage() {}

func (x *VintageMarketStoreOpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[715]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketStoreOpInfo.ProtoReflect.Descriptor instead.
func (*VintageMarketStoreOpInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{715}
}

func (x *VintageMarketStoreOpInfo) GetStrategyList() []uint32 {
	if x != nil {
		return x.StrategyList
	}
	return nil
}

func (x *VintageMarketStoreOpInfo) GetHelpUid() uint32 {
	if x != nil {
		return x.HelpUid
	}
	return 0
}

func (x *VintageMarketStoreOpInfo) GetStoreId() uint32 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *VintageMarketStoreOpInfo) GetHelpSkillId() uint32 {
	if x != nil {
		return x.HelpSkillId
	}
	return 0
}

func (x *VintageMarketStoreOpInfo) GetAddAttrList() []uint32 {
	if x != nil {
		return x.AddAttrList
	}
	return nil
}

type VintageMarketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHelpModuleOpen        bool                      `protobuf:"varint,1485,opt,name=is_help_module_open,json=isHelpModuleOpen,proto3" json:"is_help_module_open,omitempty"`
	IsStoreContentInterrupt bool                      `protobuf:"varint,15,opt,name=is_store_content_interrupt,json=isStoreContentInterrupt,proto3" json:"is_store_content_interrupt,omitempty"`
	DealInfo                *VintageMarketDealInfo    `protobuf:"bytes,11,opt,name=deal_info,json=dealInfo,proto3" json:"deal_info,omitempty"`
	StoreRound              uint32                    `protobuf:"varint,7,opt,name=store_round,json=storeRound,proto3" json:"store_round,omitempty"`
	StoreRoundIncomeList    []uint32                  `protobuf:"varint,207,rep,packed,name=store_round_income_list,json=storeRoundIncomeList,proto3" json:"store_round_income_list,omitempty"`
	IsStoreContentFinish    bool                      `protobuf:"varint,5,opt,name=is_store_content_finish,json=isStoreContentFinish,proto3" json:"is_store_content_finish,omitempty"`
	CurEnvEventList         []uint32                  `protobuf:"varint,8,rep,packed,name=cur_env_event_list,json=curEnvEventList,proto3" json:"cur_env_event_list,omitempty"`
	IsMarketContentOpen     bool                      `protobuf:"varint,10,opt,name=is_market_content_open,json=isMarketContentOpen,proto3" json:"is_market_content_open,omitempty"`
	NextCanUseHelpRound     uint32                    `protobuf:"varint,1800,opt,name=next_can_use_help_round,json=nextCanUseHelpRound,proto3" json:"next_can_use_help_round,omitempty"`
	IsMarketContentFinish   bool                      `protobuf:"varint,2,opt,name=is_market_content_finish,json=isMarketContentFinish,proto3" json:"is_market_content_finish,omitempty"`
	ViewedStrategyList      []uint32                  `protobuf:"varint,14,rep,packed,name=viewed_strategy_list,json=viewedStrategyList,proto3" json:"viewed_strategy_list,omitempty"`
	PrevCoinCNum            uint32                    `protobuf:"varint,3,opt,name=prev_coin_c_num,json=prevCoinCNum,proto3" json:"prev_coin_c_num,omitempty"`
	BargainInfoMap          map[uint32]bool           `protobuf:"bytes,6,rep,name=bargain_info_map,json=bargainInfoMap,proto3" json:"bargain_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DividendRewardCount     uint32                    `protobuf:"varint,1798,opt,name=dividend_reward_count,json=dividendRewardCount,proto3" json:"dividend_reward_count,omitempty"`
	CurNpcEventList         []uint32                  `protobuf:"varint,4,rep,packed,name=cur_npc_event_list,json=curNpcEventList,proto3" json:"cur_npc_event_list,omitempty"`
	IsHelpInCd              bool                      `protobuf:"varint,366,opt,name=is_help_in_cd,json=isHelpInCd,proto3" json:"is_help_in_cd,omitempty"`
	PrevCoinBNum            uint32                    `protobuf:"varint,1,opt,name=prev_coin_b_num,json=prevCoinBNum,proto3" json:"prev_coin_b_num,omitempty"`
	OpenStoreList           []*VintageMarketStoreInfo `protobuf:"bytes,9,rep,name=open_store_list,json=openStoreList,proto3" json:"open_store_list,omitempty"`
	HelpSkillId             uint32                    `protobuf:"varint,760,opt,name=help_skill_id,json=helpSkillId,proto3" json:"help_skill_id,omitempty"`
	IsRoundTipsView         bool                      `protobuf:"varint,12,opt,name=is_round_tips_view,json=isRoundTipsView,proto3" json:"is_round_tips_view,omitempty"`
	IsStrategyModuleOpen    bool                      `protobuf:"varint,876,opt,name=is_strategy_module_open,json=isStrategyModuleOpen,proto3" json:"is_strategy_module_open,omitempty"`
	UnlockStrategyList      []uint32                  `protobuf:"varint,13,rep,packed,name=unlock_strategy_list,json=unlockStrategyList,proto3" json:"unlock_strategy_list,omitempty"`
}

func (x *VintageMarketInfo) Reset() {
	*x = VintageMarketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[716]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketInfo) ProtoMessage() {}

func (x *VintageMarketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[716]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketInfo.ProtoReflect.Descriptor instead.
func (*VintageMarketInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{716}
}

func (x *VintageMarketInfo) GetIsHelpModuleOpen() bool {
	if x != nil {
		return x.IsHelpModuleOpen
	}
	return false
}

func (x *VintageMarketInfo) GetIsStoreContentInterrupt() bool {
	if x != nil {
		return x.IsStoreContentInterrupt
	}
	return false
}

func (x *VintageMarketInfo) GetDealInfo() *VintageMarketDealInfo {
	if x != nil {
		return x.DealInfo
	}
	return nil
}

func (x *VintageMarketInfo) GetStoreRound() uint32 {
	if x != nil {
		return x.StoreRound
	}
	return 0
}

func (x *VintageMarketInfo) GetStoreRoundIncomeList() []uint32 {
	if x != nil {
		return x.StoreRoundIncomeList
	}
	return nil
}

func (x *VintageMarketInfo) GetIsStoreContentFinish() bool {
	if x != nil {
		return x.IsStoreContentFinish
	}
	return false
}

func (x *VintageMarketInfo) GetCurEnvEventList() []uint32 {
	if x != nil {
		return x.CurEnvEventList
	}
	return nil
}

func (x *VintageMarketInfo) GetIsMarketContentOpen() bool {
	if x != nil {
		return x.IsMarketContentOpen
	}
	return false
}

func (x *VintageMarketInfo) GetNextCanUseHelpRound() uint32 {
	if x != nil {
		return x.NextCanUseHelpRound
	}
	return 0
}

func (x *VintageMarketInfo) GetIsMarketContentFinish() bool {
	if x != nil {
		return x.IsMarketContentFinish
	}
	return false
}

func (x *VintageMarketInfo) GetViewedStrategyList() []uint32 {
	if x != nil {
		return x.ViewedStrategyList
	}
	return nil
}

func (x *VintageMarketInfo) GetPrevCoinCNum() uint32 {
	if x != nil {
		return x.PrevCoinCNum
	}
	return 0
}

func (x *VintageMarketInfo) GetBargainInfoMap() map[uint32]bool {
	if x != nil {
		return x.BargainInfoMap
	}
	return nil
}

func (x *VintageMarketInfo) GetDividendRewardCount() uint32 {
	if x != nil {
		return x.DividendRewardCount
	}
	return 0
}

func (x *VintageMarketInfo) GetCurNpcEventList() []uint32 {
	if x != nil {
		return x.CurNpcEventList
	}
	return nil
}

func (x *VintageMarketInfo) GetIsHelpInCd() bool {
	if x != nil {
		return x.IsHelpInCd
	}
	return false
}

func (x *VintageMarketInfo) GetPrevCoinBNum() uint32 {
	if x != nil {
		return x.PrevCoinBNum
	}
	return 0
}

func (x *VintageMarketInfo) GetOpenStoreList() []*VintageMarketStoreInfo {
	if x != nil {
		return x.OpenStoreList
	}
	return nil
}

func (x *VintageMarketInfo) GetHelpSkillId() uint32 {
	if x != nil {
		return x.HelpSkillId
	}
	return 0
}

func (x *VintageMarketInfo) GetIsRoundTipsView() bool {
	if x != nil {
		return x.IsRoundTipsView
	}
	return false
}

func (x *VintageMarketInfo) GetIsStrategyModuleOpen() bool {
	if x != nil {
		return x.IsStrategyModuleOpen
	}
	return false
}

func (x *VintageMarketInfo) GetUnlockStrategyList() []uint32 {
	if x != nil {
		return x.UnlockStrategyList
	}
	return nil
}

type VintageActivityDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketInfo      *VintageMarketInfo                        `protobuf:"bytes,2,opt,name=market_info,json=marketInfo,proto3" json:"market_info,omitempty"`
	HuntingStageMap map[uint32]*VintageHuntingStageData       `protobuf:"bytes,7,rep,name=hunting_stage_map,json=huntingStageMap,proto3" json:"hunting_stage_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoothData       *VintageBoothUsedItemData                 `protobuf:"bytes,5,opt,name=booth_data,json=boothData,proto3" json:"booth_data,omitempty"`
	CampStageMap    map[uint32]*VintageCampChallengeStageData `protobuf:"bytes,13,rep,name=camp_stage_map,json=campStageMap,proto3" json:"camp_stage_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PresentStageMap map[uint32]*VintagePresentStageData       `protobuf:"bytes,4,rep,name=present_stage_map,json=presentStageMap,proto3" json:"present_stage_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsContentClosed bool                                      `protobuf:"varint,11,opt,name=is_content_closed,json=isContentClosed,proto3" json:"is_content_closed,omitempty"`
}

func (x *VintageActivityDetailInfo) Reset() {
	*x = VintageActivityDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[717]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageActivityDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageActivityDetailInfo) ProtoMessage() {}

func (x *VintageActivityDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[717]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageActivityDetailInfo.ProtoReflect.Descriptor instead.
func (*VintageActivityDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{717}
}

func (x *VintageActivityDetailInfo) GetMarketInfo() *VintageMarketInfo {
	if x != nil {
		return x.MarketInfo
	}
	return nil
}

func (x *VintageActivityDetailInfo) GetHuntingStageMap() map[uint32]*VintageHuntingStageData {
	if x != nil {
		return x.HuntingStageMap
	}
	return nil
}

func (x *VintageActivityDetailInfo) GetBoothData() *VintageBoothUsedItemData {
	if x != nil {
		return x.BoothData
	}
	return nil
}

func (x *VintageActivityDetailInfo) GetCampStageMap() map[uint32]*VintageCampChallengeStageData {
	if x != nil {
		return x.CampStageMap
	}
	return nil
}

func (x *VintageActivityDetailInfo) GetPresentStageMap() map[uint32]*VintagePresentStageData {
	if x != nil {
		return x.PresentStageMap
	}
	return nil
}

func (x *VintageActivityDetailInfo) GetIsContentClosed() bool {
	if x != nil {
		return x.IsContentClosed
	}
	return false
}

type VintageMarketDeliverItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliverItemList []*ItemParam `protobuf:"bytes,3,rep,name=deliver_item_list,json=deliverItemList,proto3" json:"deliver_item_list,omitempty"`
	TraderId        uint32       `protobuf:"varint,5,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
}

func (x *VintageMarketDeliverItemReq) Reset() {
	*x = VintageMarketDeliverItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[718]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketDeliverItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketDeliverItemReq) ProtoMessage() {}

func (x *VintageMarketDeliverItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[718]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketDeliverItemReq.ProtoReflect.Descriptor instead.
func (*VintageMarketDeliverItemReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{718}
}

func (x *VintageMarketDeliverItemReq) GetDeliverItemList() []*ItemParam {
	if x != nil {
		return x.DeliverItemList
	}
	return nil
}

func (x *VintageMarketDeliverItemReq) GetTraderId() uint32 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

type VintageMarketDeliverItemRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode  int32  `protobuf:"varint,6,opt,name=retcode,proto3" json:"retcode,omitempty"`
	TraderId uint32 `protobuf:"varint,3,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
}

func (x *VintageMarketDeliverItemRsp) Reset() {
	*x = VintageMarketDeliverItemRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[719]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketDeliverItemRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketDeliverItemRsp) ProtoMessage() {}

func (x *VintageMarketDeliverItemRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[719]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketDeliverItemRsp.ProtoReflect.Descriptor instead.
func (*VintageMarketDeliverItemRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{719}
}

func (x *VintageMarketDeliverItemRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *VintageMarketDeliverItemRsp) GetTraderId() uint32 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

type VintageHuntingFirstStageSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EliteCnt  uint32 `protobuf:"varint,10,opt,name=elite_cnt,json=eliteCnt,proto3" json:"elite_cnt,omitempty"`
	TimidCnt  uint32 `protobuf:"varint,2,opt,name=timid_cnt,json=timidCnt,proto3" json:"timid_cnt,omitempty"`
	BrutalCnt uint32 `protobuf:"varint,6,opt,name=brutal_cnt,json=brutalCnt,proto3" json:"brutal_cnt,omitempty"`
	Score     uint32 `protobuf:"varint,14,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *VintageHuntingFirstStageSettleInfo) Reset() {
	*x = VintageHuntingFirstStageSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[720]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageHuntingFirstStageSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageHuntingFirstStageSettleInfo) ProtoMessage() {}

func (x *VintageHuntingFirstStageSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[720]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageHuntingFirstStageSettleInfo.ProtoReflect.Descriptor instead.
func (*VintageHuntingFirstStageSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{720}
}

func (x *VintageHuntingFirstStageSettleInfo) GetEliteCnt() uint32 {
	if x != nil {
		return x.EliteCnt
	}
	return 0
}

func (x *VintageHuntingFirstStageSettleInfo) GetTimidCnt() uint32 {
	if x != nil {
		return x.TimidCnt
	}
	return 0
}

func (x *VintageHuntingFirstStageSettleInfo) GetBrutalCnt() uint32 {
	if x != nil {
		return x.BrutalCnt
	}
	return 0
}

func (x *VintageHuntingFirstStageSettleInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type VintageHuntingSecondStageSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimalCountMap   map[uint32]uint32 `protobuf:"bytes,6,rep,name=animal_count_map,json=animalCountMap,proto3" json:"animal_count_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CaptureAnimalNum uint32            `protobuf:"varint,7,opt,name=capture_animal_num,json=captureAnimalNum,proto3" json:"capture_animal_num,omitempty"`
	TotalNum         uint32            `protobuf:"varint,15,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
}

func (x *VintageHuntingSecondStageSettleInfo) Reset() {
	*x = VintageHuntingSecondStageSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[721]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageHuntingSecondStageSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageHuntingSecondStageSettleInfo) ProtoMessage() {}

func (x *VintageHuntingSecondStageSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[721]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageHuntingSecondStageSettleInfo.ProtoReflect.Descriptor instead.
func (*VintageHuntingSecondStageSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{721}
}

func (x *VintageHuntingSecondStageSettleInfo) GetAnimalCountMap() map[uint32]uint32 {
	if x != nil {
		return x.AnimalCountMap
	}
	return nil
}

func (x *VintageHuntingSecondStageSettleInfo) GetCaptureAnimalNum() uint32 {
	if x != nil {
		return x.CaptureAnimalNum
	}
	return 0
}

func (x *VintageHuntingSecondStageSettleInfo) GetTotalNum() uint32 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

type VintageHuntingThirdStageSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftTime  uint32 `protobuf:"varint,13,opt,name=left_time,json=leftTime,proto3" json:"left_time,omitempty"`
	IsSuccess bool   `protobuf:"varint,9,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *VintageHuntingThirdStageSettleInfo) Reset() {
	*x = VintageHuntingThirdStageSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[722]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageHuntingThirdStageSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageHuntingThirdStageSettleInfo) ProtoMessage() {}

func (x *VintageHuntingThirdStageSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[722]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageHuntingThirdStageSettleInfo.ProtoReflect.Descriptor instead.
func (*VintageHuntingThirdStageSettleInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{722}
}

func (x *VintageHuntingThirdStageSettleInfo) GetLeftTime() uint32 {
	if x != nil {
		return x.LeftTime
	}
	return 0
}

func (x *VintageHuntingThirdStageSettleInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type SceneGalleryVintageHuntingSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasNewWatcher      bool   `protobuf:"varint,11,opt,name=has_new_watcher,json=hasNewWatcher,proto3" json:"has_new_watcher,omitempty"`
	StageId            uint32 `protobuf:"varint,9,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	TotalWatcherNum    uint32 `protobuf:"varint,12,opt,name=total_watcher_num,json=totalWatcherNum,proto3" json:"total_watcher_num,omitempty"`
	FinishedWatcherNum uint32 `protobuf:"varint,6,opt,name=finished_watcher_num,json=finishedWatcherNum,proto3" json:"finished_watcher_num,omitempty"`
	IsNewRecord        bool   `protobuf:"varint,1,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	// Types that are assignable to Info:
	//
	//	*SceneGalleryVintageHuntingSettleNotify_FirstStageInfo
	//	*SceneGalleryVintageHuntingSettleNotify_SecondStageInfo
	//	*SceneGalleryVintageHuntingSettleNotify_ThirdStageInfo
	Info isSceneGalleryVintageHuntingSettleNotify_Info `protobuf_oneof:"info"`
}

func (x *SceneGalleryVintageHuntingSettleNotify) Reset() {
	*x = SceneGalleryVintageHuntingSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[723]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneGalleryVintageHuntingSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneGalleryVintageHuntingSettleNotify) ProtoMessage() {}

func (x *SceneGalleryVintageHuntingSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[723]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneGalleryVintageHuntingSettleNotify.ProtoReflect.Descriptor instead.
func (*SceneGalleryVintageHuntingSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{723}
}

func (x *SceneGalleryVintageHuntingSettleNotify) GetHasNewWatcher() bool {
	if x != nil {
		return x.HasNewWatcher
	}
	return false
}

func (x *SceneGalleryVintageHuntingSettleNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SceneGalleryVintageHuntingSettleNotify) GetTotalWatcherNum() uint32 {
	if x != nil {
		return x.TotalWatcherNum
	}
	return 0
}

func (x *SceneGalleryVintageHuntingSettleNotify) GetFinishedWatcherNum() uint32 {
	if x != nil {
		return x.FinishedWatcherNum
	}
	return 0
}

func (x *SceneGalleryVintageHuntingSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (m *SceneGalleryVintageHuntingSettleNotify) GetInfo() isSceneGalleryVintageHuntingSettleNotify_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *SceneGalleryVintageHuntingSettleNotify) GetFirstStageInfo() *VintageHuntingFirstStageSettleInfo {
	if x, ok := x.GetInfo().(*SceneGalleryVintageHuntingSettleNotify_FirstStageInfo); ok {
		return x.FirstStageInfo
	}
	return nil
}

func (x *SceneGalleryVintageHuntingSettleNotify) GetSecondStageInfo() *VintageHuntingSecondStageSettleInfo {
	if x, ok := x.GetInfo().(*SceneGalleryVintageHuntingSettleNotify_SecondStageInfo); ok {
		return x.SecondStageInfo
	}
	return nil
}

func (x *SceneGalleryVintageHuntingSettleNotify) GetThirdStageInfo() *VintageHuntingThirdStageSettleInfo {
	if x, ok := x.GetInfo().(*SceneGalleryVintageHuntingSettleNotify_ThirdStageInfo); ok {
		return x.ThirdStageInfo
	}
	return nil
}

type isSceneGalleryVintageHuntingSettleNotify_Info interface {
	isSceneGalleryVintageHuntingSettleNotify_Info()
}

type SceneGalleryVintageHuntingSettleNotify_FirstStageInfo struct {
	FirstStageInfo *VintageHuntingFirstStageSettleInfo `protobuf:"bytes,4,opt,name=first_stage_info,json=firstStageInfo,proto3,oneof"`
}

type SceneGalleryVintageHuntingSettleNotify_SecondStageInfo struct {
	SecondStageInfo *VintageHuntingSecondStageSettleInfo `protobuf:"bytes,10,opt,name=second_stage_info,json=secondStageInfo,proto3,oneof"`
}

type SceneGalleryVintageHuntingSettleNotify_ThirdStageInfo struct {
	ThirdStageInfo *VintageHuntingThirdStageSettleInfo `protobuf:"bytes,8,opt,name=third_stage_info,json=thirdStageInfo,proto3,oneof"`
}

func (*SceneGalleryVintageHuntingSettleNotify_FirstStageInfo) isSceneGalleryVintageHuntingSettleNotify_Info() {
}

func (*SceneGalleryVintageHuntingSettleNotify_SecondStageInfo) isSceneGalleryVintageHuntingSettleNotify_Info() {
}

func (*SceneGalleryVintageHuntingSettleNotify_ThirdStageInfo) isSceneGalleryVintageHuntingSettleNotify_Info() {
}

type VintagePresentFinishNoify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresentId uint32 `protobuf:"varint,7,opt,name=present_id,json=presentId,proto3" json:"present_id,omitempty"`
}

func (x *VintagePresentFinishNoify) Reset() {
	*x = VintagePresentFinishNoify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[724]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintagePresentFinishNoify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintagePresentFinishNoify) ProtoMessage() {}

func (x *VintagePresentFinishNoify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[724]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintagePresentFinishNoify.ProtoReflect.Descriptor instead.
func (*VintagePresentFinishNoify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{724}
}

func (x *VintagePresentFinishNoify) GetPresentId() uint32 {
	if x != nil {
		return x.PresentId
	}
	return 0
}

type VintageDecorateBoothReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId        uint32                `protobuf:"varint,6,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	CombinationInfo *CustomGadgetTreeInfo `protobuf:"bytes,11,opt,name=combination_info,json=combinationInfo,proto3" json:"combination_info,omitempty"`
}

func (x *VintageDecorateBoothReq) Reset() {
	*x = VintageDecorateBoothReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[725]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageDecorateBoothReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageDecorateBoothReq) ProtoMessage() {}

func (x *VintageDecorateBoothReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[725]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageDecorateBoothReq.ProtoReflect.Descriptor instead.
func (*VintageDecorateBoothReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{725}
}

func (x *VintageDecorateBoothReq) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *VintageDecorateBoothReq) GetCombinationInfo() *CustomGadgetTreeInfo {
	if x != nil {
		return x.CombinationInfo
	}
	return nil
}

type VintageDecorateBoothRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *VintageDecorateBoothRsp) Reset() {
	*x = VintageDecorateBoothRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[726]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageDecorateBoothRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageDecorateBoothRsp) ProtoMessage() {}

func (x *VintageDecorateBoothRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[726]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageDecorateBoothRsp.ProtoReflect.Descriptor instead.
func (*VintageDecorateBoothRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{726}
}

func (x *VintageDecorateBoothRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type VintageHuntingStartGalleryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,7,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *VintageHuntingStartGalleryReq) Reset() {
	*x = VintageHuntingStartGalleryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[727]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageHuntingStartGalleryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageHuntingStartGalleryReq) ProtoMessage() {}

func (x *VintageHuntingStartGalleryReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[727]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageHuntingStartGalleryReq.ProtoReflect.Descriptor instead.
func (*VintageHuntingStartGalleryReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{727}
}

func (x *VintageHuntingStartGalleryReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type VintageHuntingStartGalleryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *VintageHuntingStartGalleryRsp) Reset() {
	*x = VintageHuntingStartGalleryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[728]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageHuntingStartGalleryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageHuntingStartGalleryRsp) ProtoMessage() {}

func (x *VintageHuntingStartGalleryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[728]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageHuntingStartGalleryRsp.ProtoReflect.Descriptor instead.
func (*VintageHuntingStartGalleryRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{728}
}

func (x *VintageHuntingStartGalleryRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type VintageCampGroupBundleRegisterNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupBundleId uint32 `protobuf:"varint,10,opt,name=group_bundle_id,json=groupBundleId,proto3" json:"group_bundle_id,omitempty"`
}

func (x *VintageCampGroupBundleRegisterNotify) Reset() {
	*x = VintageCampGroupBundleRegisterNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[729]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageCampGroupBundleRegisterNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageCampGroupBundleRegisterNotify) ProtoMessage() {}

func (x *VintageCampGroupBundleRegisterNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[729]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageCampGroupBundleRegisterNotify.ProtoReflect.Descriptor instead.
func (*VintageCampGroupBundleRegisterNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{729}
}

func (x *VintageCampGroupBundleRegisterNotify) GetGroupBundleId() uint32 {
	if x != nil {
		return x.GroupBundleId
	}
	return 0
}

type VintageCampStageFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId uint32 `protobuf:"varint,11,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *VintageCampStageFinishNotify) Reset() {
	*x = VintageCampStageFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[730]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageCampStageFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageCampStageFinishNotify) ProtoMessage() {}

func (x *VintageCampStageFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[730]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageCampStageFinishNotify.ProtoReflect.Descriptor instead.
func (*VintageCampStageFinishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{730}
}

func (x *VintageCampStageFinishNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type VintageMarketStartStorePlayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreRound uint32 `protobuf:"varint,5,opt,name=store_round,json=storeRound,proto3" json:"store_round,omitempty"`
}

func (x *VintageMarketStartStorePlayReq) Reset() {
	*x = VintageMarketStartStorePlayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[731]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketStartStorePlayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketStartStorePlayReq) ProtoMessage() {}

func (x *VintageMarketStartStorePlayReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[731]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketStartStorePlayReq.ProtoReflect.Descriptor instead.
func (*VintageMarketStartStorePlayReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{731}
}

func (x *VintageMarketStartStorePlayReq) GetStoreRound() uint32 {
	if x != nil {
		return x.StoreRound
	}
	return 0
}

type VintageMarketStartStorePlayRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevRoundCoinB uint32 `protobuf:"varint,7,opt,name=prev_round_coin_b,json=prevRoundCoinB,proto3" json:"prev_round_coin_b,omitempty"`
	StoreRound     uint32 `protobuf:"varint,2,opt,name=store_round,json=storeRound,proto3" json:"store_round,omitempty"`
	PrevRoundCoinC uint32 `protobuf:"varint,5,opt,name=prev_round_coin_c,json=prevRoundCoinC,proto3" json:"prev_round_coin_c,omitempty"`
	Retcode        int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *VintageMarketStartStorePlayRsp) Reset() {
	*x = VintageMarketStartStorePlayRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[732]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketStartStorePlayRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketStartStorePlayRsp) ProtoMessage() {}

func (x *VintageMarketStartStorePlayRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[732]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketStartStorePlayRsp.ProtoReflect.Descriptor instead.
func (*VintageMarketStartStorePlayRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{732}
}

func (x *VintageMarketStartStorePlayRsp) GetPrevRoundCoinB() uint32 {
	if x != nil {
		return x.PrevRoundCoinB
	}
	return 0
}

func (x *VintageMarketStartStorePlayRsp) GetStoreRound() uint32 {
	if x != nil {
		return x.StoreRound
	}
	return 0
}

func (x *VintageMarketStartStorePlayRsp) GetPrevRoundCoinC() uint32 {
	if x != nil {
		return x.PrevRoundCoinC
	}
	return 0
}

func (x *VintageMarketStartStorePlayRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type VintageMarketFinishStorePlayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreRound  uint32                      `protobuf:"varint,9,opt,name=store_round,json=storeRound,proto3" json:"store_round,omitempty"`
	StoreOpList []*VintageMarketStoreOpInfo `protobuf:"bytes,3,rep,name=store_op_list,json=storeOpList,proto3" json:"store_op_list,omitempty"`
}

func (x *VintageMarketFinishStorePlayReq) Reset() {
	*x = VintageMarketFinishStorePlayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[733]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketFinishStorePlayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketFinishStorePlayReq) ProtoMessage() {}

func (x *VintageMarketFinishStorePlayReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[733]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketFinishStorePlayReq.ProtoReflect.Descriptor instead.
func (*VintageMarketFinishStorePlayReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{733}
}

func (x *VintageMarketFinishStorePlayReq) GetStoreRound() uint32 {
	if x != nil {
		return x.StoreRound
	}
	return 0
}

func (x *VintageMarketFinishStorePlayReq) GetStoreOpList() []*VintageMarketStoreOpInfo {
	if x != nil {
		return x.StoreOpList
	}
	return nil
}

type VintageMarketFinishStorePlayRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerEnvEventList []uint32          `protobuf:"varint,8,rep,packed,name=trigger_env_event_list,json=triggerEnvEventList,proto3" json:"trigger_env_event_list,omitempty"`
	StoreRound          uint32            `protobuf:"varint,12,opt,name=store_round,json=storeRound,proto3" json:"store_round,omitempty"`
	TriggerNpcEventList []uint32          `protobuf:"varint,10,rep,packed,name=trigger_npc_event_list,json=triggerNpcEventList,proto3" json:"trigger_npc_event_list,omitempty"`
	LowAttrStoreList    []uint32          `protobuf:"varint,11,rep,packed,name=low_attr_store_list,json=lowAttrStoreList,proto3" json:"low_attr_store_list,omitempty"`
	RoundCoinBIncome    uint32            `protobuf:"varint,9,opt,name=round_coin_b_income,json=roundCoinBIncome,proto3" json:"round_coin_b_income,omitempty"`
	RoundDeltaCoinC     uint32            `protobuf:"varint,1,opt,name=round_delta_coin_c,json=roundDeltaCoinC,proto3" json:"round_delta_coin_c,omitempty"`
	StoreIncomeMap      map[uint32]uint32 `protobuf:"bytes,3,rep,name=store_income_map,json=storeIncomeMap,proto3" json:"store_income_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Retcode             int32             `protobuf:"varint,7,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RoundTotalIncome    uint32            `protobuf:"varint,14,opt,name=round_total_income,json=roundTotalIncome,proto3" json:"round_total_income,omitempty"`
	DisplayReturnCoinB  uint32            `protobuf:"varint,15,opt,name=display_return_coin_b,json=displayReturnCoinB,proto3" json:"display_return_coin_b,omitempty"`
}

func (x *VintageMarketFinishStorePlayRsp) Reset() {
	*x = VintageMarketFinishStorePlayRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[734]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketFinishStorePlayRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketFinishStorePlayRsp) ProtoMessage() {}

func (x *VintageMarketFinishStorePlayRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[734]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketFinishStorePlayRsp.ProtoReflect.Descriptor instead.
func (*VintageMarketFinishStorePlayRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{734}
}

func (x *VintageMarketFinishStorePlayRsp) GetTriggerEnvEventList() []uint32 {
	if x != nil {
		return x.TriggerEnvEventList
	}
	return nil
}

func (x *VintageMarketFinishStorePlayRsp) GetStoreRound() uint32 {
	if x != nil {
		return x.StoreRound
	}
	return 0
}

func (x *VintageMarketFinishStorePlayRsp) GetTriggerNpcEventList() []uint32 {
	if x != nil {
		return x.TriggerNpcEventList
	}
	return nil
}

func (x *VintageMarketFinishStorePlayRsp) GetLowAttrStoreList() []uint32 {
	if x != nil {
		return x.LowAttrStoreList
	}
	return nil
}

func (x *VintageMarketFinishStorePlayRsp) GetRoundCoinBIncome() uint32 {
	if x != nil {
		return x.RoundCoinBIncome
	}
	return 0
}

func (x *VintageMarketFinishStorePlayRsp) GetRoundDeltaCoinC() uint32 {
	if x != nil {
		return x.RoundDeltaCoinC
	}
	return 0
}

func (x *VintageMarketFinishStorePlayRsp) GetStoreIncomeMap() map[uint32]uint32 {
	if x != nil {
		return x.StoreIncomeMap
	}
	return nil
}

func (x *VintageMarketFinishStorePlayRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *VintageMarketFinishStorePlayRsp) GetRoundTotalIncome() uint32 {
	if x != nil {
		return x.RoundTotalIncome
	}
	return 0
}

func (x *VintageMarketFinishStorePlayRsp) GetDisplayReturnCoinB() uint32 {
	if x != nil {
		return x.DisplayReturnCoinB
	}
	return 0
}

type VintagePresentFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresentId uint32 `protobuf:"varint,3,opt,name=present_id,json=presentId,proto3" json:"present_id,omitempty"`
}

func (x *VintagePresentFinishNotify) Reset() {
	*x = VintagePresentFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[735]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintagePresentFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintagePresentFinishNotify) ProtoMessage() {}

func (x *VintagePresentFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[735]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintagePresentFinishNotify.ProtoReflect.Descriptor instead.
func (*VintagePresentFinishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{735}
}

func (x *VintagePresentFinishNotify) GetPresentId() uint32 {
	if x != nil {
		return x.PresentId
	}
	return 0
}

type VintageMarketStoreUnlockSlotReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId uint32 `protobuf:"varint,10,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
}

func (x *VintageMarketStoreUnlockSlotReq) Reset() {
	*x = VintageMarketStoreUnlockSlotReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[736]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketStoreUnlockSlotReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketStoreUnlockSlotReq) ProtoMessage() {}

func (x *VintageMarketStoreUnlockSlotReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[736]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketStoreUnlockSlotReq.ProtoReflect.Descriptor instead.
func (*VintageMarketStoreUnlockSlotReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{736}
}

func (x *VintageMarketStoreUnlockSlotReq) GetStoreId() uint32 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

type VintageMarketStoreUnlockSlotRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	SlotCount uint32 `protobuf:"varint,6,opt,name=slot_count,json=slotCount,proto3" json:"slot_count,omitempty"`
	StoreId   uint32 `protobuf:"varint,10,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
}

func (x *VintageMarketStoreUnlockSlotRsp) Reset() {
	*x = VintageMarketStoreUnlockSlotRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[737]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketStoreUnlockSlotRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketStoreUnlockSlotRsp) ProtoMessage() {}

func (x *VintageMarketStoreUnlockSlotRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[737]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketStoreUnlockSlotRsp.ProtoReflect.Descriptor instead.
func (*VintageMarketStoreUnlockSlotRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{737}
}

func (x *VintageMarketStoreUnlockSlotRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *VintageMarketStoreUnlockSlotRsp) GetSlotCount() uint32 {
	if x != nil {
		return x.SlotCount
	}
	return 0
}

func (x *VintageMarketStoreUnlockSlotRsp) GetStoreId() uint32 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

type VintageMarketStoreChooseStrategyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId      uint32                      `protobuf:"varint,6,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	StoreOpList  []*VintageMarketStoreOpInfo `protobuf:"bytes,9,rep,name=store_op_list,json=storeOpList,proto3" json:"store_op_list,omitempty"`
	StrategyList []uint32                    `protobuf:"varint,8,rep,packed,name=strategy_list,json=strategyList,proto3" json:"strategy_list,omitempty"`
}

func (x *VintageMarketStoreChooseStrategyReq) Reset() {
	*x = VintageMarketStoreChooseStrategyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[738]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketStoreChooseStrategyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketStoreChooseStrategyReq) ProtoMessage() {}

func (x *VintageMarketStoreChooseStrategyReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[738]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketStoreChooseStrategyReq.ProtoReflect.Descriptor instead.
func (*VintageMarketStoreChooseStrategyReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{738}
}

func (x *VintageMarketStoreChooseStrategyReq) GetStoreId() uint32 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *VintageMarketStoreChooseStrategyReq) GetStoreOpList() []*VintageMarketStoreOpInfo {
	if x != nil {
		return x.StoreOpList
	}
	return nil
}

func (x *VintageMarketStoreChooseStrategyReq) GetStrategyList() []uint32 {
	if x != nil {
		return x.StrategyList
	}
	return nil
}

type VintageMarketStoreChooseStrategyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId      uint32   `protobuf:"varint,15,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Retcode      int32    `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
	StrategyList []uint32 `protobuf:"varint,2,rep,packed,name=strategy_list,json=strategyList,proto3" json:"strategy_list,omitempty"`
}

func (x *VintageMarketStoreChooseStrategyRsp) Reset() {
	*x = VintageMarketStoreChooseStrategyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[739]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketStoreChooseStrategyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketStoreChooseStrategyRsp) ProtoMessage() {}

func (x *VintageMarketStoreChooseStrategyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[739]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketStoreChooseStrategyRsp.ProtoReflect.Descriptor instead.
func (*VintageMarketStoreChooseStrategyRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{739}
}

func (x *VintageMarketStoreChooseStrategyRsp) GetStoreId() uint32 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *VintageMarketStoreChooseStrategyRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *VintageMarketStoreChooseStrategyRsp) GetStrategyList() []uint32 {
	if x != nil {
		return x.StrategyList
	}
	return nil
}

type VintageMarketStoreViewStrategyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyId   uint32   `protobuf:"varint,1,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
	StrategyList []uint32 `protobuf:"varint,14,rep,packed,name=strategy_list,json=strategyList,proto3" json:"strategy_list,omitempty"`
}

func (x *VintageMarketStoreViewStrategyReq) Reset() {
	*x = VintageMarketStoreViewStrategyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[740]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketStoreViewStrategyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketStoreViewStrategyReq) ProtoMessage() {}

func (x *VintageMarketStoreViewStrategyReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[740]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketStoreViewStrategyReq.ProtoReflect.Descriptor instead.
func (*VintageMarketStoreViewStrategyReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{740}
}

func (x *VintageMarketStoreViewStrategyReq) GetStrategyId() uint32 {
	if x != nil {
		return x.StrategyId
	}
	return 0
}

func (x *VintageMarketStoreViewStrategyReq) GetStrategyList() []uint32 {
	if x != nil {
		return x.StrategyList
	}
	return nil
}

type VintageMarketStoreViewStrategyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode      int32    `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	StrategyList []uint32 `protobuf:"varint,3,rep,packed,name=strategy_list,json=strategyList,proto3" json:"strategy_list,omitempty"`
	StrategyId   uint32   `protobuf:"varint,14,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
}

func (x *VintageMarketStoreViewStrategyRsp) Reset() {
	*x = VintageMarketStoreViewStrategyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[741]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketStoreViewStrategyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketStoreViewStrategyRsp) ProtoMessage() {}

func (x *VintageMarketStoreViewStrategyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[741]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketStoreViewStrategyRsp.ProtoReflect.Descriptor instead.
func (*VintageMarketStoreViewStrategyRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{741}
}

func (x *VintageMarketStoreViewStrategyRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *VintageMarketStoreViewStrategyRsp) GetStrategyList() []uint32 {
	if x != nil {
		return x.StrategyList
	}
	return nil
}

func (x *VintageMarketStoreViewStrategyRsp) GetStrategyId() uint32 {
	if x != nil {
		return x.StrategyId
	}
	return 0
}

type VintageMarketDividendFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinA uint32 `protobuf:"varint,5,opt,name=coin_a,json=coinA,proto3" json:"coin_a,omitempty"`
	CoinC uint32 `protobuf:"varint,11,opt,name=coin_c,json=coinC,proto3" json:"coin_c,omitempty"`
}

func (x *VintageMarketDividendFinishNotify) Reset() {
	*x = VintageMarketDividendFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[742]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketDividendFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketDividendFinishNotify) ProtoMessage() {}

func (x *VintageMarketDividendFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[742]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketDividendFinishNotify.ProtoReflect.Descriptor instead.
func (*VintageMarketDividendFinishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{742}
}

func (x *VintageMarketDividendFinishNotify) GetCoinA() uint32 {
	if x != nil {
		return x.CoinA
	}
	return 0
}

func (x *VintageMarketDividendFinishNotify) GetCoinC() uint32 {
	if x != nil {
		return x.CoinC
	}
	return 0
}

type VintageMarketNpcEventFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockStrategyList []uint32 `protobuf:"varint,15,rep,packed,name=unlock_strategy_list,json=unlockStrategyList,proto3" json:"unlock_strategy_list,omitempty"`
	CoinC              uint32   `protobuf:"varint,12,opt,name=coin_c,json=coinC,proto3" json:"coin_c,omitempty"`
	CoinA              uint32   `protobuf:"varint,4,opt,name=coin_a,json=coinA,proto3" json:"coin_a,omitempty"`
}

func (x *VintageMarketNpcEventFinishNotify) Reset() {
	*x = VintageMarketNpcEventFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[743]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VintageMarketNpcEventFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VintageMarketNpcEventFinishNotify) ProtoMessage() {}

func (x *VintageMarketNpcEventFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[743]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VintageMarketNpcEventFinishNotify.ProtoReflect.Descriptor instead.
func (*VintageMarketNpcEventFinishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{743}
}

func (x *VintageMarketNpcEventFinishNotify) GetUnlockStrategyList() []uint32 {
	if x != nil {
		return x.UnlockStrategyList
	}
	return nil
}

func (x *VintageMarketNpcEventFinishNotify) GetCoinC() uint32 {
	if x != nil {
		return x.CoinC
	}
	return 0
}

func (x *VintageMarketNpcEventFinishNotify) GetCoinA() uint32 {
	if x != nil {
		return x.CoinA
	}
	return 0
}

type WindFieldDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageInfoList []*WindFieldStageInfo `protobuf:"bytes,11,rep,name=stage_info_list,json=stageInfoList,proto3" json:"stage_info_list,omitempty"`
}

func (x *WindFieldDetailInfo) Reset() {
	*x = WindFieldDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[744]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindFieldDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindFieldDetailInfo) ProtoMessage() {}

func (x *WindFieldDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[744]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindFieldDetailInfo.ProtoReflect.Descriptor instead.
func (*WindFieldDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{744}
}

func (x *WindFieldDetailInfo) GetStageInfoList() []*WindFieldStageInfo {
	if x != nil {
		return x.StageInfoList
	}
	return nil
}

type WindFieldStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen   bool   `protobuf:"varint,12,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	OpenTime uint32 `protobuf:"varint,14,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	StageId  uint32 `protobuf:"varint,8,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *WindFieldStageInfo) Reset() {
	*x = WindFieldStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[745]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindFieldStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindFieldStageInfo) ProtoMessage() {}

func (x *WindFieldStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[745]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindFieldStageInfo.ProtoReflect.Descriptor instead.
func (*WindFieldStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{745}
}

func (x *WindFieldStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *WindFieldStageInfo) GetOpenTime() uint32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *WindFieldStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type WindFieldRestartDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WindFieldRestartDungeonReq) Reset() {
	*x = WindFieldRestartDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[746]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindFieldRestartDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindFieldRestartDungeonReq) ProtoMessage() {}

func (x *WindFieldRestartDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[746]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindFieldRestartDungeonReq.ProtoReflect.Descriptor instead.
func (*WindFieldRestartDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{746}
}

type WindFieldRestartDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *WindFieldRestartDungeonRsp) Reset() {
	*x = WindFieldRestartDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[747]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindFieldRestartDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindFieldRestartDungeonRsp) ProtoMessage() {}

func (x *WindFieldRestartDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[747]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindFieldRestartDungeonRsp.ProtoReflect.Descriptor instead.
func (*WindFieldRestartDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{747}
}

func (x *WindFieldRestartDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type FungusDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCultivate      bool   `protobuf:"varint,5,opt,name=is_cultivate,json=isCultivate,proto3" json:"is_cultivate,omitempty"`
	CaptureOrder     uint32 `protobuf:"varint,6,opt,name=capture_order,json=captureOrder,proto3" json:"capture_order,omitempty"`
	NameId           uint32 `protobuf:"varint,14,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	MinCultivateStep uint32 `protobuf:"varint,1,opt,name=min_cultivate_step,json=minCultivateStep,proto3" json:"min_cultivate_step,omitempty"`
	FungusId         uint32 `protobuf:"varint,9,opt,name=fungus_id,json=fungusId,proto3" json:"fungus_id,omitempty"`
}

func (x *FungusDetail) Reset() {
	*x = FungusDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[748]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusDetail) ProtoMessage() {}

func (x *FungusDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[748]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusDetail.ProtoReflect.Descriptor instead.
func (*FungusDetail) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{748}
}

func (x *FungusDetail) GetIsCultivate() bool {
	if x != nil {
		return x.IsCultivate
	}
	return false
}

func (x *FungusDetail) GetCaptureOrder() uint32 {
	if x != nil {
		return x.CaptureOrder
	}
	return 0
}

func (x *FungusDetail) GetNameId() uint32 {
	if x != nil {
		return x.NameId
	}
	return 0
}

func (x *FungusDetail) GetMinCultivateStep() uint32 {
	if x != nil {
		return x.MinCultivateStep
	}
	return 0
}

func (x *FungusDetail) GetFungusId() uint32 {
	if x != nil {
		return x.FungusId
	}
	return 0
}

type FungusPlotStageDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen  bool   `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	StageId uint32 `protobuf:"varint,15,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *FungusPlotStageDetail) Reset() {
	*x = FungusPlotStageDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[749]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusPlotStageDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusPlotStageDetail) ProtoMessage() {}

func (x *FungusPlotStageDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[749]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusPlotStageDetail.ProtoReflect.Descriptor instead.
func (*FungusPlotStageDetail) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{749}
}

func (x *FungusPlotStageDetail) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *FungusPlotStageDetail) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type FungusTrainingDungeonDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen    bool   `protobuf:"varint,13,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	DungeonId uint32 `protobuf:"varint,12,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	BestScore uint32 `protobuf:"varint,9,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
}

func (x *FungusTrainingDungeonDetail) Reset() {
	*x = FungusTrainingDungeonDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[750]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusTrainingDungeonDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusTrainingDungeonDetail) ProtoMessage() {}

func (x *FungusTrainingDungeonDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[750]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusTrainingDungeonDetail.ProtoReflect.Descriptor instead.
func (*FungusTrainingDungeonDetail) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{750}
}

func (x *FungusTrainingDungeonDetail) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *FungusTrainingDungeonDetail) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *FungusTrainingDungeonDetail) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

type FungusFighterMonsterDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FungusId        uint32  `protobuf:"varint,2,opt,name=fungus_id,json=fungusId,proto3" json:"fungus_id,omitempty"`
	CurHpPercentage float32 `protobuf:"fixed32,7,opt,name=cur_hp_percentage,json=curHpPercentage,proto3" json:"cur_hp_percentage,omitempty"`
	IsAlive         bool    `protobuf:"varint,9,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`
}

func (x *FungusFighterMonsterDetail) Reset() {
	*x = FungusFighterMonsterDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[751]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterMonsterDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterMonsterDetail) ProtoMessage() {}

func (x *FungusFighterMonsterDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[751]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterMonsterDetail.ProtoReflect.Descriptor instead.
func (*FungusFighterMonsterDetail) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{751}
}

func (x *FungusFighterMonsterDetail) GetFungusId() uint32 {
	if x != nil {
		return x.FungusId
	}
	return 0
}

func (x *FungusFighterMonsterDetail) GetCurHpPercentage() float32 {
	if x != nil {
		return x.CurHpPercentage
	}
	return 0
}

func (x *FungusFighterMonsterDetail) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

type FungusTrainingMonsterPreviewDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterId uint32   `protobuf:"varint,8,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	Level     uint32   `protobuf:"varint,10,opt,name=level,proto3" json:"level,omitempty"`
	AffixList []uint32 `protobuf:"varint,7,rep,packed,name=affix_list,json=affixList,proto3" json:"affix_list,omitempty"`
}

func (x *FungusTrainingMonsterPreviewDetail) Reset() {
	*x = FungusTrainingMonsterPreviewDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[752]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusTrainingMonsterPreviewDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusTrainingMonsterPreviewDetail) ProtoMessage() {}

func (x *FungusTrainingMonsterPreviewDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[752]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusTrainingMonsterPreviewDetail.ProtoReflect.Descriptor instead.
func (*FungusTrainingMonsterPreviewDetail) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{752}
}

func (x *FungusTrainingMonsterPreviewDetail) GetMonsterId() uint32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *FungusTrainingMonsterPreviewDetail) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FungusTrainingMonsterPreviewDetail) GetAffixList() []uint32 {
	if x != nil {
		return x.AffixList
	}
	return nil
}

type FungusTrainingPoolPreviewDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId                   uint32                                `protobuf:"varint,8,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	MonsterPreviewDetailList []*FungusTrainingMonsterPreviewDetail `protobuf:"bytes,6,rep,name=monster_preview_detail_list,json=monsterPreviewDetailList,proto3" json:"monster_preview_detail_list,omitempty"`
}

func (x *FungusTrainingPoolPreviewDetail) Reset() {
	*x = FungusTrainingPoolPreviewDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[753]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusTrainingPoolPreviewDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusTrainingPoolPreviewDetail) ProtoMessage() {}

func (x *FungusTrainingPoolPreviewDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[753]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusTrainingPoolPreviewDetail.ProtoReflect.Descriptor instead.
func (*FungusTrainingPoolPreviewDetail) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{753}
}

func (x *FungusTrainingPoolPreviewDetail) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *FungusTrainingPoolPreviewDetail) GetMonsterPreviewDetailList() []*FungusTrainingMonsterPreviewDetail {
	if x != nil {
		return x.MonsterPreviewDetailList
	}
	return nil
}

type FungusTrainingProgressDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurRound               uint32                             `protobuf:"varint,9,opt,name=cur_round,json=curRound,proto3" json:"cur_round,omitempty"`
	DungeonId              uint32                             `protobuf:"varint,10,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	MonsterPoolPreviewList []*FungusTrainingPoolPreviewDetail `protobuf:"bytes,5,rep,name=monster_pool_preview_list,json=monsterPoolPreviewList,proto3" json:"monster_pool_preview_list,omitempty"`
	MonsterDetailList      []*FungusFighterMonsterDetail      `protobuf:"bytes,6,rep,name=monster_detail_list,json=monsterDetailList,proto3" json:"monster_detail_list,omitempty"`
	TotalUsedTime          uint32                             `protobuf:"varint,7,opt,name=total_used_time,json=totalUsedTime,proto3" json:"total_used_time,omitempty"`
	BackupMonsterList      []uint32                           `protobuf:"varint,4,rep,packed,name=backup_monster_list,json=backupMonsterList,proto3" json:"backup_monster_list,omitempty"`
	ChoosenMonsterList     []uint32                           `protobuf:"varint,8,rep,packed,name=choosen_monster_list,json=choosenMonsterList,proto3" json:"choosen_monster_list,omitempty"`
}

func (x *FungusTrainingProgressDetail) Reset() {
	*x = FungusTrainingProgressDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[754]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusTrainingProgressDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusTrainingProgressDetail) ProtoMessage() {}

func (x *FungusTrainingProgressDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[754]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusTrainingProgressDetail.ProtoReflect.Descriptor instead.
func (*FungusTrainingProgressDetail) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{754}
}

func (x *FungusTrainingProgressDetail) GetCurRound() uint32 {
	if x != nil {
		return x.CurRound
	}
	return 0
}

func (x *FungusTrainingProgressDetail) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *FungusTrainingProgressDetail) GetMonsterPoolPreviewList() []*FungusTrainingPoolPreviewDetail {
	if x != nil {
		return x.MonsterPoolPreviewList
	}
	return nil
}

func (x *FungusTrainingProgressDetail) GetMonsterDetailList() []*FungusFighterMonsterDetail {
	if x != nil {
		return x.MonsterDetailList
	}
	return nil
}

func (x *FungusTrainingProgressDetail) GetTotalUsedTime() uint32 {
	if x != nil {
		return x.TotalUsedTime
	}
	return 0
}

func (x *FungusTrainingProgressDetail) GetBackupMonsterList() []uint32 {
	if x != nil {
		return x.BackupMonsterList
	}
	return nil
}

func (x *FungusTrainingProgressDetail) GetChoosenMonsterList() []uint32 {
	if x != nil {
		return x.ChoosenMonsterList
	}
	return nil
}

type FungusFighterDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlotStageDetailList               []*FungusPlotStageDetail        `protobuf:"bytes,6,rep,name=plot_stage_detail_list,json=plotStageDetailList,proto3" json:"plot_stage_detail_list,omitempty"`
	FungusDetailList                  []*FungusDetail                 `protobuf:"bytes,4,rep,name=fungus_detail_list,json=fungusDetailList,proto3" json:"fungus_detail_list,omitempty"`
	UnlockCampIdList                  []uint32                        `protobuf:"varint,12,rep,packed,name=unlock_camp_id_list,json=unlockCampIdList,proto3" json:"unlock_camp_id_list,omitempty"`
	TrainingDungeonProgressDetailList []*FungusTrainingProgressDetail `protobuf:"bytes,3,rep,name=training_dungeon_progress_detail_list,json=trainingDungeonProgressDetailList,proto3" json:"training_dungeon_progress_detail_list,omitempty"`
	TrainingDungeonDetailList         []*FungusTrainingDungeonDetail  `protobuf:"bytes,15,rep,name=training_dungeon_detail_list,json=trainingDungeonDetailList,proto3" json:"training_dungeon_detail_list,omitempty"`
	FinishCampIdList                  []uint32                        `protobuf:"varint,1,rep,packed,name=finish_camp_id_list,json=finishCampIdList,proto3" json:"finish_camp_id_list,omitempty"`
	UnlockCultivateIdList             []uint32                        `protobuf:"varint,8,rep,packed,name=unlock_cultivate_id_list,json=unlockCultivateIdList,proto3" json:"unlock_cultivate_id_list,omitempty"`
}

func (x *FungusFighterDetailInfo) Reset() {
	*x = FungusFighterDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[755]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterDetailInfo) ProtoMessage() {}

func (x *FungusFighterDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[755]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterDetailInfo.ProtoReflect.Descriptor instead.
func (*FungusFighterDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{755}
}

func (x *FungusFighterDetailInfo) GetPlotStageDetailList() []*FungusPlotStageDetail {
	if x != nil {
		return x.PlotStageDetailList
	}
	return nil
}

func (x *FungusFighterDetailInfo) GetFungusDetailList() []*FungusDetail {
	if x != nil {
		return x.FungusDetailList
	}
	return nil
}

func (x *FungusFighterDetailInfo) GetUnlockCampIdList() []uint32 {
	if x != nil {
		return x.UnlockCampIdList
	}
	return nil
}

func (x *FungusFighterDetailInfo) GetTrainingDungeonProgressDetailList() []*FungusTrainingProgressDetail {
	if x != nil {
		return x.TrainingDungeonProgressDetailList
	}
	return nil
}

func (x *FungusFighterDetailInfo) GetTrainingDungeonDetailList() []*FungusTrainingDungeonDetail {
	if x != nil {
		return x.TrainingDungeonDetailList
	}
	return nil
}

func (x *FungusFighterDetailInfo) GetFinishCampIdList() []uint32 {
	if x != nil {
		return x.FinishCampIdList
	}
	return nil
}

func (x *FungusFighterDetailInfo) GetUnlockCultivateIdList() []uint32 {
	if x != nil {
		return x.UnlockCultivateIdList
	}
	return nil
}

type EnterFungusFighterPlotDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId    uint32   `protobuf:"varint,14,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	FungusIdList []uint32 `protobuf:"varint,8,rep,packed,name=fungus_id_list,json=fungusIdList,proto3" json:"fungus_id_list,omitempty"`
}

func (x *EnterFungusFighterPlotDungeonReq) Reset() {
	*x = EnterFungusFighterPlotDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[756]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterFungusFighterPlotDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterFungusFighterPlotDungeonReq) ProtoMessage() {}

func (x *EnterFungusFighterPlotDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[756]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterFungusFighterPlotDungeonReq.ProtoReflect.Descriptor instead.
func (*EnterFungusFighterPlotDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{756}
}

func (x *EnterFungusFighterPlotDungeonReq) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *EnterFungusFighterPlotDungeonReq) GetFungusIdList() []uint32 {
	if x != nil {
		return x.FungusIdList
	}
	return nil
}

type EnterFungusFighterPlotDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode      int32    `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
	DungeonId    uint32   `protobuf:"varint,15,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	FungusIdList []uint32 `protobuf:"varint,2,rep,packed,name=fungus_id_list,json=fungusIdList,proto3" json:"fungus_id_list,omitempty"`
}

func (x *EnterFungusFighterPlotDungeonRsp) Reset() {
	*x = EnterFungusFighterPlotDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[757]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterFungusFighterPlotDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterFungusFighterPlotDungeonRsp) ProtoMessage() {}

func (x *EnterFungusFighterPlotDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[757]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterFungusFighterPlotDungeonRsp.ProtoReflect.Descriptor instead.
func (*EnterFungusFighterPlotDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{757}
}

func (x *EnterFungusFighterPlotDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *EnterFungusFighterPlotDungeonRsp) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *EnterFungusFighterPlotDungeonRsp) GetFungusIdList() []uint32 {
	if x != nil {
		return x.FungusIdList
	}
	return nil
}

type FungusFighterPlotInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FungusIdList []uint32 `protobuf:"varint,11,rep,packed,name=fungus_id_list,json=fungusIdList,proto3" json:"fungus_id_list,omitempty"`
	DungeonId    uint32   `protobuf:"varint,4,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (x *FungusFighterPlotInfoNotify) Reset() {
	*x = FungusFighterPlotInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[758]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterPlotInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterPlotInfoNotify) ProtoMessage() {}

func (x *FungusFighterPlotInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[758]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterPlotInfoNotify.ProtoReflect.Descriptor instead.
func (*FungusFighterPlotInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{758}
}

func (x *FungusFighterPlotInfoNotify) GetFungusIdList() []uint32 {
	if x != nil {
		return x.FungusIdList
	}
	return nil
}

func (x *FungusFighterPlotInfoNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

type FungusCultivateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CultivateId   uint32 `protobuf:"varint,8,opt,name=cultivate_id,json=cultivateId,proto3" json:"cultivate_id,omitempty"`
	CopyStep      uint32 `protobuf:"varint,7,opt,name=copy_step,json=copyStep,proto3" json:"copy_step,omitempty"`
	ExchangeStep  uint32 `protobuf:"varint,11,opt,name=exchange_step,json=exchangeStep,proto3" json:"exchange_step,omitempty"`
	CultivateStep uint32 `protobuf:"varint,13,opt,name=cultivate_step,json=cultivateStep,proto3" json:"cultivate_step,omitempty"`
	RotateStep    uint32 `protobuf:"varint,15,opt,name=rotate_step,json=rotateStep,proto3" json:"rotate_step,omitempty"`
	UndoStep      uint32 `protobuf:"varint,6,opt,name=undo_step,json=undoStep,proto3" json:"undo_step,omitempty"`
	Time          uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	PlaceStep     uint32 `protobuf:"varint,10,opt,name=place_step,json=placeStep,proto3" json:"place_step,omitempty"`
}

func (x *FungusCultivateReq) Reset() {
	*x = FungusCultivateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[759]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusCultivateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusCultivateReq) ProtoMessage() {}

func (x *FungusCultivateReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[759]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusCultivateReq.ProtoReflect.Descriptor instead.
func (*FungusCultivateReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{759}
}

func (x *FungusCultivateReq) GetCultivateId() uint32 {
	if x != nil {
		return x.CultivateId
	}
	return 0
}

func (x *FungusCultivateReq) GetCopyStep() uint32 {
	if x != nil {
		return x.CopyStep
	}
	return 0
}

func (x *FungusCultivateReq) GetExchangeStep() uint32 {
	if x != nil {
		return x.ExchangeStep
	}
	return 0
}

func (x *FungusCultivateReq) GetCultivateStep() uint32 {
	if x != nil {
		return x.CultivateStep
	}
	return 0
}

func (x *FungusCultivateReq) GetRotateStep() uint32 {
	if x != nil {
		return x.RotateStep
	}
	return 0
}

func (x *FungusCultivateReq) GetUndoStep() uint32 {
	if x != nil {
		return x.UndoStep
	}
	return 0
}

func (x *FungusCultivateReq) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FungusCultivateReq) GetPlaceStep() uint32 {
	if x != nil {
		return x.PlaceStep
	}
	return 0
}

type FungusCultivateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CultivateId uint32 `protobuf:"varint,4,opt,name=cultivate_id,json=cultivateId,proto3" json:"cultivate_id,omitempty"`
	IsNewRecord bool   `protobuf:"varint,13,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	Retcode     int32  `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *FungusCultivateRsp) Reset() {
	*x = FungusCultivateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[760]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusCultivateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusCultivateRsp) ProtoMessage() {}

func (x *FungusCultivateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[760]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusCultivateRsp.ProtoReflect.Descriptor instead.
func (*FungusCultivateRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{760}
}

func (x *FungusCultivateRsp) GetCultivateId() uint32 {
	if x != nil {
		return x.CultivateId
	}
	return 0
}

func (x *FungusCultivateRsp) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *FungusCultivateRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type FungusRenameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameId   uint32 `protobuf:"varint,1,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	FungusId uint32 `protobuf:"varint,11,opt,name=fungus_id,json=fungusId,proto3" json:"fungus_id,omitempty"`
}

func (x *FungusRenameReq) Reset() {
	*x = FungusRenameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[761]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusRenameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusRenameReq) ProtoMessage() {}

func (x *FungusRenameReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[761]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusRenameReq.ProtoReflect.Descriptor instead.
func (*FungusRenameReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{761}
}

func (x *FungusRenameReq) GetNameId() uint32 {
	if x != nil {
		return x.NameId
	}
	return 0
}

func (x *FungusRenameReq) GetFungusId() uint32 {
	if x != nil {
		return x.FungusId
	}
	return 0
}

type FungusRenameRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode  int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
	FungusId uint32 `protobuf:"varint,15,opt,name=fungus_id,json=fungusId,proto3" json:"fungus_id,omitempty"`
	NameId   uint32 `protobuf:"varint,12,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
}

func (x *FungusRenameRsp) Reset() {
	*x = FungusRenameRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[762]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusRenameRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusRenameRsp) ProtoMessage() {}

func (x *FungusRenameRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[762]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusRenameRsp.ProtoReflect.Descriptor instead.
func (*FungusRenameRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{762}
}

func (x *FungusRenameRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *FungusRenameRsp) GetFungusId() uint32 {
	if x != nil {
		return x.FungusId
	}
	return 0
}

func (x *FungusRenameRsp) GetNameId() uint32 {
	if x != nil {
		return x.NameId
	}
	return 0
}

type EnterFungusFighterTrainingDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId uint32 `protobuf:"varint,3,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (x *EnterFungusFighterTrainingDungeonReq) Reset() {
	*x = EnterFungusFighterTrainingDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[763]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterFungusFighterTrainingDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterFungusFighterTrainingDungeonReq) ProtoMessage() {}

func (x *EnterFungusFighterTrainingDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[763]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterFungusFighterTrainingDungeonReq.ProtoReflect.Descriptor instead.
func (*EnterFungusFighterTrainingDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{763}
}

func (x *EnterFungusFighterTrainingDungeonReq) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

type EnterFungusFighterTrainingDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,7,opt,name=retcode,proto3" json:"retcode,omitempty"`
	DungeonId uint32 `protobuf:"varint,11,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (x *EnterFungusFighterTrainingDungeonRsp) Reset() {
	*x = EnterFungusFighterTrainingDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[764]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterFungusFighterTrainingDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterFungusFighterTrainingDungeonRsp) ProtoMessage() {}

func (x *EnterFungusFighterTrainingDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[764]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterFungusFighterTrainingDungeonRsp.ProtoReflect.Descriptor instead.
func (*EnterFungusFighterTrainingDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{764}
}

func (x *EnterFungusFighterTrainingDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *EnterFungusFighterTrainingDungeonRsp) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

type FungusFighterRuntimeDataNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressDetail *FungusTrainingProgressDetail `protobuf:"bytes,7,opt,name=progress_detail,json=progressDetail,proto3" json:"progress_detail,omitempty"`
}

func (x *FungusFighterRuntimeDataNotify) Reset() {
	*x = FungusFighterRuntimeDataNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[765]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterRuntimeDataNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterRuntimeDataNotify) ProtoMessage() {}

func (x *FungusFighterRuntimeDataNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[765]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterRuntimeDataNotify.ProtoReflect.Descriptor instead.
func (*FungusFighterRuntimeDataNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{765}
}

func (x *FungusFighterRuntimeDataNotify) GetProgressDetail() *FungusTrainingProgressDetail {
	if x != nil {
		return x.ProgressDetail
	}
	return nil
}

type FungusFighterTrainingSelectFungusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupFungusIdList []uint32 `protobuf:"varint,11,rep,packed,name=backup_fungus_id_list,json=backupFungusIdList,proto3" json:"backup_fungus_id_list,omitempty"`
	FightFungusIdList  []uint32 `protobuf:"varint,7,rep,packed,name=fight_fungus_id_list,json=fightFungusIdList,proto3" json:"fight_fungus_id_list,omitempty"`
}

func (x *FungusFighterTrainingSelectFungusReq) Reset() {
	*x = FungusFighterTrainingSelectFungusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[766]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterTrainingSelectFungusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterTrainingSelectFungusReq) ProtoMessage() {}

func (x *FungusFighterTrainingSelectFungusReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[766]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterTrainingSelectFungusReq.ProtoReflect.Descriptor instead.
func (*FungusFighterTrainingSelectFungusReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{766}
}

func (x *FungusFighterTrainingSelectFungusReq) GetBackupFungusIdList() []uint32 {
	if x != nil {
		return x.BackupFungusIdList
	}
	return nil
}

func (x *FungusFighterTrainingSelectFungusReq) GetFightFungusIdList() []uint32 {
	if x != nil {
		return x.FightFungusIdList
	}
	return nil
}

type FungusFighterTrainingSelectFungusRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,7,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *FungusFighterTrainingSelectFungusRsp) Reset() {
	*x = FungusFighterTrainingSelectFungusRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[767]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterTrainingSelectFungusRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterTrainingSelectFungusRsp) ProtoMessage() {}

func (x *FungusFighterTrainingSelectFungusRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[767]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterTrainingSelectFungusRsp.ProtoReflect.Descriptor instead.
func (*FungusFighterTrainingSelectFungusRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{767}
}

func (x *FungusFighterTrainingSelectFungusRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type FungusFighterTrainingGallerySettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNewRecord          bool              `protobuf:"varint,14,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	TotalUsedTime        uint32            `protobuf:"varint,4,opt,name=total_used_time,json=totalUsedTime,proto3" json:"total_used_time,omitempty"`
	Reason               GalleryStopReason `protobuf:"varint,5,opt,name=reason,proto3,enum=proto.GalleryStopReason" json:"reason,omitempty"`
	DeadFungusNum        uint32            `protobuf:"varint,1,opt,name=dead_fungus_num,json=deadFungusNum,proto3" json:"dead_fungus_num,omitempty"`
	SettleRound          uint32            `protobuf:"varint,15,opt,name=settle_round,json=settleRound,proto3" json:"settle_round,omitempty"`
	IsFinalSettle        bool              `protobuf:"varint,10,opt,name=is_final_settle,json=isFinalSettle,proto3" json:"is_final_settle,omitempty"`
	GadgetLifePercentage uint32            `protobuf:"varint,11,opt,name=gadget_life_percentage,json=gadgetLifePercentage,proto3" json:"gadget_life_percentage,omitempty"`
	FinalScore           uint32            `protobuf:"varint,9,opt,name=final_score,json=finalScore,proto3" json:"final_score,omitempty"`
}

func (x *FungusFighterTrainingGallerySettleNotify) Reset() {
	*x = FungusFighterTrainingGallerySettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[768]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterTrainingGallerySettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterTrainingGallerySettleNotify) ProtoMessage() {}

func (x *FungusFighterTrainingGallerySettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[768]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterTrainingGallerySettleNotify.ProtoReflect.Descriptor instead.
func (*FungusFighterTrainingGallerySettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{768}
}

func (x *FungusFighterTrainingGallerySettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *FungusFighterTrainingGallerySettleNotify) GetTotalUsedTime() uint32 {
	if x != nil {
		return x.TotalUsedTime
	}
	return 0
}

func (x *FungusFighterTrainingGallerySettleNotify) GetReason() GalleryStopReason {
	if x != nil {
		return x.Reason
	}
	return GalleryStopReason_GALLERY_STOP_NONE
}

func (x *FungusFighterTrainingGallerySettleNotify) GetDeadFungusNum() uint32 {
	if x != nil {
		return x.DeadFungusNum
	}
	return 0
}

func (x *FungusFighterTrainingGallerySettleNotify) GetSettleRound() uint32 {
	if x != nil {
		return x.SettleRound
	}
	return 0
}

func (x *FungusFighterTrainingGallerySettleNotify) GetIsFinalSettle() bool {
	if x != nil {
		return x.IsFinalSettle
	}
	return false
}

func (x *FungusFighterTrainingGallerySettleNotify) GetGadgetLifePercentage() uint32 {
	if x != nil {
		return x.GadgetLifePercentage
	}
	return 0
}

func (x *FungusFighterTrainingGallerySettleNotify) GetFinalScore() uint32 {
	if x != nil {
		return x.FinalScore
	}
	return 0
}

type FungusFighterClearTrainingRuntimeDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId uint32 `protobuf:"varint,6,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (x *FungusFighterClearTrainingRuntimeDataReq) Reset() {
	*x = FungusFighterClearTrainingRuntimeDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[769]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterClearTrainingRuntimeDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterClearTrainingRuntimeDataReq) ProtoMessage() {}

func (x *FungusFighterClearTrainingRuntimeDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[769]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterClearTrainingRuntimeDataReq.ProtoReflect.Descriptor instead.
func (*FungusFighterClearTrainingRuntimeDataReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{769}
}

func (x *FungusFighterClearTrainingRuntimeDataReq) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

type FungusFighterClearTrainingRuntimeDataRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *FungusFighterClearTrainingRuntimeDataRsp) Reset() {
	*x = FungusFighterClearTrainingRuntimeDataRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[770]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterClearTrainingRuntimeDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterClearTrainingRuntimeDataRsp) ProtoMessage() {}

func (x *FungusFighterClearTrainingRuntimeDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[770]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterClearTrainingRuntimeDataRsp.ProtoReflect.Descriptor instead.
func (*FungusFighterClearTrainingRuntimeDataRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{770}
}

func (x *FungusFighterClearTrainingRuntimeDataRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type FungusFighterUseBackupFungusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupFungusIdList []uint32 `protobuf:"varint,1,rep,packed,name=backup_fungus_id_list,json=backupFungusIdList,proto3" json:"backup_fungus_id_list,omitempty"`
}

func (x *FungusFighterUseBackupFungusReq) Reset() {
	*x = FungusFighterUseBackupFungusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[771]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterUseBackupFungusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterUseBackupFungusReq) ProtoMessage() {}

func (x *FungusFighterUseBackupFungusReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[771]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterUseBackupFungusReq.ProtoReflect.Descriptor instead.
func (*FungusFighterUseBackupFungusReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{771}
}

func (x *FungusFighterUseBackupFungusReq) GetBackupFungusIdList() []uint32 {
	if x != nil {
		return x.BackupFungusIdList
	}
	return nil
}

type FungusFighterUseBackupFungusRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,12,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *FungusFighterUseBackupFungusRsp) Reset() {
	*x = FungusFighterUseBackupFungusRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[772]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterUseBackupFungusRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterUseBackupFungusRsp) ProtoMessage() {}

func (x *FungusFighterUseBackupFungusRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[772]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterUseBackupFungusRsp.ProtoReflect.Descriptor instead.
func (*FungusFighterUseBackupFungusRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{772}
}

func (x *FungusFighterUseBackupFungusRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type FungusFighterRestartTraningDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FungusFighterRestartTraningDungeonReq) Reset() {
	*x = FungusFighterRestartTraningDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[773]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterRestartTraningDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterRestartTraningDungeonReq) ProtoMessage() {}

func (x *FungusFighterRestartTraningDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[773]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterRestartTraningDungeonReq.ProtoReflect.Descriptor instead.
func (*FungusFighterRestartTraningDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{773}
}

type FungusFighterRestartTraningDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *FungusFighterRestartTraningDungeonRsp) Reset() {
	*x = FungusFighterRestartTraningDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[774]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungusFighterRestartTraningDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungusFighterRestartTraningDungeonRsp) ProtoMessage() {}

func (x *FungusFighterRestartTraningDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[774]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungusFighterRestartTraningDungeonRsp.ProtoReflect.Descriptor instead.
func (*FungusFighterRestartTraningDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{774}
}

func (x *FungusFighterRestartTraningDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type CharAmusementStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishTime uint32 `protobuf:"varint,15,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	IsOpen     bool   `protobuf:"varint,12,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	StageId    uint32 `protobuf:"varint,6,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *CharAmusementStageData) Reset() {
	*x = CharAmusementStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[775]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharAmusementStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharAmusementStageData) ProtoMessage() {}

func (x *CharAmusementStageData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[775]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharAmusementStageData.ProtoReflect.Descriptor instead.
func (*CharAmusementStageData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{775}
}

func (x *CharAmusementStageData) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *CharAmusementStageData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *CharAmusementStageData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type CharAmusementDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageDataList []*CharAmusementStageData `protobuf:"bytes,1,rep,name=stage_data_list,json=stageDataList,proto3" json:"stage_data_list,omitempty"`
}

func (x *CharAmusementDetailInfo) Reset() {
	*x = CharAmusementDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[776]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharAmusementDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharAmusementDetailInfo) ProtoMessage() {}

func (x *CharAmusementDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[776]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharAmusementDetailInfo.ProtoReflect.Descriptor instead.
func (*CharAmusementDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{776}
}

func (x *CharAmusementDetailInfo) GetStageDataList() []*CharAmusementStageData {
	if x != nil {
		return x.StageDataList
	}
	return nil
}

type CharAmusementSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSucc      bool   `protobuf:"varint,3,opt,name=is_succ,json=isSucc,proto3" json:"is_succ,omitempty"`
	FinishTime  uint32 `protobuf:"varint,14,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	IsNewRecord bool   `protobuf:"varint,2,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
}

func (x *CharAmusementSettleNotify) Reset() {
	*x = CharAmusementSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[777]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharAmusementSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharAmusementSettleNotify) ProtoMessage() {}

func (x *CharAmusementSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[777]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharAmusementSettleNotify.ProtoReflect.Descriptor instead.
func (*CharAmusementSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{777}
}

func (x *CharAmusementSettleNotify) GetIsSucc() bool {
	if x != nil {
		return x.IsSucc
	}
	return false
}

func (x *CharAmusementSettleNotify) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *CharAmusementSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

type EffigyChallengeV2LevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeModeDifficultyPass    uint32 `protobuf:"varint,1,opt,name=challenge_mode_difficulty_pass,json=challengeModeDifficultyPass,proto3" json:"challenge_mode_difficulty_pass,omitempty"`
	LevelId                        uint32 `protobuf:"varint,5,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	ChallengeModeLastChooseSkillNo uint32 `protobuf:"varint,10,opt,name=challenge_mode_last_choose_skill_no,json=challengeModeLastChooseSkillNo,proto3" json:"challenge_mode_last_choose_skill_no,omitempty"`
	BestCostTime                   uint32 `protobuf:"varint,12,opt,name=best_cost_time,json=bestCostTime,proto3" json:"best_cost_time,omitempty"`
	IsLevelOpen                    bool   `protobuf:"varint,7,opt,name=is_level_open,json=isLevelOpen,proto3" json:"is_level_open,omitempty"`
	ChallengeModeDifficultyOpen    uint32 `protobuf:"varint,13,opt,name=challenge_mode_difficulty_open,json=challengeModeDifficultyOpen,proto3" json:"challenge_mode_difficulty_open,omitempty"`
}

func (x *EffigyChallengeV2LevelData) Reset() {
	*x = EffigyChallengeV2LevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[778]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeV2LevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeV2LevelData) ProtoMessage() {}

func (x *EffigyChallengeV2LevelData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[778]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeV2LevelData.ProtoReflect.Descriptor instead.
func (*EffigyChallengeV2LevelData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{778}
}

func (x *EffigyChallengeV2LevelData) GetChallengeModeDifficultyPass() uint32 {
	if x != nil {
		return x.ChallengeModeDifficultyPass
	}
	return 0
}

func (x *EffigyChallengeV2LevelData) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *EffigyChallengeV2LevelData) GetChallengeModeLastChooseSkillNo() uint32 {
	if x != nil {
		return x.ChallengeModeLastChooseSkillNo
	}
	return 0
}

func (x *EffigyChallengeV2LevelData) GetBestCostTime() uint32 {
	if x != nil {
		return x.BestCostTime
	}
	return 0
}

func (x *EffigyChallengeV2LevelData) GetIsLevelOpen() bool {
	if x != nil {
		return x.IsLevelOpen
	}
	return false
}

func (x *EffigyChallengeV2LevelData) GetChallengeModeDifficultyOpen() uint32 {
	if x != nil {
		return x.ChallengeModeDifficultyOpen
	}
	return 0
}

type EffigyChallengeV2DetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelDataList []*EffigyChallengeV2LevelData `protobuf:"bytes,3,rep,name=level_data_list,json=levelDataList,proto3" json:"level_data_list,omitempty"`
}

func (x *EffigyChallengeV2DetailInfo) Reset() {
	*x = EffigyChallengeV2DetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[779]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeV2DetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeV2DetailInfo) ProtoMessage() {}

func (x *EffigyChallengeV2DetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[779]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeV2DetailInfo.ProtoReflect.Descriptor instead.
func (*EffigyChallengeV2DetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{779}
}

func (x *EffigyChallengeV2DetailInfo) GetLevelDataList() []*EffigyChallengeV2LevelData {
	if x != nil {
		return x.LevelDataList
	}
	return nil
}

type EffigyChallengeV2EnterDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeModeDifficulty uint32 `protobuf:"varint,7,opt,name=challenge_mode_difficulty,json=challengeModeDifficulty,proto3" json:"challenge_mode_difficulty,omitempty"`
	LevelId                 uint32 `protobuf:"varint,12,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	ChallengeModeSkillNo    uint32 `protobuf:"varint,11,opt,name=challenge_mode_skill_no,json=challengeModeSkillNo,proto3" json:"challenge_mode_skill_no,omitempty"`
}

func (x *EffigyChallengeV2EnterDungeonReq) Reset() {
	*x = EffigyChallengeV2EnterDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[780]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeV2EnterDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeV2EnterDungeonReq) ProtoMessage() {}

func (x *EffigyChallengeV2EnterDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[780]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeV2EnterDungeonReq.ProtoReflect.Descriptor instead.
func (*EffigyChallengeV2EnterDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{780}
}

func (x *EffigyChallengeV2EnterDungeonReq) GetChallengeModeDifficulty() uint32 {
	if x != nil {
		return x.ChallengeModeDifficulty
	}
	return 0
}

func (x *EffigyChallengeV2EnterDungeonReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *EffigyChallengeV2EnterDungeonReq) GetChallengeModeSkillNo() uint32 {
	if x != nil {
		return x.ChallengeModeSkillNo
	}
	return 0
}

type EffigyChallengeV2EnterDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeModeSkillNo    uint32 `protobuf:"varint,11,opt,name=challenge_mode_skill_no,json=challengeModeSkillNo,proto3" json:"challenge_mode_skill_no,omitempty"`
	Retcode                 int32  `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ChallengeModeDifficulty uint32 `protobuf:"varint,14,opt,name=challenge_mode_difficulty,json=challengeModeDifficulty,proto3" json:"challenge_mode_difficulty,omitempty"`
	LevelId                 uint32 `protobuf:"varint,13,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *EffigyChallengeV2EnterDungeonRsp) Reset() {
	*x = EffigyChallengeV2EnterDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[781]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeV2EnterDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeV2EnterDungeonRsp) ProtoMessage() {}

func (x *EffigyChallengeV2EnterDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[781]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeV2EnterDungeonRsp.ProtoReflect.Descriptor instead.
func (*EffigyChallengeV2EnterDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{781}
}

func (x *EffigyChallengeV2EnterDungeonRsp) GetChallengeModeSkillNo() uint32 {
	if x != nil {
		return x.ChallengeModeSkillNo
	}
	return 0
}

func (x *EffigyChallengeV2EnterDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *EffigyChallengeV2EnterDungeonRsp) GetChallengeModeDifficulty() uint32 {
	if x != nil {
		return x.ChallengeModeDifficulty
	}
	return 0
}

func (x *EffigyChallengeV2EnterDungeonRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type EffigyChallengeV2RestartDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EffigyChallengeV2RestartDungeonReq) Reset() {
	*x = EffigyChallengeV2RestartDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[782]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeV2RestartDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeV2RestartDungeonReq) ProtoMessage() {}

func (x *EffigyChallengeV2RestartDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[782]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeV2RestartDungeonReq.ProtoReflect.Descriptor instead.
func (*EffigyChallengeV2RestartDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{782}
}

type EffigyChallengeV2RestartDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *EffigyChallengeV2RestartDungeonRsp) Reset() {
	*x = EffigyChallengeV2RestartDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[783]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeV2RestartDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeV2RestartDungeonRsp) ProtoMessage() {}

func (x *EffigyChallengeV2RestartDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[783]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeV2RestartDungeonRsp.ProtoReflect.Descriptor instead.
func (*EffigyChallengeV2RestartDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{783}
}

func (x *EffigyChallengeV2RestartDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type EffigyChallengeV2ChooseSkillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId              uint32 `protobuf:"varint,6,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	ChallengeModeSkillNo uint32 `protobuf:"varint,7,opt,name=challenge_mode_skill_no,json=challengeModeSkillNo,proto3" json:"challenge_mode_skill_no,omitempty"`
}

func (x *EffigyChallengeV2ChooseSkillReq) Reset() {
	*x = EffigyChallengeV2ChooseSkillReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[784]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeV2ChooseSkillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeV2ChooseSkillReq) ProtoMessage() {}

func (x *EffigyChallengeV2ChooseSkillReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[784]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeV2ChooseSkillReq.ProtoReflect.Descriptor instead.
func (*EffigyChallengeV2ChooseSkillReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{784}
}

func (x *EffigyChallengeV2ChooseSkillReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *EffigyChallengeV2ChooseSkillReq) GetChallengeModeSkillNo() uint32 {
	if x != nil {
		return x.ChallengeModeSkillNo
	}
	return 0
}

type EffigyChallengeV2ChooseSkillRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId              uint32 `protobuf:"varint,15,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Retcode              int32  `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ChallengeModeSkillNo uint32 `protobuf:"varint,3,opt,name=challenge_mode_skill_no,json=challengeModeSkillNo,proto3" json:"challenge_mode_skill_no,omitempty"`
}

func (x *EffigyChallengeV2ChooseSkillRsp) Reset() {
	*x = EffigyChallengeV2ChooseSkillRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[785]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeV2ChooseSkillRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeV2ChooseSkillRsp) ProtoMessage() {}

func (x *EffigyChallengeV2ChooseSkillRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[785]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeV2ChooseSkillRsp.ProtoReflect.Descriptor instead.
func (*EffigyChallengeV2ChooseSkillRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{785}
}

func (x *EffigyChallengeV2ChooseSkillRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *EffigyChallengeV2ChooseSkillRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *EffigyChallengeV2ChooseSkillRsp) GetChallengeModeSkillNo() uint32 {
	if x != nil {
		return x.ChallengeModeSkillNo
	}
	return 0
}

type EffigyChallengeV2DungeonInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeModeDifficulty uint32 `protobuf:"varint,2,opt,name=challenge_mode_difficulty,json=challengeModeDifficulty,proto3" json:"challenge_mode_difficulty,omitempty"`
	SkillNo                 uint32 `protobuf:"varint,4,opt,name=skill_no,json=skillNo,proto3" json:"skill_no,omitempty"`
	LevelId                 uint32 `protobuf:"varint,13,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *EffigyChallengeV2DungeonInfoNotify) Reset() {
	*x = EffigyChallengeV2DungeonInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[786]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffigyChallengeV2DungeonInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffigyChallengeV2DungeonInfoNotify) ProtoMessage() {}

func (x *EffigyChallengeV2DungeonInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[786]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffigyChallengeV2DungeonInfoNotify.ProtoReflect.Descriptor instead.
func (*EffigyChallengeV2DungeonInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{786}
}

func (x *EffigyChallengeV2DungeonInfoNotify) GetChallengeModeDifficulty() uint32 {
	if x != nil {
		return x.ChallengeModeDifficulty
	}
	return 0
}

func (x *EffigyChallengeV2DungeonInfoNotify) GetSkillNo() uint32 {
	if x != nil {
		return x.SkillNo
	}
	return 0
}

func (x *EffigyChallengeV2DungeonInfoNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type CoinCollectTeamInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarCostumeIdList []uint32 `protobuf:"varint,12,rep,packed,name=avatar_costume_id_list,json=avatarCostumeIdList,proto3" json:"avatar_costume_id_list,omitempty"`
	PlayerUid           uint32   `protobuf:"varint,2,opt,name=player_uid,json=playerUid,proto3" json:"player_uid,omitempty"`
	IsHost              bool     `protobuf:"varint,14,opt,name=is_host,json=isHost,proto3" json:"is_host,omitempty"`
	ChooseSkillNo       uint32   `protobuf:"varint,4,opt,name=choose_skill_no,json=chooseSkillNo,proto3" json:"choose_skill_no,omitempty"`
	AvatarLvList        []uint32 `protobuf:"varint,10,rep,packed,name=avatar_lv_list,json=avatarLvList,proto3" json:"avatar_lv_list,omitempty"`
	AvatarIdList        []uint32 `protobuf:"varint,9,rep,packed,name=avatar_id_list,json=avatarIdList,proto3" json:"avatar_id_list,omitempty"`
}

func (x *CoinCollectTeamInfoData) Reset() {
	*x = CoinCollectTeamInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[787]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectTeamInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectTeamInfoData) ProtoMessage() {}

func (x *CoinCollectTeamInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[787]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectTeamInfoData.ProtoReflect.Descriptor instead.
func (*CoinCollectTeamInfoData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{787}
}

func (x *CoinCollectTeamInfoData) GetAvatarCostumeIdList() []uint32 {
	if x != nil {
		return x.AvatarCostumeIdList
	}
	return nil
}

func (x *CoinCollectTeamInfoData) GetPlayerUid() uint32 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

func (x *CoinCollectTeamInfoData) GetIsHost() bool {
	if x != nil {
		return x.IsHost
	}
	return false
}

func (x *CoinCollectTeamInfoData) GetChooseSkillNo() uint32 {
	if x != nil {
		return x.ChooseSkillNo
	}
	return 0
}

func (x *CoinCollectTeamInfoData) GetAvatarLvList() []uint32 {
	if x != nil {
		return x.AvatarLvList
	}
	return nil
}

func (x *CoinCollectTeamInfoData) GetAvatarIdList() []uint32 {
	if x != nil {
		return x.AvatarIdList
	}
	return nil
}

type CoinCollectLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId                uint32                     `protobuf:"varint,3,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	DoubleBestTeamInfoList []*CoinCollectTeamInfoData `protobuf:"bytes,12,rep,name=double_best_team_info_list,json=doubleBestTeamInfoList,proto3" json:"double_best_team_info_list,omitempty"`
	LastChooseSkillNo      uint32                     `protobuf:"varint,9,opt,name=last_choose_skill_no,json=lastChooseSkillNo,proto3" json:"last_choose_skill_no,omitempty"`
	SingleBestCollectNum   uint32                     `protobuf:"varint,15,opt,name=single_best_collect_num,json=singleBestCollectNum,proto3" json:"single_best_collect_num,omitempty"`
	IsHaveWatchedCutscene  bool                       `protobuf:"varint,1,opt,name=is_have_watched_cutscene,json=isHaveWatchedCutscene,proto3" json:"is_have_watched_cutscene,omitempty"`
	SingleBestPassTimeMs   uint32                     `protobuf:"varint,2,opt,name=single_best_pass_time_ms,json=singleBestPassTimeMs,proto3" json:"single_best_pass_time_ms,omitempty"`
	IsHavePlaySingleLevel  bool                       `protobuf:"varint,11,opt,name=is_have_play_single_level,json=isHavePlaySingleLevel,proto3" json:"is_have_play_single_level,omitempty"`
	IsLevelOpen            bool                       `protobuf:"varint,8,opt,name=is_level_open,json=isLevelOpen,proto3" json:"is_level_open,omitempty"`
	IsHavePlayDoubleLevel  bool                       `protobuf:"varint,6,opt,name=is_have_play_double_level,json=isHavePlayDoubleLevel,proto3" json:"is_have_play_double_level,omitempty"`
	SingleBestTeamInfo     *CoinCollectTeamInfoData   `protobuf:"bytes,13,opt,name=single_best_team_info,json=singleBestTeamInfo,proto3" json:"single_best_team_info,omitempty"`
	DoubleBestCollectNum   uint32                     `protobuf:"varint,14,opt,name=double_best_collect_num,json=doubleBestCollectNum,proto3" json:"double_best_collect_num,omitempty"`
	DoubleBestPassTimeMs   uint32                     `protobuf:"varint,10,opt,name=double_best_pass_time_ms,json=doubleBestPassTimeMs,proto3" json:"double_best_pass_time_ms,omitempty"`
}

func (x *CoinCollectLevelData) Reset() {
	*x = CoinCollectLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[788]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectLevelData) ProtoMessage() {}

func (x *CoinCollectLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[788]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectLevelData.ProtoReflect.Descriptor instead.
func (*CoinCollectLevelData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{788}
}

func (x *CoinCollectLevelData) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CoinCollectLevelData) GetDoubleBestTeamInfoList() []*CoinCollectTeamInfoData {
	if x != nil {
		return x.DoubleBestTeamInfoList
	}
	return nil
}

func (x *CoinCollectLevelData) GetLastChooseSkillNo() uint32 {
	if x != nil {
		return x.LastChooseSkillNo
	}
	return 0
}

func (x *CoinCollectLevelData) GetSingleBestCollectNum() uint32 {
	if x != nil {
		return x.SingleBestCollectNum
	}
	return 0
}

func (x *CoinCollectLevelData) GetIsHaveWatchedCutscene() bool {
	if x != nil {
		return x.IsHaveWatchedCutscene
	}
	return false
}

func (x *CoinCollectLevelData) GetSingleBestPassTimeMs() uint32 {
	if x != nil {
		return x.SingleBestPassTimeMs
	}
	return 0
}

func (x *CoinCollectLevelData) GetIsHavePlaySingleLevel() bool {
	if x != nil {
		return x.IsHavePlaySingleLevel
	}
	return false
}

func (x *CoinCollectLevelData) GetIsLevelOpen() bool {
	if x != nil {
		return x.IsLevelOpen
	}
	return false
}

func (x *CoinCollectLevelData) GetIsHavePlayDoubleLevel() bool {
	if x != nil {
		return x.IsHavePlayDoubleLevel
	}
	return false
}

func (x *CoinCollectLevelData) GetSingleBestTeamInfo() *CoinCollectTeamInfoData {
	if x != nil {
		return x.SingleBestTeamInfo
	}
	return nil
}

func (x *CoinCollectLevelData) GetDoubleBestCollectNum() uint32 {
	if x != nil {
		return x.DoubleBestCollectNum
	}
	return 0
}

func (x *CoinCollectLevelData) GetDoubleBestPassTimeMs() uint32 {
	if x != nil {
		return x.DoubleBestPassTimeMs
	}
	return 0
}

type CoinCollectDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelDataList []*CoinCollectLevelData `protobuf:"bytes,10,rep,name=level_data_list,json=levelDataList,proto3" json:"level_data_list,omitempty"`
}

func (x *CoinCollectDetailInfo) Reset() {
	*x = CoinCollectDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[789]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectDetailInfo) ProtoMessage() {}

func (x *CoinCollectDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[789]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectDetailInfo.ProtoReflect.Descriptor instead.
func (*CoinCollectDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{789}
}

func (x *CoinCollectDetailInfo) GetLevelDataList() []*CoinCollectLevelData {
	if x != nil {
		return x.LevelDataList
	}
	return nil
}

type CoinCollectChooseSkillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChooseSkillNo uint32 `protobuf:"varint,5,opt,name=choose_skill_no,json=chooseSkillNo,proto3" json:"choose_skill_no,omitempty"`
	LevelId       uint32 `protobuf:"varint,2,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *CoinCollectChooseSkillReq) Reset() {
	*x = CoinCollectChooseSkillReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[790]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectChooseSkillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectChooseSkillReq) ProtoMessage() {}

func (x *CoinCollectChooseSkillReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[790]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectChooseSkillReq.ProtoReflect.Descriptor instead.
func (*CoinCollectChooseSkillReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{790}
}

func (x *CoinCollectChooseSkillReq) GetChooseSkillNo() uint32 {
	if x != nil {
		return x.ChooseSkillNo
	}
	return 0
}

func (x *CoinCollectChooseSkillReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type CoinCollectChooseSkillRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId       uint32 `protobuf:"varint,4,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	ChooseSkillNo uint32 `protobuf:"varint,6,opt,name=choose_skill_no,json=chooseSkillNo,proto3" json:"choose_skill_no,omitempty"`
	Retcode       int32  `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *CoinCollectChooseSkillRsp) Reset() {
	*x = CoinCollectChooseSkillRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[791]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectChooseSkillRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectChooseSkillRsp) ProtoMessage() {}

func (x *CoinCollectChooseSkillRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[791]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectChooseSkillRsp.ProtoReflect.Descriptor instead.
func (*CoinCollectChooseSkillRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{791}
}

func (x *CoinCollectChooseSkillRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CoinCollectChooseSkillRsp) GetChooseSkillNo() uint32 {
	if x != nil {
		return x.ChooseSkillNo
	}
	return 0
}

func (x *CoinCollectChooseSkillRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type RestartCoinCollectPlaySingleModeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,2,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *RestartCoinCollectPlaySingleModeReq) Reset() {
	*x = RestartCoinCollectPlaySingleModeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[792]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartCoinCollectPlaySingleModeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartCoinCollectPlaySingleModeReq) ProtoMessage() {}

func (x *RestartCoinCollectPlaySingleModeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[792]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartCoinCollectPlaySingleModeReq.ProtoReflect.Descriptor instead.
func (*RestartCoinCollectPlaySingleModeReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{792}
}

func (x *RestartCoinCollectPlaySingleModeReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type RestartCoinCollectPlaySingleModeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32  `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
	LevelId uint32 `protobuf:"varint,11,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *RestartCoinCollectPlaySingleModeRsp) Reset() {
	*x = RestartCoinCollectPlaySingleModeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[793]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartCoinCollectPlaySingleModeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartCoinCollectPlaySingleModeRsp) ProtoMessage() {}

func (x *RestartCoinCollectPlaySingleModeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[793]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartCoinCollectPlaySingleModeRsp.ProtoReflect.Descriptor instead.
func (*RestartCoinCollectPlaySingleModeRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{793}
}

func (x *RestartCoinCollectPlaySingleModeRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *RestartCoinCollectPlaySingleModeRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type EndCoinCollectPlaySingleModeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultistagePlayIndex uint32 `protobuf:"varint,15,opt,name=multistage_play_index,json=multistagePlayIndex,proto3" json:"multistage_play_index,omitempty"`
}

func (x *EndCoinCollectPlaySingleModeReq) Reset() {
	*x = EndCoinCollectPlaySingleModeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[794]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndCoinCollectPlaySingleModeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndCoinCollectPlaySingleModeReq) ProtoMessage() {}

func (x *EndCoinCollectPlaySingleModeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[794]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndCoinCollectPlaySingleModeReq.ProtoReflect.Descriptor instead.
func (*EndCoinCollectPlaySingleModeReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{794}
}

func (x *EndCoinCollectPlaySingleModeReq) GetMultistagePlayIndex() uint32 {
	if x != nil {
		return x.MultistagePlayIndex
	}
	return 0
}

type EndCoinCollectPlaySingleModeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *EndCoinCollectPlaySingleModeRsp) Reset() {
	*x = EndCoinCollectPlaySingleModeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[795]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndCoinCollectPlaySingleModeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndCoinCollectPlaySingleModeRsp) ProtoMessage() {}

func (x *EndCoinCollectPlaySingleModeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[795]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndCoinCollectPlaySingleModeRsp.ProtoReflect.Descriptor instead.
func (*EndCoinCollectPlaySingleModeRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{795}
}

func (x *EndCoinCollectPlaySingleModeRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type CoinCollectPrepareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CoinCollectPrepareReq) Reset() {
	*x = CoinCollectPrepareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[796]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectPrepareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectPrepareReq) ProtoMessage() {}

func (x *CoinCollectPrepareReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[796]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectPrepareReq.ProtoReflect.Descriptor instead.
func (*CoinCollectPrepareReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{796}
}

type CoinCollectPrepareRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *CoinCollectPrepareRsp) Reset() {
	*x = CoinCollectPrepareRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[797]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectPrepareRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectPrepareRsp) ProtoMessage() {}

func (x *CoinCollectPrepareRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[797]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectPrepareRsp.ProtoReflect.Descriptor instead.
func (*CoinCollectPrepareRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{797}
}

func (x *CoinCollectPrepareRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type CoinCollectInterruptPlayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,13,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *CoinCollectInterruptPlayReq) Reset() {
	*x = CoinCollectInterruptPlayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[798]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectInterruptPlayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectInterruptPlayReq) ProtoMessage() {}

func (x *CoinCollectInterruptPlayReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[798]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectInterruptPlayReq.ProtoReflect.Descriptor instead.
func (*CoinCollectInterruptPlayReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{798}
}

func (x *CoinCollectInterruptPlayReq) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type CoinCollectInterruptPlayRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GalleryId uint32 `protobuf:"varint,8,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *CoinCollectInterruptPlayRsp) Reset() {
	*x = CoinCollectInterruptPlayRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[799]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectInterruptPlayRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectInterruptPlayRsp) ProtoMessage() {}

func (x *CoinCollectInterruptPlayRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[799]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectInterruptPlayRsp.ProtoReflect.Descriptor instead.
func (*CoinCollectInterruptPlayRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{799}
}

func (x *CoinCollectInterruptPlayRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *CoinCollectInterruptPlayRsp) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type CoinCollectCheckDoubleStartPlayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,11,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *CoinCollectCheckDoubleStartPlayReq) Reset() {
	*x = CoinCollectCheckDoubleStartPlayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[800]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectCheckDoubleStartPlayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectCheckDoubleStartPlayReq) ProtoMessage() {}

func (x *CoinCollectCheckDoubleStartPlayReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[800]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectCheckDoubleStartPlayReq.ProtoReflect.Descriptor instead.
func (*CoinCollectCheckDoubleStartPlayReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{800}
}

func (x *CoinCollectCheckDoubleStartPlayReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type CoinCollectCheckDoubleStartPlayRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,3,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Retcode int32  `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *CoinCollectCheckDoubleStartPlayRsp) Reset() {
	*x = CoinCollectCheckDoubleStartPlayRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[801]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinCollectCheckDoubleStartPlayRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinCollectCheckDoubleStartPlayRsp) ProtoMessage() {}

func (x *CoinCollectCheckDoubleStartPlayRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[801]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinCollectCheckDoubleStartPlayRsp.ProtoReflect.Descriptor instead.
func (*CoinCollectCheckDoubleStartPlayRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{801}
}

func (x *CoinCollectCheckDoubleStartPlayRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *CoinCollectCheckDoubleStartPlayRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type BrickBreakerLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinish         bool     `protobuf:"varint,5,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	LevelId          uint32   `protobuf:"varint,12,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsCanStart       bool     `protobuf:"varint,1,opt,name=is_can_start,json=isCanStart,proto3" json:"is_can_start,omitempty"`
	MaxScore         uint32   `protobuf:"varint,15,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	ChosenSkillList  []uint32 `protobuf:"varint,11,rep,packed,name=chosen_skill_list,json=chosenSkillList,proto3" json:"chosen_skill_list,omitempty"`
	ChosenAvatarList []uint32 `protobuf:"varint,6,rep,packed,name=chosen_avatar_list,json=chosenAvatarList,proto3" json:"chosen_avatar_list,omitempty"`
}

func (x *BrickBreakerLevelInfo) Reset() {
	*x = BrickBreakerLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[802]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerLevelInfo) ProtoMessage() {}

func (x *BrickBreakerLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[802]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerLevelInfo.ProtoReflect.Descriptor instead.
func (*BrickBreakerLevelInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{802}
}

func (x *BrickBreakerLevelInfo) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *BrickBreakerLevelInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *BrickBreakerLevelInfo) GetIsCanStart() bool {
	if x != nil {
		return x.IsCanStart
	}
	return false
}

func (x *BrickBreakerLevelInfo) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *BrickBreakerLevelInfo) GetChosenSkillList() []uint32 {
	if x != nil {
		return x.ChosenSkillList
	}
	return nil
}

func (x *BrickBreakerLevelInfo) GetChosenAvatarList() []uint32 {
	if x != nil {
		return x.ChosenAvatarList
	}
	return nil
}

type BrickBreakerActivityStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDungeonLevelUnlock bool   `protobuf:"varint,14,opt,name=is_dungeon_level_unlock,json=isDungeonLevelUnlock,proto3" json:"is_dungeon_level_unlock,omitempty"`
	IsWorldLevelUnlock   bool   `protobuf:"varint,13,opt,name=is_world_level_unlock,json=isWorldLevelUnlock,proto3" json:"is_world_level_unlock,omitempty"`
	StageId              uint32 `protobuf:"varint,10,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *BrickBreakerActivityStageInfo) Reset() {
	*x = BrickBreakerActivityStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[803]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerActivityStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerActivityStageInfo) ProtoMessage() {}

func (x *BrickBreakerActivityStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[803]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerActivityStageInfo.ProtoReflect.Descriptor instead.
func (*BrickBreakerActivityStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{803}
}

func (x *BrickBreakerActivityStageInfo) GetIsDungeonLevelUnlock() bool {
	if x != nil {
		return x.IsDungeonLevelUnlock
	}
	return false
}

func (x *BrickBreakerActivityStageInfo) GetIsWorldLevelUnlock() bool {
	if x != nil {
		return x.IsWorldLevelUnlock
	}
	return false
}

func (x *BrickBreakerActivityStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type BrickBreakerDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonLevelInfoList []*BrickBreakerLevelInfo         `protobuf:"bytes,15,rep,name=dungeon_level_info_list,json=dungeonLevelInfoList,proto3" json:"dungeon_level_info_list,omitempty"`
	StageInfoList        []*BrickBreakerActivityStageInfo `protobuf:"bytes,14,rep,name=stage_info_list,json=stageInfoList,proto3" json:"stage_info_list,omitempty"`
	WorldLevelInfoList   []*BrickBreakerLevelInfo         `protobuf:"bytes,8,rep,name=world_level_info_list,json=worldLevelInfoList,proto3" json:"world_level_info_list,omitempty"`
	SkillInfoMap         map[uint32]uint32                `protobuf:"bytes,9,rep,name=skill_info_map,json=skillInfoMap,proto3" json:"skill_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BrickBreakerDetailInfo) Reset() {
	*x = BrickBreakerDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[804]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerDetailInfo) ProtoMessage() {}

func (x *BrickBreakerDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[804]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerDetailInfo.ProtoReflect.Descriptor instead.
func (*BrickBreakerDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{804}
}

func (x *BrickBreakerDetailInfo) GetDungeonLevelInfoList() []*BrickBreakerLevelInfo {
	if x != nil {
		return x.DungeonLevelInfoList
	}
	return nil
}

func (x *BrickBreakerDetailInfo) GetStageInfoList() []*BrickBreakerActivityStageInfo {
	if x != nil {
		return x.StageInfoList
	}
	return nil
}

func (x *BrickBreakerDetailInfo) GetWorldLevelInfoList() []*BrickBreakerLevelInfo {
	if x != nil {
		return x.WorldLevelInfoList
	}
	return nil
}

func (x *BrickBreakerDetailInfo) GetSkillInfoMap() map[uint32]uint32 {
	if x != nil {
		return x.SkillInfoMap
	}
	return nil
}

type SingleStartBrickBreakerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDungeon        bool     `protobuf:"varint,11,opt,name=is_dungeon,json=isDungeon,proto3" json:"is_dungeon,omitempty"`
	ChosenAvatarList []uint32 `protobuf:"varint,13,rep,packed,name=chosen_avatar_list,json=chosenAvatarList,proto3" json:"chosen_avatar_list,omitempty"`
	ChosenSkillList  []uint32 `protobuf:"varint,7,rep,packed,name=chosen_skill_list,json=chosenSkillList,proto3" json:"chosen_skill_list,omitempty"`
	LevelId          uint32   `protobuf:"varint,6,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *SingleStartBrickBreakerReq) Reset() {
	*x = SingleStartBrickBreakerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[805]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleStartBrickBreakerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleStartBrickBreakerReq) ProtoMessage() {}

func (x *SingleStartBrickBreakerReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[805]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleStartBrickBreakerReq.ProtoReflect.Descriptor instead.
func (*SingleStartBrickBreakerReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{805}
}

func (x *SingleStartBrickBreakerReq) GetIsDungeon() bool {
	if x != nil {
		return x.IsDungeon
	}
	return false
}

func (x *SingleStartBrickBreakerReq) GetChosenAvatarList() []uint32 {
	if x != nil {
		return x.ChosenAvatarList
	}
	return nil
}

func (x *SingleStartBrickBreakerReq) GetChosenSkillList() []uint32 {
	if x != nil {
		return x.ChosenSkillList
	}
	return nil
}

func (x *SingleStartBrickBreakerReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type SingleStartBrickBreakerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId   uint32 `protobuf:"varint,5,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Retcode   int32  `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IsDungeon bool   `protobuf:"varint,12,opt,name=is_dungeon,json=isDungeon,proto3" json:"is_dungeon,omitempty"`
}

func (x *SingleStartBrickBreakerRsp) Reset() {
	*x = SingleStartBrickBreakerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[806]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleStartBrickBreakerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleStartBrickBreakerRsp) ProtoMessage() {}

func (x *SingleStartBrickBreakerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[806]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleStartBrickBreakerRsp.ProtoReflect.Descriptor instead.
func (*SingleStartBrickBreakerRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{806}
}

func (x *SingleStartBrickBreakerRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *SingleStartBrickBreakerRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *SingleStartBrickBreakerRsp) GetIsDungeon() bool {
	if x != nil {
		return x.IsDungeon
	}
	return false
}

type SingleRestartBrickBreakerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId   uint32 `protobuf:"varint,3,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsDungeon bool   `protobuf:"varint,6,opt,name=is_dungeon,json=isDungeon,proto3" json:"is_dungeon,omitempty"`
}

func (x *SingleRestartBrickBreakerReq) Reset() {
	*x = SingleRestartBrickBreakerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[807]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleRestartBrickBreakerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRestartBrickBreakerReq) ProtoMessage() {}

func (x *SingleRestartBrickBreakerReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[807]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRestartBrickBreakerReq.ProtoReflect.Descriptor instead.
func (*SingleRestartBrickBreakerReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{807}
}

func (x *SingleRestartBrickBreakerReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *SingleRestartBrickBreakerReq) GetIsDungeon() bool {
	if x != nil {
		return x.IsDungeon
	}
	return false
}

type SingleRestartBrickBreakerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId   uint32 `protobuf:"varint,13,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsDungeon bool   `protobuf:"varint,1,opt,name=is_dungeon,json=isDungeon,proto3" json:"is_dungeon,omitempty"`
	Retcode   int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *SingleRestartBrickBreakerRsp) Reset() {
	*x = SingleRestartBrickBreakerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[808]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleRestartBrickBreakerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRestartBrickBreakerRsp) ProtoMessage() {}

func (x *SingleRestartBrickBreakerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[808]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRestartBrickBreakerRsp.ProtoReflect.Descriptor instead.
func (*SingleRestartBrickBreakerRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{808}
}

func (x *SingleRestartBrickBreakerRsp) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *SingleRestartBrickBreakerRsp) GetIsDungeon() bool {
	if x != nil {
		return x.IsDungeon
	}
	return false
}

func (x *SingleRestartBrickBreakerRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type BrickBreakerSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId       uint32                                `protobuf:"varint,6,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	Score           uint32                                `protobuf:"varint,14,opt,name=score,proto3" json:"score,omitempty"`
	LevelId         uint32                                `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsNewRecord     bool                                  `protobuf:"varint,13,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	UpdateSkillList []*Uint32Pair                         `protobuf:"bytes,10,rep,name=update_skill_list,json=updateSkillList,proto3" json:"update_skill_list,omitempty"`
	Reason          BrickBreakerSettleNotify_SettleReason `protobuf:"varint,5,opt,name=reason,proto3,enum=proto.BrickBreakerSettleNotify_SettleReason" json:"reason,omitempty"`
	IsSingleMode    bool                                  `protobuf:"varint,9,opt,name=is_single_mode,json=isSingleMode,proto3" json:"is_single_mode,omitempty"`
	Combo           uint32                                `protobuf:"varint,12,opt,name=combo,proto3" json:"combo,omitempty"`
	Time            uint32                                `protobuf:"varint,15,opt,name=time,proto3" json:"time,omitempty"`
	IsDungeon       bool                                  `protobuf:"varint,11,opt,name=is_dungeon,json=isDungeon,proto3" json:"is_dungeon,omitempty"`
}

func (x *BrickBreakerSettleNotify) Reset() {
	*x = BrickBreakerSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[809]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerSettleNotify) ProtoMessage() {}

func (x *BrickBreakerSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[809]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerSettleNotify.ProtoReflect.Descriptor instead.
func (*BrickBreakerSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{809}
}

func (x *BrickBreakerSettleNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *BrickBreakerSettleNotify) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BrickBreakerSettleNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *BrickBreakerSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *BrickBreakerSettleNotify) GetUpdateSkillList() []*Uint32Pair {
	if x != nil {
		return x.UpdateSkillList
	}
	return nil
}

func (x *BrickBreakerSettleNotify) GetReason() BrickBreakerSettleNotify_SettleReason {
	if x != nil {
		return x.Reason
	}
	return BrickBreakerSettleNotify_SETTLE_REASON_TIME_OUT
}

func (x *BrickBreakerSettleNotify) GetIsSingleMode() bool {
	if x != nil {
		return x.IsSingleMode
	}
	return false
}

func (x *BrickBreakerSettleNotify) GetCombo() uint32 {
	if x != nil {
		return x.Combo
	}
	return 0
}

func (x *BrickBreakerSettleNotify) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BrickBreakerSettleNotify) GetIsDungeon() bool {
	if x != nil {
		return x.IsDungeon
	}
	return false
}

type BrickBreakerTwiceStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BrickBreakerTwiceStartReq) Reset() {
	*x = BrickBreakerTwiceStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[810]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerTwiceStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerTwiceStartReq) ProtoMessage() {}

func (x *BrickBreakerTwiceStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[810]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerTwiceStartReq.ProtoReflect.Descriptor instead.
func (*BrickBreakerTwiceStartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{810}
}

type BrickBreakerTwiceStartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *BrickBreakerTwiceStartRsp) Reset() {
	*x = BrickBreakerTwiceStartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[811]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerTwiceStartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerTwiceStartRsp) ProtoMessage() {}

func (x *BrickBreakerTwiceStartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[811]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerTwiceStartRsp.ProtoReflect.Descriptor instead.
func (*BrickBreakerTwiceStartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{811}
}

func (x *BrickBreakerTwiceStartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type BrickBreakerQuitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BrickBreakerQuitReq) Reset() {
	*x = BrickBreakerQuitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[812]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerQuitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerQuitReq) ProtoMessage() {}

func (x *BrickBreakerQuitReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[812]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerQuitReq.ProtoReflect.Descriptor instead.
func (*BrickBreakerQuitReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{812}
}

type BrickBreakerQuitRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,10,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *BrickBreakerQuitRsp) Reset() {
	*x = BrickBreakerQuitRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[813]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrickBreakerQuitRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrickBreakerQuitRsp) ProtoMessage() {}

func (x *BrickBreakerQuitRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[813]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrickBreakerQuitRsp.ProtoReflect.Descriptor instead.
func (*BrickBreakerQuitRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{813}
}

func (x *BrickBreakerQuitRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type SeaLampV3RaceLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen   bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	MaxScore uint32 `protobuf:"varint,3,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	LevelId  uint32 `protobuf:"varint,10,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *SeaLampV3RaceLevelInfo) Reset() {
	*x = SeaLampV3RaceLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[814]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3RaceLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3RaceLevelInfo) ProtoMessage() {}

func (x *SeaLampV3RaceLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[814]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3RaceLevelInfo.ProtoReflect.Descriptor instead.
func (*SeaLampV3RaceLevelInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{814}
}

func (x *SeaLampV3RaceLevelInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SeaLampV3RaceLevelInfo) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *SeaLampV3RaceLevelInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type SeaLampV3RaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelInfoList []*SeaLampV3RaceLevelInfo `protobuf:"bytes,9,rep,name=level_info_list,json=levelInfoList,proto3" json:"level_info_list,omitempty"`
}

func (x *SeaLampV3RaceInfo) Reset() {
	*x = SeaLampV3RaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[815]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3RaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3RaceInfo) ProtoMessage() {}

func (x *SeaLampV3RaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[815]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3RaceInfo.ProtoReflect.Descriptor instead.
func (*SeaLampV3RaceInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{815}
}

func (x *SeaLampV3RaceInfo) GetLevelInfoList() []*SeaLampV3RaceLevelInfo {
	if x != nil {
		return x.LevelInfoList
	}
	return nil
}

type SeaLampV3ShadowLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen        bool   `protobuf:"varint,4,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	LevelId       uint32 `protobuf:"varint,3,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	MinFinishTime uint32 `protobuf:"varint,6,opt,name=min_finish_time,json=minFinishTime,proto3" json:"min_finish_time,omitempty"`
}

func (x *SeaLampV3ShadowLevelInfo) Reset() {
	*x = SeaLampV3ShadowLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[816]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3ShadowLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3ShadowLevelInfo) ProtoMessage() {}

func (x *SeaLampV3ShadowLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[816]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3ShadowLevelInfo.ProtoReflect.Descriptor instead.
func (*SeaLampV3ShadowLevelInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{816}
}

func (x *SeaLampV3ShadowLevelInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SeaLampV3ShadowLevelInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *SeaLampV3ShadowLevelInfo) GetMinFinishTime() uint32 {
	if x != nil {
		return x.MinFinishTime
	}
	return 0
}

type SeaLampV3ShadowStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId       uint32                      `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsOpen        bool                        `protobuf:"varint,6,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	LevelInfoList []*SeaLampV3ShadowLevelInfo `protobuf:"bytes,14,rep,name=level_info_list,json=levelInfoList,proto3" json:"level_info_list,omitempty"`
}

func (x *SeaLampV3ShadowStageInfo) Reset() {
	*x = SeaLampV3ShadowStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[817]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3ShadowStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3ShadowStageInfo) ProtoMessage() {}

func (x *SeaLampV3ShadowStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[817]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3ShadowStageInfo.ProtoReflect.Descriptor instead.
func (*SeaLampV3ShadowStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{817}
}

func (x *SeaLampV3ShadowStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SeaLampV3ShadowStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SeaLampV3ShadowStageInfo) GetLevelInfoList() []*SeaLampV3ShadowLevelInfo {
	if x != nil {
		return x.LevelInfoList
	}
	return nil
}

type SeaLampV3ShadowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageInfoList []*SeaLampV3ShadowStageInfo `protobuf:"bytes,2,rep,name=stage_info_list,json=stageInfoList,proto3" json:"stage_info_list,omitempty"`
}

func (x *SeaLampV3ShadowInfo) Reset() {
	*x = SeaLampV3ShadowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[818]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3ShadowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3ShadowInfo) ProtoMessage() {}

func (x *SeaLampV3ShadowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[818]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3ShadowInfo.ProtoReflect.Descriptor instead.
func (*SeaLampV3ShadowInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{818}
}

func (x *SeaLampV3ShadowInfo) GetStageInfoList() []*SeaLampV3ShadowStageInfo {
	if x != nil {
		return x.StageInfoList
	}
	return nil
}

type SeaLampV3CampStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished bool   `protobuf:"varint,14,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	LevelId    uint32 `protobuf:"varint,12,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsOpen     bool   `protobuf:"varint,6,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	StageId    uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *SeaLampV3CampStageInfo) Reset() {
	*x = SeaLampV3CampStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[819]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3CampStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3CampStageInfo) ProtoMessage() {}

func (x *SeaLampV3CampStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[819]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3CampStageInfo.ProtoReflect.Descriptor instead.
func (*SeaLampV3CampStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{819}
}

func (x *SeaLampV3CampStageInfo) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *SeaLampV3CampStageInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *SeaLampV3CampStageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SeaLampV3CampStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type SeaLampV3CampInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageInfoList []*SeaLampV3CampStageInfo `protobuf:"bytes,15,rep,name=stage_info_list,json=stageInfoList,proto3" json:"stage_info_list,omitempty"`
}

func (x *SeaLampV3CampInfo) Reset() {
	*x = SeaLampV3CampInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[820]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3CampInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3CampInfo) ProtoMessage() {}

func (x *SeaLampV3CampInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[820]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3CampInfo.ProtoReflect.Descriptor instead.
func (*SeaLampV3CampInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{820}
}

func (x *SeaLampV3CampInfo) GetStageInfoList() []*SeaLampV3CampStageInfo {
	if x != nil {
		return x.StageInfoList
	}
	return nil
}

type SeaLampV3DetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShadowInfo *SeaLampV3ShadowInfo `protobuf:"bytes,3,opt,name=shadow_info,json=shadowInfo,proto3" json:"shadow_info,omitempty"`
	CampInfo   *SeaLampV3CampInfo   `protobuf:"bytes,8,opt,name=camp_info,json=campInfo,proto3" json:"camp_info,omitempty"`
	RaceInfo   *SeaLampV3RaceInfo   `protobuf:"bytes,10,opt,name=race_info,json=raceInfo,proto3" json:"race_info,omitempty"`
}

func (x *SeaLampV3DetailInfo) Reset() {
	*x = SeaLampV3DetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[821]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaLampV3DetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaLampV3DetailInfo) ProtoMessage() {}

func (x *SeaLampV3DetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[821]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaLampV3DetailInfo.ProtoReflect.Descriptor instead.
func (*SeaLampV3DetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{821}
}

func (x *SeaLampV3DetailInfo) GetShadowInfo() *SeaLampV3ShadowInfo {
	if x != nil {
		return x.ShadowInfo
	}
	return nil
}

func (x *SeaLampV3DetailInfo) GetCampInfo() *SeaLampV3CampInfo {
	if x != nil {
		return x.CampInfo
	}
	return nil
}

func (x *SeaLampV3DetailInfo) GetRaceInfo() *SeaLampV3RaceInfo {
	if x != nil {
		return x.RaceInfo
	}
	return nil
}

type LanV3BoatGameStartSingleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LanV3BoatGameStartSingleReq) Reset() {
	*x = LanV3BoatGameStartSingleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[822]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3BoatGameStartSingleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3BoatGameStartSingleReq) ProtoMessage() {}

func (x *LanV3BoatGameStartSingleReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[822]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3BoatGameStartSingleReq.ProtoReflect.Descriptor instead.
func (*LanV3BoatGameStartSingleReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{822}
}

type LanV3BoatGameStartSingleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *LanV3BoatGameStartSingleRsp) Reset() {
	*x = LanV3BoatGameStartSingleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[823]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3BoatGameStartSingleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3BoatGameStartSingleRsp) ProtoMessage() {}

func (x *LanV3BoatGameStartSingleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[823]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3BoatGameStartSingleRsp.ProtoReflect.Descriptor instead.
func (*LanV3BoatGameStartSingleRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{823}
}

func (x *LanV3BoatGameStartSingleRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type LanV3BoatGameTransferFinishNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReenter bool `protobuf:"varint,5,opt,name=is_reenter,json=isReenter,proto3" json:"is_reenter,omitempty"`
}

func (x *LanV3BoatGameTransferFinishNotify) Reset() {
	*x = LanV3BoatGameTransferFinishNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[824]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3BoatGameTransferFinishNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3BoatGameTransferFinishNotify) ProtoMessage() {}

func (x *LanV3BoatGameTransferFinishNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[824]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3BoatGameTransferFinishNotify.ProtoReflect.Descriptor instead.
func (*LanV3BoatGameTransferFinishNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{824}
}

func (x *LanV3BoatGameTransferFinishNotify) GetIsReenter() bool {
	if x != nil {
		return x.IsReenter
	}
	return false
}

type LanV3RaceSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemainTime      uint32 `protobuf:"varint,10,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"`
	GalleryId       uint32 `protobuf:"varint,4,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	LevelId         uint32 `protobuf:"varint,13,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	CoinCount       uint32 `protobuf:"varint,14,opt,name=coin_count,json=coinCount,proto3" json:"coin_count,omitempty"`
	TotalCointCount uint32 `protobuf:"varint,5,opt,name=total_coint_count,json=totalCointCount,proto3" json:"total_coint_count,omitempty"`
	IsNewRecord     bool   `protobuf:"varint,2,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	IsSuccess       bool   `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	Score           uint32 `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *LanV3RaceSettleNotify) Reset() {
	*x = LanV3RaceSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[825]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3RaceSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3RaceSettleNotify) ProtoMessage() {}

func (x *LanV3RaceSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[825]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3RaceSettleNotify.ProtoReflect.Descriptor instead.
func (*LanV3RaceSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{825}
}

func (x *LanV3RaceSettleNotify) GetRemainTime() uint32 {
	if x != nil {
		return x.RemainTime
	}
	return 0
}

func (x *LanV3RaceSettleNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *LanV3RaceSettleNotify) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *LanV3RaceSettleNotify) GetCoinCount() uint32 {
	if x != nil {
		return x.CoinCount
	}
	return 0
}

func (x *LanV3RaceSettleNotify) GetTotalCointCount() uint32 {
	if x != nil {
		return x.TotalCointCount
	}
	return 0
}

func (x *LanV3RaceSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *LanV3RaceSettleNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *LanV3RaceSettleNotify) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type LanV3RaceRestartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId uint32 `protobuf:"varint,13,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *LanV3RaceRestartReq) Reset() {
	*x = LanV3RaceRestartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[826]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3RaceRestartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3RaceRestartReq) ProtoMessage() {}

func (x *LanV3RaceRestartReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[826]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3RaceRestartReq.ProtoReflect.Descriptor instead.
func (*LanV3RaceRestartReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{826}
}

func (x *LanV3RaceRestartReq) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type LanV3RaceRestartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode   int32  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GalleryId uint32 `protobuf:"varint,3,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *LanV3RaceRestartRsp) Reset() {
	*x = LanV3RaceRestartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[827]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3RaceRestartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3RaceRestartRsp) ProtoMessage() {}

func (x *LanV3RaceRestartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[827]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3RaceRestartRsp.ProtoReflect.Descriptor instead.
func (*LanV3RaceRestartRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{827}
}

func (x *LanV3RaceRestartRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *LanV3RaceRestartRsp) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type LanV3BoatInterruptSettleStageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LanV3BoatInterruptSettleStageReq) Reset() {
	*x = LanV3BoatInterruptSettleStageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[828]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3BoatInterruptSettleStageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3BoatInterruptSettleStageReq) ProtoMessage() {}

func (x *LanV3BoatInterruptSettleStageReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[828]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3BoatInterruptSettleStageReq.ProtoReflect.Descriptor instead.
func (*LanV3BoatInterruptSettleStageReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{828}
}

type LanV3BoatInterruptSettleStageRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,15,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *LanV3BoatInterruptSettleStageRsp) Reset() {
	*x = LanV3BoatInterruptSettleStageRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[829]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3BoatInterruptSettleStageRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3BoatInterruptSettleStageRsp) ProtoMessage() {}

func (x *LanV3BoatInterruptSettleStageRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[829]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3BoatInterruptSettleStageRsp.ProtoReflect.Descriptor instead.
func (*LanV3BoatInterruptSettleStageRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{829}
}

func (x *LanV3BoatInterruptSettleStageRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type LanV3ShadowFinishLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishTime uint32 `protobuf:"varint,6,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	LevelId    uint32 `protobuf:"varint,15,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *LanV3ShadowFinishLevelReq) Reset() {
	*x = LanV3ShadowFinishLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[830]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3ShadowFinishLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3ShadowFinishLevelReq) ProtoMessage() {}

func (x *LanV3ShadowFinishLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[830]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3ShadowFinishLevelReq.ProtoReflect.Descriptor instead.
func (*LanV3ShadowFinishLevelReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{830}
}

func (x *LanV3ShadowFinishLevelReq) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *LanV3ShadowFinishLevelReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type LanV3ShadowFinishLevelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,3,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *LanV3ShadowFinishLevelRsp) Reset() {
	*x = LanV3ShadowFinishLevelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[831]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanV3ShadowFinishLevelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanV3ShadowFinishLevelRsp) ProtoMessage() {}

func (x *LanV3ShadowFinishLevelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[831]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanV3ShadowFinishLevelRsp.ProtoReflect.Descriptor instead.
func (*LanV3ShadowFinishLevelRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{831}
}

func (x *LanV3ShadowFinishLevelRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DuelHeartLevelDifficultyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen     bool   `protobuf:"varint,6,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	CostTime   uint32 `protobuf:"varint,9,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
	Difficulty uint32 `protobuf:"varint,12,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
}

func (x *DuelHeartLevelDifficultyInfo) Reset() {
	*x = DuelHeartLevelDifficultyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[832]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartLevelDifficultyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartLevelDifficultyInfo) ProtoMessage() {}

func (x *DuelHeartLevelDifficultyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[832]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartLevelDifficultyInfo.ProtoReflect.Descriptor instead.
func (*DuelHeartLevelDifficultyInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{832}
}

func (x *DuelHeartLevelDifficultyInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *DuelHeartLevelDifficultyInfo) GetCostTime() uint32 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *DuelHeartLevelDifficultyInfo) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

type DuelHeartLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCgViewed         bool                            `protobuf:"varint,5,opt,name=is_cg_viewed,json=isCgViewed,proto3" json:"is_cg_viewed,omitempty"`
	DifficultyInfoList []*DuelHeartLevelDifficultyInfo `protobuf:"bytes,13,rep,name=difficulty_info_list,json=difficultyInfoList,proto3" json:"difficulty_info_list,omitempty"`
	LevelId            uint32                          `protobuf:"varint,4,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	IsOpen             bool                            `protobuf:"varint,11,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *DuelHeartLevelInfo) Reset() {
	*x = DuelHeartLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[833]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartLevelInfo) ProtoMessage() {}

func (x *DuelHeartLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[833]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartLevelInfo.ProtoReflect.Descriptor instead.
func (*DuelHeartLevelInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{833}
}

func (x *DuelHeartLevelInfo) GetIsCgViewed() bool {
	if x != nil {
		return x.IsCgViewed
	}
	return false
}

func (x *DuelHeartLevelInfo) GetDifficultyInfoList() []*DuelHeartLevelDifficultyInfo {
	if x != nil {
		return x.DifficultyInfoList
	}
	return nil
}

func (x *DuelHeartLevelInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *DuelHeartLevelInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type DuelHeartDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelInfoList []*DuelHeartLevelInfo `protobuf:"bytes,14,rep,name=level_info_list,json=levelInfoList,proto3" json:"level_info_list,omitempty"`
}

func (x *DuelHeartDetailInfo) Reset() {
	*x = DuelHeartDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[834]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartDetailInfo) ProtoMessage() {}

func (x *DuelHeartDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[834]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartDetailInfo.ProtoReflect.Descriptor instead.
func (*DuelHeartDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{834}
}

func (x *DuelHeartDetailInfo) GetLevelInfoList() []*DuelHeartLevelInfo {
	if x != nil {
		return x.LevelInfoList
	}
	return nil
}

type DuelHeartEnterDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId uint32 `protobuf:"varint,12,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *DuelHeartEnterDungeonReq) Reset() {
	*x = DuelHeartEnterDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[835]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartEnterDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartEnterDungeonReq) ProtoMessage() {}

func (x *DuelHeartEnterDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[835]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartEnterDungeonReq.ProtoReflect.Descriptor instead.
func (*DuelHeartEnterDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{835}
}

func (x *DuelHeartEnterDungeonReq) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type DuelHeartEnterDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DuelHeartEnterDungeonRsp) Reset() {
	*x = DuelHeartEnterDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[836]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartEnterDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartEnterDungeonRsp) ProtoMessage() {}

func (x *DuelHeartEnterDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[836]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartEnterDungeonRsp.ProtoReflect.Descriptor instead.
func (*DuelHeartEnterDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{836}
}

func (x *DuelHeartEnterDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DuelHeartRestartDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DuelHeartRestartDungeonReq) Reset() {
	*x = DuelHeartRestartDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[837]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartRestartDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartRestartDungeonReq) ProtoMessage() {}

func (x *DuelHeartRestartDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[837]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartRestartDungeonReq.ProtoReflect.Descriptor instead.
func (*DuelHeartRestartDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{837}
}

type DuelHeartRestartDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DuelHeartRestartDungeonRsp) Reset() {
	*x = DuelHeartRestartDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[838]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartRestartDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartRestartDungeonRsp) ProtoMessage() {}

func (x *DuelHeartRestartDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[838]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartRestartDungeonRsp.ProtoReflect.Descriptor instead.
func (*DuelHeartRestartDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{838}
}

func (x *DuelHeartRestartDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DuelHeartSelectDifficultyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difficulty uint32 `protobuf:"varint,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
}

func (x *DuelHeartSelectDifficultyReq) Reset() {
	*x = DuelHeartSelectDifficultyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[839]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartSelectDifficultyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartSelectDifficultyReq) ProtoMessage() {}

func (x *DuelHeartSelectDifficultyReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[839]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartSelectDifficultyReq.ProtoReflect.Descriptor instead.
func (*DuelHeartSelectDifficultyReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{839}
}

func (x *DuelHeartSelectDifficultyReq) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

type DuelHeartSelectDifficultyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *DuelHeartSelectDifficultyRsp) Reset() {
	*x = DuelHeartSelectDifficultyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[840]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartSelectDifficultyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartSelectDifficultyRsp) ProtoMessage() {}

func (x *DuelHeartSelectDifficultyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[840]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartSelectDifficultyRsp.ProtoReflect.Descriptor instead.
func (*DuelHeartSelectDifficultyRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{840}
}

func (x *DuelHeartSelectDifficultyRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type DuelHeartSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSucc      bool   `protobuf:"varint,1,opt,name=is_succ,json=isSucc,proto3" json:"is_succ,omitempty"`
	IsNewRecord bool   `protobuf:"varint,5,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	CostTime    uint32 `protobuf:"varint,13,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
}

func (x *DuelHeartSettleNotify) Reset() {
	*x = DuelHeartSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[841]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartSettleNotify) ProtoMessage() {}

func (x *DuelHeartSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[841]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartSettleNotify.ProtoReflect.Descriptor instead.
func (*DuelHeartSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{841}
}

func (x *DuelHeartSettleNotify) GetIsSucc() bool {
	if x != nil {
		return x.IsSucc
	}
	return false
}

func (x *DuelHeartSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *DuelHeartSettleNotify) GetCostTime() uint32 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type DuelHeartCgEndNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DuelHeartCgEndNotify) Reset() {
	*x = DuelHeartCgEndNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[842]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuelHeartCgEndNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuelHeartCgEndNotify) ProtoMessage() {}

func (x *DuelHeartCgEndNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[842]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuelHeartCgEndNotify.ProtoReflect.Descriptor instead.
func (*DuelHeartCgEndNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{842}
}

type TeamChainStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestScore uint32 `protobuf:"varint,14,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
	IsOpen    bool   `protobuf:"varint,12,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	StageId   uint32 `protobuf:"varint,15,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *TeamChainStageData) Reset() {
	*x = TeamChainStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[843]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainStageData) ProtoMessage() {}

func (x *TeamChainStageData) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[843]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainStageData.ProtoReflect.Descriptor instead.
func (*TeamChainStageData) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{843}
}

func (x *TeamChainStageData) GetBestScore() uint32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

func (x *TeamChainStageData) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *TeamChainStageData) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type TeamChainDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageDataList        []*TeamChainStageData `protobuf:"bytes,14,rep,name=stage_data_list,json=stageDataList,proto3" json:"stage_data_list,omitempty"`
	IsTokenCostumeReward bool                  `protobuf:"varint,4,opt,name=is_token_costume_reward,json=isTokenCostumeReward,proto3" json:"is_token_costume_reward,omitempty"`
}

func (x *TeamChainDetailInfo) Reset() {
	*x = TeamChainDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[844]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainDetailInfo) ProtoMessage() {}

func (x *TeamChainDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[844]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainDetailInfo.ProtoReflect.Descriptor instead.
func (*TeamChainDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{844}
}

func (x *TeamChainDetailInfo) GetStageDataList() []*TeamChainStageData {
	if x != nil {
		return x.StageDataList
	}
	return nil
}

func (x *TeamChainDetailInfo) GetIsTokenCostumeReward() bool {
	if x != nil {
		return x.IsTokenCostumeReward
	}
	return false
}

type TeamChainChooseAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTrialAvatar bool   `protobuf:"varint,11,opt,name=is_trial_avatar,json=isTrialAvatar,proto3" json:"is_trial_avatar,omitempty"`
	AvatarId      uint32 `protobuf:"varint,15,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (x *TeamChainChooseAvatarInfo) Reset() {
	*x = TeamChainChooseAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[845]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainChooseAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainChooseAvatarInfo) ProtoMessage() {}

func (x *TeamChainChooseAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[845]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainChooseAvatarInfo.ProtoReflect.Descriptor instead.
func (*TeamChainChooseAvatarInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{845}
}

func (x *TeamChainChooseAvatarInfo) GetIsTrialAvatar() bool {
	if x != nil {
		return x.IsTrialAvatar
	}
	return false
}

func (x *TeamChainChooseAvatarInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

type TeamChainChooseTeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillNoList    []uint32                     `protobuf:"varint,3,rep,packed,name=skill_no_list,json=skillNoList,proto3" json:"skill_no_list,omitempty"`
	AvatarInfoList []*TeamChainChooseAvatarInfo `protobuf:"bytes,6,rep,name=avatar_info_list,json=avatarInfoList,proto3" json:"avatar_info_list,omitempty"`
}

func (x *TeamChainChooseTeamInfo) Reset() {
	*x = TeamChainChooseTeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[846]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainChooseTeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainChooseTeamInfo) ProtoMessage() {}

func (x *TeamChainChooseTeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[846]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainChooseTeamInfo.ProtoReflect.Descriptor instead.
func (*TeamChainChooseTeamInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{846}
}

func (x *TeamChainChooseTeamInfo) GetSkillNoList() []uint32 {
	if x != nil {
		return x.SkillNoList
	}
	return nil
}

func (x *TeamChainChooseTeamInfo) GetAvatarInfoList() []*TeamChainChooseAvatarInfo {
	if x != nil {
		return x.AvatarInfoList
	}
	return nil
}

type TeamChainEnterDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId      uint32                     `protobuf:"varint,7,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Difficulty   uint32                     `protobuf:"varint,11,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	TeamInfoList []*TeamChainChooseTeamInfo `protobuf:"bytes,6,rep,name=team_info_list,json=teamInfoList,proto3" json:"team_info_list,omitempty"`
}

func (x *TeamChainEnterDungeonReq) Reset() {
	*x = TeamChainEnterDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[847]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainEnterDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainEnterDungeonReq) ProtoMessage() {}

func (x *TeamChainEnterDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[847]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainEnterDungeonReq.ProtoReflect.Descriptor instead.
func (*TeamChainEnterDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{847}
}

func (x *TeamChainEnterDungeonReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *TeamChainEnterDungeonReq) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *TeamChainEnterDungeonReq) GetTeamInfoList() []*TeamChainChooseTeamInfo {
	if x != nil {
		return x.TeamInfoList
	}
	return nil
}

type TeamChainEnterDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,11,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *TeamChainEnterDungeonRsp) Reset() {
	*x = TeamChainEnterDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[848]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainEnterDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainEnterDungeonRsp) ProtoMessage() {}

func (x *TeamChainEnterDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[848]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainEnterDungeonRsp.ProtoReflect.Descriptor instead.
func (*TeamChainEnterDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{848}
}

func (x *TeamChainEnterDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type TeamChainRestartDungeonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamInfoList []*TeamChainChooseTeamInfo `protobuf:"bytes,11,rep,name=team_info_list,json=teamInfoList,proto3" json:"team_info_list,omitempty"`
}

func (x *TeamChainRestartDungeonReq) Reset() {
	*x = TeamChainRestartDungeonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[849]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainRestartDungeonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainRestartDungeonReq) ProtoMessage() {}

func (x *TeamChainRestartDungeonReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[849]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainRestartDungeonReq.ProtoReflect.Descriptor instead.
func (*TeamChainRestartDungeonReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{849}
}

func (x *TeamChainRestartDungeonReq) GetTeamInfoList() []*TeamChainChooseTeamInfo {
	if x != nil {
		return x.TeamInfoList
	}
	return nil
}

type TeamChainRestartDungeonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,8,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *TeamChainRestartDungeonRsp) Reset() {
	*x = TeamChainRestartDungeonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[850]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainRestartDungeonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainRestartDungeonRsp) ProtoMessage() {}

func (x *TeamChainRestartDungeonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[850]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainRestartDungeonRsp.ProtoReflect.Descriptor instead.
func (*TeamChainRestartDungeonRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{850}
}

func (x *TeamChainRestartDungeonRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type TeamChainDungeonInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillNoList []uint32 `protobuf:"varint,13,rep,packed,name=skill_no_list,json=skillNoList,proto3" json:"skill_no_list,omitempty"`
	StageId     uint32   `protobuf:"varint,5,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *TeamChainDungeonInfoNotify) Reset() {
	*x = TeamChainDungeonInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[851]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainDungeonInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainDungeonInfoNotify) ProtoMessage() {}

func (x *TeamChainDungeonInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[851]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainDungeonInfoNotify.ProtoReflect.Descriptor instead.
func (*TeamChainDungeonInfoNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{851}
}

func (x *TeamChainDungeonInfoNotify) GetSkillNoList() []uint32 {
	if x != nil {
		return x.SkillNoList
	}
	return nil
}

func (x *TeamChainDungeonInfoNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type TeamChainTakeCostumeRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TeamChainTakeCostumeRewardReq) Reset() {
	*x = TeamChainTakeCostumeRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[852]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainTakeCostumeRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainTakeCostumeRewardReq) ProtoMessage() {}

func (x *TeamChainTakeCostumeRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[852]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainTakeCostumeRewardReq.ProtoReflect.Descriptor instead.
func (*TeamChainTakeCostumeRewardReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{852}
}

type TeamChainTakeCostumeRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode int32 `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (x *TeamChainTakeCostumeRewardRsp) Reset() {
	*x = TeamChainTakeCostumeRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[853]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChainTakeCostumeRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChainTakeCostumeRewardRsp) ProtoMessage() {}

func (x *TeamChainTakeCostumeRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[853]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChainTakeCostumeRewardRsp.ProtoReflect.Descriptor instead.
func (*TeamChainTakeCostumeRewardRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{853}
}

func (x *TeamChainTakeCostumeRewardRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

type ElectroherculesBattleLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinish      bool   `protobuf:"varint,7,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	MinFinishTime uint32 `protobuf:"varint,9,opt,name=min_finish_time,json=minFinishTime,proto3" json:"min_finish_time,omitempty"`
	LevelId       uint32 `protobuf:"varint,3,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
}

func (x *ElectroherculesBattleLevelInfo) Reset() {
	*x = ElectroherculesBattleLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[854]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectroherculesBattleLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectroherculesBattleLevelInfo) ProtoMessage() {}

func (x *ElectroherculesBattleLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[854]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectroherculesBattleLevelInfo.ProtoReflect.Descriptor instead.
func (*ElectroherculesBattleLevelInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{854}
}

func (x *ElectroherculesBattleLevelInfo) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *ElectroherculesBattleLevelInfo) GetMinFinishTime() uint32 {
	if x != nil {
		return x.MinFinishTime
	}
	return 0
}

func (x *ElectroherculesBattleLevelInfo) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

type ElectroherculesBattleStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsStageOpen   bool                              `protobuf:"varint,4,opt,name=is_stage_open,json=isStageOpen,proto3" json:"is_stage_open,omitempty"`
	LevelInfoList []*ElectroherculesBattleLevelInfo `protobuf:"bytes,9,rep,name=level_info_list,json=levelInfoList,proto3" json:"level_info_list,omitempty"`
	StageId       uint32                            `protobuf:"varint,6,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *ElectroherculesBattleStageInfo) Reset() {
	*x = ElectroherculesBattleStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[855]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectroherculesBattleStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectroherculesBattleStageInfo) ProtoMessage() {}

func (x *ElectroherculesBattleStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[855]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectroherculesBattleStageInfo.ProtoReflect.Descriptor instead.
func (*ElectroherculesBattleStageInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{855}
}

func (x *ElectroherculesBattleStageInfo) GetIsStageOpen() bool {
	if x != nil {
		return x.IsStageOpen
	}
	return false
}

func (x *ElectroherculesBattleStageInfo) GetLevelInfoList() []*ElectroherculesBattleLevelInfo {
	if x != nil {
		return x.LevelInfoList
	}
	return nil
}

func (x *ElectroherculesBattleStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type ElectroherculesBattleDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageInfoList []*ElectroherculesBattleStageInfo `protobuf:"bytes,15,rep,name=stage_info_list,json=stageInfoList,proto3" json:"stage_info_list,omitempty"`
}

func (x *ElectroherculesBattleDetailInfo) Reset() {
	*x = ElectroherculesBattleDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[856]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectroherculesBattleDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectroherculesBattleDetailInfo) ProtoMessage() {}

func (x *ElectroherculesBattleDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[856]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectroherculesBattleDetailInfo.ProtoReflect.Descriptor instead.
func (*ElectroherculesBattleDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{856}
}

func (x *ElectroherculesBattleDetailInfo) GetStageInfoList() []*ElectroherculesBattleStageInfo {
	if x != nil {
		return x.StageInfoList
	}
	return nil
}

type ElectroherculesBattleSelectDifficultyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   uint32 `protobuf:"varint,11,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Diffculty uint32 `protobuf:"varint,14,opt,name=diffculty,proto3" json:"diffculty,omitempty"`
}

func (x *ElectroherculesBattleSelectDifficultyReq) Reset() {
	*x = ElectroherculesBattleSelectDifficultyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[857]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectroherculesBattleSelectDifficultyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectroherculesBattleSelectDifficultyReq) ProtoMessage() {}

func (x *ElectroherculesBattleSelectDifficultyReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[857]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectroherculesBattleSelectDifficultyReq.ProtoReflect.Descriptor instead.
func (*ElectroherculesBattleSelectDifficultyReq) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{857}
}

func (x *ElectroherculesBattleSelectDifficultyReq) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *ElectroherculesBattleSelectDifficultyReq) GetDiffculty() uint32 {
	if x != nil {
		return x.Diffculty
	}
	return 0
}

type ElectroherculesBattleSelectDifficultyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   uint32 `protobuf:"varint,6,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Retcode   int32  `protobuf:"varint,14,opt,name=retcode,proto3" json:"retcode,omitempty"`
	Diffculty uint32 `protobuf:"varint,3,opt,name=diffculty,proto3" json:"diffculty,omitempty"`
	GalleryId uint32 `protobuf:"varint,12,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
}

func (x *ElectroherculesBattleSelectDifficultyRsp) Reset() {
	*x = ElectroherculesBattleSelectDifficultyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[858]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectroherculesBattleSelectDifficultyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectroherculesBattleSelectDifficultyRsp) ProtoMessage() {}

func (x *ElectroherculesBattleSelectDifficultyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[858]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectroherculesBattleSelectDifficultyRsp.ProtoReflect.Descriptor instead.
func (*ElectroherculesBattleSelectDifficultyRsp) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{858}
}

func (x *ElectroherculesBattleSelectDifficultyRsp) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *ElectroherculesBattleSelectDifficultyRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ElectroherculesBattleSelectDifficultyRsp) GetDiffculty() uint32 {
	if x != nil {
		return x.Diffculty
	}
	return 0
}

func (x *ElectroherculesBattleSelectDifficultyRsp) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

type ElectroherculesBattleSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNewRecord bool   `protobuf:"varint,11,opt,name=is_new_record,json=isNewRecord,proto3" json:"is_new_record,omitempty"`
	Diffculty   uint32 `protobuf:"varint,9,opt,name=diffculty,proto3" json:"diffculty,omitempty"`
	GalleryId   uint32 `protobuf:"varint,14,opt,name=gallery_id,json=galleryId,proto3" json:"gallery_id,omitempty"`
	FinishTime  uint32 `protobuf:"varint,15,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	StageId     uint32 `protobuf:"varint,3,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *ElectroherculesBattleSettleNotify) Reset() {
	*x = ElectroherculesBattleSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[859]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectroherculesBattleSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectroherculesBattleSettleNotify) ProtoMessage() {}

func (x *ElectroherculesBattleSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[859]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectroherculesBattleSettleNotify.ProtoReflect.Descriptor instead.
func (*ElectroherculesBattleSettleNotify) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{859}
}

func (x *ElectroherculesBattleSettleNotify) GetIsNewRecord() bool {
	if x != nil {
		return x.IsNewRecord
	}
	return false
}

func (x *ElectroherculesBattleSettleNotify) GetDiffculty() uint32 {
	if x != nil {
		return x.Diffculty
	}
	return 0
}

func (x *ElectroherculesBattleSettleNotify) GetGalleryId() uint32 {
	if x != nil {
		return x.GalleryId
	}
	return 0
}

func (x *ElectroherculesBattleSettleNotify) GetFinishTime() uint32 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *ElectroherculesBattleSettleNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Detail:
	//
	//	*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_MistTrialAvatarId
	//	*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_FormalAvatarGuid
	Detail isMistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_Detail `protobuf_oneof:"detail"`
}

func (x *MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex) Reset() {
	*x = MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd_cmd_activity_proto_msgTypes[877]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex) ProtoMessage() {}

func (x *MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_cmd_activity_proto_msgTypes[877]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex.ProtoReflect.Descriptor instead.
func (*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex) Descriptor() ([]byte, []int) {
	return file_cmd_cmd_activity_proto_rawDescGZIP(), []int{210, 0}
}

func (m *MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex) GetDetail() isMistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex) GetMistTrialAvatarId() uint32 {
	if x, ok := x.GetDetail().(*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_MistTrialAvatarId); ok {
		return x.MistTrialAvatarId
	}
	return 0
}

func (x *MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex) GetFormalAvatarGuid() uint64 {
	if x, ok := x.GetDetail().(*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_FormalAvatarGuid); ok {
		return x.FormalAvatarGuid
	}
	return 0
}

type isMistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_Detail interface {
	isMistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_Detail()
}

type MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_MistTrialAvatarId struct {
	MistTrialAvatarId uint32 `protobuf:"varint,8,opt,name=mist_trial_avatar_id,json=mistTrialAvatarId,proto3,oneof"`
}

type MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_FormalAvatarGuid struct {
	FormalAvatarGuid uint64 `protobuf:"varint,6,opt,name=formal_avatar_guid,json=formalAvatarGuid,proto3,oneof"`
}

func (*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_MistTrialAvatarId) isMistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_Detail() {
}

func (*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_FormalAvatarGuid) isMistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_Detail() {
}

var File_cmd_cmd_activity_proto protoreflect.FileDescriptor

var file_cmd_cmd_activity_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63,
	0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x5f, 0x75, 0x67,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6d, 0x64,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x22, 0xab, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbb,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x16, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x46,
	0x6c, 0x79, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6d, 0x22, 0x3e, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xcb, 0x33, 0x0a,
	0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xc9, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x97, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0xa9,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4f, 0x70,
	0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0xaa, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x65, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x75, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0xf2, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0xd0, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x6e, 0x69,
	0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x4f,
	0x70, 0x65, 0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0xa6, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x69, 0x66,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0xf7, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x77, 0x69, 0x73, 0x68, 0x47,
	0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x8a, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x18, 0xab, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x1c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xe0, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x18, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x46, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61,
	0x6d, 0x4c, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x72, 0x75,
	0x63, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x75, 0x63, 0x69, 0x62, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x72, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a,
	0x11, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x49, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xc4, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0a,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xad, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x09, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43,
	0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xd5, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x11, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x73, 0x70,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xbf, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x70,
	0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53,
	0x70, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x69,
	0x67, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x87, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a,
	0x11, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xda, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0d, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xcd, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0c, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a,
	0x0d, 0x73, 0x65, 0x61, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xee,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x61, 0x4c, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4f, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x5c, 0x0a, 0x14, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xdb, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x61, 0x72, 0x65,
	0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4d, 0x0a, 0x0f, 0x66, 0x6c, 0x65, 0x75, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xd9, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0d, 0x66, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53,
	0x0a, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x8b, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x0f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x6e, 0x65, 0x6c, 0x65,
	0x72, 0x5f, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xf7, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x6e, 0x65, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x5e, 0x0a, 0x18, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x9c, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x54, 0x0a, 0x12, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x65,
	0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xab, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65,
	0x65, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x68,
	0x69, 0x6c, 0x69, 0x63, 0x68, 0x75, 0x72, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x83, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x48, 0x69, 0x6c, 0x69, 0x63, 0x68, 0x75, 0x72, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x69, 0x6c, 0x69,
	0x63, 0x68, 0x75, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xdc, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x13, 0x62, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb2, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6f, 0x79, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x11, 0x62, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xd9, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x63, 0x68, 0x6f, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f, 0x0a,
	0x15, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xff, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6a,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x62, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d,
	0x0a, 0x0f, 0x62, 0x6c, 0x69, 0x74, 0x7a, 0x5f, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x9a, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6c, 0x69, 0x74, 0x7a, 0x52, 0x75, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d,
	0x62, 0x6c, 0x69, 0x74, 0x7a, 0x52, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a,
	0x0a, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x9f, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3d, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xed, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56,
	0x0a, 0x12, 0x6d, 0x6f, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb4, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x6f, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x75, 0x6e, 0x61, 0x5f, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xae, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x75,
	0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d,
	0x0a, 0x0f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x62, 0x0a,
	0x16, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x6f,
	0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x72, 0x6f, 0x67,
	0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x6f, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x93, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a,
	0x0a, 0x68, 0x61, 0x63, 0x68, 0x69, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xeb, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x63, 0x68, 0x69,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x68, 0x61, 0x63, 0x68, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x50, 0x0a, 0x10, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xbb, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xf9, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x67, 0x0a, 0x1b, 0x74, 0x61, 0x6e, 0x75, 0x6b, 0x69,
	0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x84, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x6e, 0x75, 0x6b, 0x69, 0x54, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x74, 0x61, 0x6e, 0x75, 0x6b, 0x69, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x64, 0x0a, 0x1a, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xd4, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x6c, 0x61,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5c, 0x0a, 0x14, 0x6d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65,
	0x5f, 0x6d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x63,
	0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x12, 0x6d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0e, 0x62, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xbd, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x0d, 0x62, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3a, 0x0a, 0x08, 0x75, 0x67, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xbf, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x67, 0x63,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x75, 0x67, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a,
	0x11, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xca, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0c, 0x69, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xee, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x69,
	0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0a,
	0x73, 0x70, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xe3, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40,
	0x0a, 0x0a, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb9, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68,
	0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x67, 0x61, 0x63, 0x68, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x78, 0x0a, 0x1e, 0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x9c, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x6c,
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x10, 0x72, 0x6f,
	0x67, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xac,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f,
	0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x13,
	0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xee, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x73, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a,
	0x11, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xdd, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x09, 0x67, 0x65,
	0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xd2, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x08, 0x67, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x15, 0x67, 0x72, 0x61,
	0x76, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xf7, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x67,
	0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x51, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x70, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x93, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x13, 0x6d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73,
	0x5f, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x85, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x71, 0x61,
	0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x6d,
	0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x5c, 0x0a, 0x14, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x65,
	0x6c, 0x69, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc6, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b,
	0x0a, 0x17, 0x72, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb6, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x72, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0c, 0x76,
	0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xbd, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xe0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x69, 0x6e,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x13, 0x66, 0x75,
	0x6e, 0x67, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0xea, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x67,
	0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a,
	0x13, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x61, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0xd8, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x63,
	0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x59, 0x0a, 0x15, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x81, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x11, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x8f, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x12, 0x62, 0x72, 0x69, 0x63,
	0x6b, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xd9,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72,
	0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x75, 0x65, 0x6c,
	0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x95, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x65, 0x6c, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0d, 0x64, 0x75, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x46, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x33, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x4c, 0x61, 0x6d,
	0x70, 0x56, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x8b, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0d, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x69,
	0x0a, 0x1b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65,
	0x73, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xde, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x19,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x42, 0x0a, 0x14, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x13, 0x57, 0x69, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x8f, 0x02, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x27, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x50, 0x61, 0x69, 0x72, 0x52, 0x23, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x1a,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x6e, 0x69, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x12, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x1a,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x51, 0x0a, 0x16, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x17, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x5f,
	0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x46, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70,
	0x4e, 0x75, 0x6d, 0x22, 0xa6, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x1c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7d, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x22, 0x75, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x1a, 0x42, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x02, 0x0a, 0x19, 0x53,
	0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x61,
	0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x1b, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0x7e, 0x0a, 0x11, 0x53,
	0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x46, 0x6c, 0x79, 0x4c, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x22, 0x61, 0x0a, 0x11, 0x53,
	0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x46, 0x6c, 0x79, 0x4c, 0x61, 0x6d, 0x70, 0x52, 0x73, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x60,
	0x0a, 0x20, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x22, 0x59, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x6b, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x53,
	0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x54,
	0x61, 0x6b, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6a, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x73, 0x70, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d,
	0x70, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xac, 0x03, 0x0a, 0x13,
	0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x63, 0x75, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x45,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x5f, 0x6c, 0x61, 0x6d,
	0x70, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65,
	0x61, 0x4c, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x75, 0x73,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63,
	0x75, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x53,
	0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x46, 0x6c, 0x79, 0x4c, 0x61, 0x6d, 0x70, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x37,
	0x0a, 0x11, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x4c,
	0x61, 0x6d, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x39, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x4c, 0x61,
	0x6d, 0x70, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x22, 0xa7, 0x03, 0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x30, 0x0a, 0x14, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x4e, 0x0a, 0x25, 0x69, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x35, 0x5f, 0x65, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1f, 0x69, 0x73, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4c, 0x61, 0x73, 0x74, 0x35, 0x45, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x19,
	0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x65, 0x72, 0x72,
	0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x14, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x41, 0x0a, 0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x14, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x74, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xee, 0x04, 0x0a, 0x1a, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d,
	0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6f,
	0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x48, 0x61, 0x73,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x44, 0x61, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61,
	0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x54, 0x6f, 0x64,
	0x61, 0x79, 0x48, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x1a, 0x46,
	0x0a, 0x18, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x16, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d,
	0x61, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x53, 0x0a, 0x16, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d,
	0x61, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a,
	0x15, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x1d, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x33, 0x0a, 0x16,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x67, 0x0a,
	0x27, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x23, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c,
	0x6d, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x1c,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x59, 0x0a,
	0x1c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a,
	0x0d, 0x64, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a,
	0x23, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x1d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x22,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a,
	0x22, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x22, 0x59, 0x0a, 0x24, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a,
	0x24, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x21, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x1f, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x31,
	0x0a, 0x15, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49,
	0x64, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x43,
	0x72, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x0d, 0x75, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x55, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x75, 0x69, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x1a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3d,
	0x0a, 0x1a, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x57, 0x0a,
	0x1a, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x30, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0xd3, 0x01, 0x0a, 0x15, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x10, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69,
	0x64, 0x43, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61,
	0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x6d,
	0x70, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x61, 0x6d,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x43, 0x61, 0x6d,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4e, 0x0a,
	0x14, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5c, 0x0a,
	0x17, 0x41, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xec, 0x03, 0x0a, 0x17,
	0x41, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61,
	0x72, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x1b, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x17, 0x41, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x49, 0x0a, 0x15, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x30, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x43,
	0x0a, 0x12, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x69, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x13, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x22, 0x3c,
	0x0a, 0x19, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x19,
	0x54, 0x61, 0x6b, 0x65, 0x41, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x14, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2f, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb3, 0x01,
	0x0a, 0x11, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x18, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15,
	0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x6e,
	0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x44, 0x0a, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x1a, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e,
	0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x61,
	0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x65, 0x64, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x56, 0x0a, 0x18, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x18,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4e,
	0x0a, 0x16, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x43, 0x61, 0x6d, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf5,
	0x02, 0x0a, 0x1d, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x11,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x68, 0x69,
	0x6d, 0x6d, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x68, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6d,
	0x5f, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x77, 0x61, 0x72, 0x6d, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77,
	0x6f, 0x6e, 0x64, 0x72, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x6f, 0x6e, 0x64, 0x72, 0x6f, 0x75, 0x73, 0x45,
	0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x16, 0x44, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x22, 0x5e, 0x0a, 0x1c, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x70,
	0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x26, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53,
	0x70, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x1e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x70, 0x69,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x1b, 0x44, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x6d, 0x6d,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x68, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x65,
	0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x6d, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x6f,
	0x6e, 0x64, 0x72, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x6f, 0x6e, 0x64, 0x72, 0x6f, 0x75, 0x73, 0x45, 0x73,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x0f, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69,
	0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66,
	0x69, 0x67, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x6b,
	0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x61, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xa8, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x17,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xb8, 0x01, 0x0a, 0x19, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x20,
	0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22,
	0x41, 0x0a, 0x1c, 0x54, 0x61, 0x6b, 0x65, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1c, 0x54, 0x61, 0x6b, 0x65, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x73, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x38, 0x0a, 0x13, 0x54, 0x61, 0x6b, 0x65, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x0a, 0x13, 0x54, 0x61, 0x6b,
	0x65, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x97, 0x01,
	0x0a, 0x21, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x22, 0x35, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xe8, 0x02, 0x0a, 0x15, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x6d,
	0x70, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x44, 0x6f, 0x6e, 0x65, 0x4d, 0x70, 0x53, 0x70, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x6f, 0x61, 0x6c,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e,
	0x64, 0x5f, 0x6d, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x70, 0x53, 0x70, 0x6f, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xad, 0x02, 0x0a, 0x1d, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x58, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x04, 0x0a, 0x1d, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x46, 0x0a, 0x10,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x6d, 0x70, 0x5f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x4d, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x12, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x70, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x70, 0x53, 0x70, 0x6f, 0x74, 0x4e, 0x75, 0x6d,
	0x22, 0x5c, 0x0a, 0x1b, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3e,
	0x0a, 0x19, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x75, 0x6d, 0x22, 0x4f,
	0x0a, 0x1d, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x1e, 0x0a, 0x1c, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x4d, 0x70,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22,
	0x5b, 0x0a, 0x1f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x20, 0x0a, 0x1e,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x1e,
	0x0a, 0x1c, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0xd5,
	0x03, 0x0a, 0x1a, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a,
	0x11, 0x63, 0x75, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x44, 0x61, 0x79,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x69, 0x63,
	0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x69, 0x63,
	0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x75, 0x72, 0x44, 0x61, 0x79, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x69, 0x63, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x0f, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x0f, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x63, 0x61,
	0x6e, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x63, 0x61, 0x6e, 0x50, 0x69, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x75, 0x72, 0x44, 0x61, 0x79, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x22, 0x19, 0x0a, 0x17,
	0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x42, 0x6c, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x4d,
	0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x3c, 0x0a, 0x0e,
	0x50, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x02, 0x0a, 0x15, 0x42,
	0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x50, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x4d, 0x61,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x1a, 0x3c, 0x0a, 0x0e, 0x50,
	0x69, 0x63, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x02, 0x0a, 0x15, 0x42, 0x6c,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x76, 0x50, 0x69, 0x63, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52,
	0x65, 0x63, 0x76, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x22, 0x86, 0x01, 0x0a, 0x1b, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x14,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x50, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x50, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x18, 0x42,
	0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x50, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x69, 0x63, 0x49, 0x64,
	0x22, 0x5d, 0x0a, 0x18, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x69, 0x76, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x06,
	0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22,
	0x42, 0x0a, 0x18, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x47, 0x69, 0x76, 0x65, 0x50, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x18, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x69, 0x76, 0x65, 0x50, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12,
	0x15, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x42, 0x6c, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x50, 0x69,
	0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x8d,
	0x01, 0x0a, 0x22, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x63, 0x76, 0x50, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x70, 0x69,
	0x63, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x76, 0x50, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x11, 0x72, 0x65, 0x63, 0x76, 0x50, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x46,
	0x0a, 0x1b, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x76, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x70, 0x69, 0x63, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x69, 0x76, 0x65, 0x50,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x22, 0x8d, 0x02, 0x0a, 0x1b, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x69, 0x76, 0x65, 0x50,
	0x69, 0x63, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x64, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x69, 0x76, 0x65, 0x50, 0x69, 0x63, 0x52, 0x73, 0x70, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x69, 0x63, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x42, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x69, 0x63, 0x4e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfe, 0x02, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x55, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xde, 0x02, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78,
	0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x9c, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x22,
	0xb6, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x65,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x65,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x32, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x74,
	0x68, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64,
	0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x22, 0x81, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x30, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x52, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x64, 0x0a, 0x24, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x33, 0x0a, 0x21, 0x45, 0x78,
	0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x8a, 0x02, 0x0a, 0x1d, 0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x5f, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x61, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a,
	0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x14,
	0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x35, 0x0a, 0x14, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x42, 0x61, 0x6c,
	0x6c, 0x6f, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65,
	0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x32, 0x0a, 0x11, 0x46, 0x6c, 0x65, 0x75, 0x72,
	0x46, 0x61, 0x69, 0x72, 0x46, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x6d, 0x0a, 0x14, 0x46,
	0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x62, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xd5, 0x01, 0x0a, 0x16, 0x46,
	0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x10, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69,
	0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d,
	0x61, 0x70, 0x1a, 0x5e, 0x0a, 0x13, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x4d, 0x75, 0x73, 0x69,
	0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb3, 0x02, 0x0a, 0x15, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72,
	0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x6f,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x46, 0x61, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e,
	0x0a, 0x0a, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72,
	0x46, 0x61, 0x69, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x72, 0x0a, 0x1b, 0x46, 0x6c, 0x65, 0x75,
	0x72, 0x46, 0x61, 0x69, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xfd, 0x05, 0x0a,
	0x1b, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46,
	0x61, 0x69, 0x72, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x63, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x61, 0x70, 0x12, 0x76, 0x0a, 0x18, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x1a, 0x60, 0x0a, 0x14,
	0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c,
	0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6c,
	0x0a, 0x1a, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7b, 0x0a, 0x1a,
	0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x75, 0x0a, 0x17, 0x46, 0x6c, 0x65,
	0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x46, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x22, 0x84, 0x02, 0x0a, 0x1c, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x42, 0x61,
	0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x42, 0x61, 0x6c,
	0x6c, 0x6f, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x61, 0x70, 0x1a, 0x63, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x6f,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x19, 0x46, 0x6c, 0x65, 0x75,
	0x72, 0x46, 0x61, 0x69, 0x72, 0x46, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69,
	0x72, 0x46, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x61, 0x70, 0x1a, 0x60, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x46, 0x61, 0x6c, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x1b, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46,
	0x61, 0x69, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x62,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x69, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x48,
	0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x1b, 0x46, 0x6c, 0x65,
	0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x65, 0x78, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x64, 0x22, 0x42, 0x0a,
	0x1a, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x64, 0x22, 0x5c, 0x0a, 0x1a, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x64, 0x22,
	0x3d, 0x0a, 0x1a, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x57,
	0x0a, 0x1a, 0x46, 0x6c, 0x65, 0x75, 0x72, 0x46, 0x61, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e,
	0x69, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1a, 0x41, 0x72, 0x65, 0x6e, 0x61,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x72, 0x65,
	0x6e, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0xe7, 0x02, 0x0a, 0x20, 0x41, 0x72, 0x65, 0x6e,
	0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x13,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x41, 0x6e, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x6c, 0x0a, 0x13, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x43, 0x0a, 0x15,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa9, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61,
	0x72, 0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x72, 0x65,
	0x6e, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc3, 0x01,
	0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x32, 0x0a,
	0x15, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x72,
	0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x20, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x1a, 0x41, 0x72,
	0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x72, 0x65, 0x6e,
	0x61, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x12, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x70, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x22, 0x6c, 0x0a, 0x21, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x6b, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x21, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x61, 0x6b, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x43, 0x61, 0x6d, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x62, 0x75, 0x66, 0x66, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x65,
	0x72, 0x53, 0x6c, 0x61, 0x62, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x61,
	0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x72, 0x53,
	0x6c, 0x61, 0x62, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x71, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x72, 0x53, 0x6c,
	0x61, 0x62, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x66, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x66, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xeb, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x6c, 0x61, 0x62, 0x42, 0x75, 0x66, 0x66, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x42, 0x75, 0x66, 0x66, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x6c, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61,
	0x62, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0xb5, 0x02,
	0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62,
	0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x13, 0x6d, 0x70, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x42, 0x75, 0x66, 0x66,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6d, 0x70, 0x42, 0x75,
	0x66, 0x66, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c,
	0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x17, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x42, 0x75, 0x66, 0x66, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x66,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x10, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x22, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x50, 0x0a, 0x11, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c,
	0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa6, 0x02,
	0x0a, 0x1f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x42, 0x75, 0x66, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a,
	0x17, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x6c, 0x6f, 0x6f, 0x70, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x41, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x2c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x53, 0x74, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61,
	0x6d, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5b, 0x0a, 0x25, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x65,
	0x6f, 0x66, 0x66, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x44, 0x6f, 0x6e, 0x65, 0x22, 0x62, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x57, 0x65, 0x61, 0x72, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73,
	0x5f, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4d, 0x70, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x57, 0x65, 0x61, 0x72, 0x42, 0x75,
	0x66, 0x66, 0x52, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6d,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4d, 0x70, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x42,
	0x75, 0x66, 0x66, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6d, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x22, 0x7f, 0x0a,
	0x1c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x54,
	0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x42, 0x75, 0x66, 0x66, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6d, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4d, 0x70, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62,
	0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0xb4,
	0x01, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61,
	0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f,
	0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x2f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x70,
	0x0a, 0x2f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62,
	0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x50, 0x0a, 0x2b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c,
	0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54, 0x61, 0x6b,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x6a, 0x0a, 0x2b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54,
	0x61, 0x6b, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xfc,
	0x01, 0x0a, 0x2c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61,
	0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa3, 0x01,
	0x0a, 0x2b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62,
	0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x2b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x49, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x23, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x6c, 0x61, 0x62, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x22, 0x6d, 0x0a, 0x22, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x2d, 0x0a,
	0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x56, 0x0a, 0x25, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x2d, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6c,
	0x0a, 0x1f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62,
	0x53, 0x61, 0x76, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x49, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c,
	0x61, 0x62, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x86, 0x01, 0x0a,
	0x1f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x53,
	0x61, 0x76, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70,
	0x12, 0x49, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61,
	0x62, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x42, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x32, 0x0a,
	0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0x97, 0x02,
	0x0a, 0x12, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x42,
	0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x48,
	0x69, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x62, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52,
	0x0e, 0x62, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x1b, 0x4d, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x15, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x12, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xa6, 0x03, 0x0a, 0x27, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41, 0x6e,
	0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x79, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41,
	0x6e, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x80, 0x01, 0x0a, 0x11, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x31, 0x0a, 0x14, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x11, 0x6d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47,
	0x75, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x5e, 0x0a,
	0x27, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a,
	0x14, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x1f, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x22, 0x9f, 0x01, 0x0a, 0x1f, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x11, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3b, 0x0a, 0x1a, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x44, 0x75, 0x6e, 0x65, 0x67, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x28, 0x0a, 0x26, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c,
	0x61, 0x62, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x42, 0x0a, 0x26, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x59,
	0x0a, 0x12, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x1d, 0x48, 0x69,
	0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x65, 0x65, 0x6b, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x70, 0x65,
	0x6e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17,
	0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x48, 0x69, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x19, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65,
	0x65, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x54, 0x0a, 0x19, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x81,
	0x01, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x22, 0x40, 0x0a, 0x1d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61,
	0x6b, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x34, 0x0a, 0x17, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x43, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x17, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x65, 0x65, 0x6b, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x73, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3c, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x69, 0x6c,
	0x69, 0x63, 0x68, 0x75, 0x72, 0x6c, 0x44, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xf3, 0x02, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x69, 0x6c, 0x69,
	0x63, 0x68, 0x75, 0x72, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x55, 0x0a, 0x15, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x69, 0x6c, 0x69, 0x63,
	0x68, 0x75, 0x72, 0x6c, 0x44, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x12, 0x64, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x62, 0x0a, 0x16, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x70, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a,
	0x24, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x69, 0x6c, 0x69, 0x63, 0x68, 0x75, 0x72, 0x6c, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x20, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x69, 0x6c, 0x69, 0x63, 0x68,
	0x75, 0x72, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x18, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x42, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x6f, 0x61,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xdc, 0x02, 0x0a, 0x14, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x49,
	0x0a, 0x10, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x61, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x42, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x42, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x57, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x66, 0x0a, 0x13, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x23, 0x53,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x21, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x02, 0x0a, 0x20, 0x53,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42,
	0x6f, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x61, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0x5c, 0x0a, 0x1e, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x42, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x76, 0x0a,
	0x1e, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x42, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x16, 0x42, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x60, 0x0a,
	0x17, 0x42, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6f, 0x79, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x62, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x7c, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x6f, 0x79,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x52, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x42, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7b, 0x0a, 0x19, 0x42, 0x75, 0x6f,
	0x79, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x22, 0xe6, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x13, 0x45,
	0x63, 0x68, 0x6f, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x55, 0x0a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x32, 0x0a, 0x15, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x16, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x16, 0x45,
	0x63, 0x68, 0x6f, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x1a,
	0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x21, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x11, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x1b, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e,
	0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x5d, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x69, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x6a, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x46, 0x0a, 0x0e, 0x42, 0x6c, 0x69, 0x74, 0x7a, 0x52, 0x75, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x50,
	0x61, 0x72, 0x6b, 0x6f, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x1b, 0x42, 0x6c, 0x69, 0x74,
	0x7a, 0x52, 0x75, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x69, 0x74, 0x7a, 0x52, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x6b, 0x6f,
	0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x72, 0x6b, 0x6f, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x14, 0x70, 0x61, 0x72, 0x6b, 0x6f, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x1a, 0x42, 0x6c, 0x69, 0x74, 0x7a,
	0x52, 0x75, 0x73, 0x68, 0x50, 0x61, 0x72, 0x6b, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x72, 0x0a, 0x1a, 0x42, 0x6c, 0x69, 0x74, 0x7a, 0x52, 0x75, 0x73, 0x68, 0x50, 0x61,
	0x72, 0x6b, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xf9, 0x02, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x74, 0x65,
	0x61, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x54, 0x65,
	0x61, 0x63, 0x68, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x45, 0x78, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x78, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x61,
	0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x2d, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x73, 0x73, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x22, 0x47, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x73, 0x73, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x19, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x70, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x70, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x8f, 0x02, 0x0a, 0x16, 0x53, 0x75, 0x6d, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x55, 0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x6d, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6f, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x1a, 0x55, 0x0a, 0x11, 0x53, 0x75,
	0x6d, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x48, 0x0a, 0x0e, 0x53, 0x75, 0x6d, 0x6f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x0c, 0x53,
	0x75, 0x6d, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xaf, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x6d, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x6d, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x53, 0x75,
	0x6d, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x6d, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x20, 0x53,
	0x75, 0x6d, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f,
	0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x20, 0x53, 0x75, 0x6d, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75,
	0x6d, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x17, 0x53, 0x75, 0x6d, 0x6f, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65,
	0x6c, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6c, 0x69, 0x74,
	0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0x6c, 0x0a, 0x11, 0x53, 0x75, 0x6d, 0x6f, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x76, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x76, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x22, 0x5b, 0x0a, 0x0f, 0x53, 0x75, 0x6d, 0x6f, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x48, 0x0a, 0x13, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x11, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xa6, 0x02, 0x0a, 0x16, 0x53, 0x75, 0x6d, 0x6f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x11, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x6d, 0x6f, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0f,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x15, 0x6e, 0x6f, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6e, 0x6f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4f, 0x0a, 0x11, 0x53, 0x75, 0x6d, 0x6f,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x11, 0x53, 0x75,
	0x6d, 0x6f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x73, 0x70, 0x12,
	0x33, 0x0a, 0x16, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x6e, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x75, 0x6d, 0x6f, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x17,
	0x0a, 0x15, 0x53, 0x75, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x6b, 0x0a, 0x15, 0x53, 0x75, 0x6d, 0x6f, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x2d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61,
	0x69, 0x72, 0x22, 0xaf, 0x02, 0x0a, 0x1f, 0x53, 0x75, 0x6d, 0x6f, 0x53, 0x65, 0x74, 0x4e, 0x6f,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x11, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6f, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0f, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6e,
	0x6f, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x6f, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x16, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6e, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x15, 0x4d, 0x6f, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x1e,
	0x4d, 0x6f, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d,
	0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x6f, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x5d, 0x0a, 0x11, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6f, 0x6e, 0x66, 0x69,
	0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x1a, 0x46,
	0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69,
	0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xef, 0x01,
	0x0a, 0x10, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x61, 0x63, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x68, 0x69, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x48,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x68,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x61, 0x63,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x8c, 0x01, 0x0a, 0x12, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0a, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x68, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x61, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x45,
	0x0a, 0x14, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x53, 0x61, 0x63, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69,
	0x74, 0x65, 0x53, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x52, 0x73, 0x70, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x63, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4f,
	0x0a, 0x1e, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x61,
	0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0xd3, 0x01, 0x0a, 0x1e, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x54, 0x61, 0x6b, 0x65,
	0x53, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x61, 0x63, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x61,
	0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2f, 0x0a, 0x14, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74,
	0x65, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x4c, 0x75, 0x6e, 0x61, 0x52,
	0x69, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x3e, 0x0a, 0x0b, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x75, 0x6e,
	0x61, 0x52, 0x69, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x68, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x09, 0x68, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x1d, 0x4c,
	0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x68, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x54, 0x0a, 0x21, 0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x18,
	0x4c, 0x75, 0x6e, 0x61, 0x52, 0x69, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x22, 0xaa, 0x04, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x69, 0x0a, 0x13, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x77, 0x69, 0x73, 0x68, 0x46, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x53,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x48,
	0x61, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x69, 0x0a, 0x13, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x65,
	0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x75, 0x73, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x43, 0x0a, 0x15, 0x57, 0x69, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x55, 0x73, 0x65,
	0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c,
	0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x19,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1c, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1c, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x57,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x5a, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d,
	0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68,
	0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x48,
	0x0a, 0x25, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x1f, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x66, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x25,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x5d, 0x0a, 0x17, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x57, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xf3, 0x01, 0x0a, 0x1e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x47,
	0x69, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x47, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x01, 0x0a, 0x1e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x42, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0xa4, 0x02, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x63, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x58, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x63, 0x76, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x1f, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x76, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x63, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x48, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x76, 0x46, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1e, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x69,
	0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xb5,
	0x03, 0x0a, 0x21, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x79, 0x0a, 0x17, 0x75, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x55, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x75, 0x6e, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x73, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x47, 0x0a, 0x19, 0x55, 0x6e, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x45, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x1e, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x69, 0x76, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x19, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x21, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x6c,
	0x6c, 0x47, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0xcc, 0x01, 0x0a, 0x21, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x6c, 0x0a, 0x1e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x1a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x47,
	0x0a, 0x24, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x6e, 0x47, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x87, 0x02, 0x0a, 0x24, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x47, 0x69, 0x76,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x73, 0x70,
	0x12, 0x63, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x6e, 0x47, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x73, 0x70, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xb8, 0x01, 0x0a, 0x23, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x45, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x53, 0x0a, 0x17, 0x66, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54,
	0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x23,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x68,
	0x0a, 0x0f, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x22, 0xef, 0x02, 0x0a, 0x1b, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0f, 0x75, 0x67, 0x63, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x67, 0x63, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x75, 0x67, 0x63,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x75, 0x67,
	0x63, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x67, 0x63, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x75,
	0x67, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x15,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x1a, 0x5d, 0x0a, 0x17, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x04, 0x0a, 0x12, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x80, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x9b, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6e,
	0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x67, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x75, 0x67, 0x63, 0x47, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0xa6, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0xa2, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x15, 0x0a, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x99, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x61, 0x76,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0xa1, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x48, 0x69, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x85, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x12, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x67, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x75, 0x67, 0x63, 0x47, 0x75, 0x69, 0x64, 0x22, 0x78, 0x0a,
	0x11, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x53, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x67, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x75, 0x67, 0x63, 0x47, 0x75, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x11, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x67, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x75, 0x67, 0x63, 0x47, 0x75, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x0f, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x4f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49,
	0x64, 0x22, 0x52, 0x0a, 0x17, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0b,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x18, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69,
	0x6b, 0x65, 0x53, 0x68, 0x69, 0x6b, 0x69, 0x67, 0x61, 0x6d, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x6e, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65,
	0x77, 0x22, 0x6a, 0x0a, 0x13, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x75,
	0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x65,
	0x66, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xec, 0x04,
	0x0a, 0x0e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x76, 0x69, 0x73, 0x65,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x10,
	0x72, 0x75, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x81, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x43, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x12, 0x29,
	0x0a, 0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x4e, 0x75,
	0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc7, 0x02, 0x0a,
	0x22, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x68, 0x69,
	0x6b, 0x69, 0x67, 0x61, 0x6d, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c,
	0x69, 0x6b, 0x65, 0x53, 0x68, 0x69, 0x6b, 0x69, 0x67, 0x61, 0x6d, 0x69, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x67, 0x61, 0x6d, 0x69, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x75,
	0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x75,
	0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x1e, 0x44, 0x6f, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64,
	0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x22, 0x7d, 0x0a, 0x1e, 0x44, 0x6f, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52,
	0x73, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x61,
	0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x20, 0x0a, 0x1e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c,
	0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x22, 0x5e, 0x0a, 0x1e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x38, 0x0a, 0x1d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x1d, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x34, 0x0a, 0x15, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b,
	0x65, 0x52, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x75, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x15, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x75, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x75, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x17, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x17, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x75, 0x6e,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x75, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xba, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x63, 0x75, 0x72, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x71, 0x0a,
	0x1c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b,
	0x65, 0x53, 0x68, 0x69, 0x6b, 0x69, 0x67, 0x61, 0x6d, 0x69, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x67, 0x61, 0x6d, 0x69, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x73, 0x68, 0x69, 0x6b, 0x69, 0x67, 0x61, 0x6d, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x83, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x6c, 0x69, 0x6b, 0x65, 0x53, 0x68, 0x69, 0x6b, 0x69, 0x67, 0x61, 0x6d, 0x69, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x68, 0x69, 0x6b, 0x69, 0x67, 0x61, 0x6d, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x67, 0x61,
	0x6d, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xba, 0x01, 0x0a, 0x27, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x6c, 0x69, 0x6b, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x41, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x04, 0x52, 0x17, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x27, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41, 0x6e, 0x64, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x2f, 0x0a, 0x12, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65,
	0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69,
	0x6b, 0x65, 0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x41,
	0x0a, 0x24, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x5b, 0x0a, 0x24, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x61,
	0x6b, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x1f,
	0x0a, 0x1d, 0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b,
	0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x22,
	0x39, 0x0a, 0x1d, 0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69,
	0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xfd, 0x06, 0x0a, 0x1b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x74, 0x5f,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x75, 0x6e,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x65, 0x6c,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c,
	0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xcf, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x69, 0x73, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x85, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x76, 0x69, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x54,
	0x0a, 0x10, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x1f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x43,
	0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x1f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5a, 0x0a, 0x20, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x65,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x15,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a, 0x22, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x65,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1e,
	0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x13, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x48, 0x65, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x13, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48,
	0x65, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22,
	0x32, 0x0a, 0x15, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x15, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xa2, 0x02, 0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x6c, 0x69, 0x6b, 0x65, 0x43, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x5b, 0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x43,
	0x75, 0x72, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x43, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x43, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x75, 0x72, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x75, 0x72,
	0x73, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x18, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c,
	0x69, 0x6b, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x61, 0x63, 0x68, 0x61, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0xaf, 0x01, 0x0a, 0x14, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x14, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x73, 0x70,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x17, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x35, 0x0a, 0x1a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x6c, 0x69, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1f, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x6c, 0x69, 0x6b, 0x65, 0x52, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x75,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0e, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x1a, 0x0a, 0x18, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x4d, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x8b, 0x01, 0x0a,
	0x19, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x75,
	0x72, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x63, 0x75, 0x72, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x16, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x75, 0x72, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x32, 0x0a, 0x16, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x58, 0x0a, 0x26, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x50, 0x72, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x22, 0x62, 0x0a, 0x17, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69,
	0x6e, 0x43, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x65, 0x6c,
	0x6c, 0x4e, 0x75, 0x6d, 0x22, 0xf9, 0x03, 0x0a, 0x1a, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69,
	0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x88, 0x01, 0x0a, 0x1f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x1b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12,
	0x30, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x5f, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27,
	0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x4e, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x4e, 0x75, 0x6d,
	0x1a, 0x6e, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5e, 0x0a, 0x24, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x22, 0x6d, 0x0a, 0x0c, 0x44, 0x69, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x03, 0x72, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x72, 0x6f, 0x74, 0x22,
	0x9a, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x13, 0x64, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x69, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x10, 0x64, 0x69, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x20,
	0x44, 0x69, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x42, 0x0a, 0x13, 0x64, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x10, 0x64, 0x69, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x1f, 0x44, 0x69, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1f, 0x44, 0x69, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb8,
	0x01, 0x0a, 0x17, 0x48, 0x61, 0x63, 0x68, 0x69, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x63, 0x68, 0x69, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x52, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x61, 0x63, 0x68, 0x69, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x48, 0x61,
	0x63, 0x68, 0x69, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xce,
	0x01, 0x0a, 0x13, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22,
	0x84, 0x01, 0x0a, 0x17, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xda, 0x03, 0x0a, 0x1c, 0x57, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0e, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x6d, 0x70, 0x52, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69,
	0x73, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0e, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x1f, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x6d, 0x70, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x19, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d,
	0x70, 0x52, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x5e, 0x0a,
	0x1b, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x47, 0x69, 0x76, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x64, 0x0a,
	0x1b, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x47, 0x69, 0x76, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x12,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3c, 0x0a, 0x18, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d,
	0x70, 0x53, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x56, 0x0a, 0x18, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x53,
	0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x18, 0x57, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x69,
	0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x6d, 0x70, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x69, 0x73,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x81, 0x01, 0x0a, 0x1e, 0x57, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x57, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c,
	0x77, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x18,
	0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x63, 0x76, 0x49, 0x74,
	0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x76,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x6d, 0x70, 0x52, 0x65, 0x63, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0xae, 0x01,
	0x0a, 0x1e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3a, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3e,
	0x0a, 0x12, 0x75, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x10, 0x75, 0x6e,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2f,
	0x0a, 0x1b, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x47, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22,
	0x95, 0x01, 0x0a, 0x1b, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x47, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x20, 0x0a, 0x1e, 0x57, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x69,
	0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x22, 0x98, 0x01, 0x0a, 0x1e, 0x57, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x6c,
	0x6c, 0x47, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x23, 0x0a, 0x21, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x6d, 0x70, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x47, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x22, 0x6c, 0x0a, 0x21, 0x57, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x47, 0x69, 0x76,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x2d,
	0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x16, 0x57, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x63, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x1e, 0x0a, 0x1c, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22,
	0x86, 0x01, 0x0a, 0x1c, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x63, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x72, 0x65,
	0x63, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x23, 0x57, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x45, 0x64, 0x69, 0x74, 0x53, 0x6e, 0x6f, 0x77, 0x6d,
	0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3f, 0x0a, 0x23, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x6d, 0x70, 0x45, 0x64, 0x69, 0x74, 0x53, 0x6e, 0x6f, 0x77, 0x6d, 0x61, 0x6e, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x1f, 0x57, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6d, 0x70, 0x54, 0x72, 0x69, 0x61, 0x74, 0x68, 0x6c, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x30, 0x0a, 0x1e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x54, 0x61,
	0x6b, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x4a, 0x0a, 0x1e, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70,
	0x54, 0x61, 0x6b, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f,
	0x0a, 0x1d, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x6b, 0x65,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x49, 0x0a, 0x1d, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x6b,
	0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x1d, 0x57, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x54, 0x72, 0x69, 0x61, 0x74, 0x68, 0x6c, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1d, 0x57, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x54, 0x72, 0x69, 0x61, 0x74, 0x68, 0x6c, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x49, 0x64, 0x22, 0x9f, 0x05, 0x0a, 0x15, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x44,
	0x0a, 0x10, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x65, 0x73, 0x74, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x1f, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x45, 0x78, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1b, 0x65,
	0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52,
	0x0d, 0x62, 0x65, 0x73, 0x74, 0x48, 0x69, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1f, 0x65, 0x78, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x45,
	0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x1b, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x1a, 0x4e, 0x0a, 0x20, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x20, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x24, 0x4d, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x78, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x24, 0x4d, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0xe8, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x16, 0x63, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12,
	0x63, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x63, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x18, 0x50, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x34, 0x0a,
	0x17, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x17, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x4a, 0x0a, 0x10, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x15,
	0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x66,
	0x66, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x50, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x13,
	0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x47, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x22,
	0xe0, 0x01, 0x0a, 0x18, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x13, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x11, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x22, 0x52, 0x0a, 0x1a, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x76, 0x65,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1a, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x61, 0x76, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x19,
	0x0a, 0x17, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x33, 0x0a, 0x17, 0x50, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd1,
	0x01, 0x0a, 0x17, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x68, 0x0a, 0x15, 0x54, 0x61, 0x6e, 0x75, 0x6b, 0x69, 0x54, 0x72, 0x61, 0x76,
	0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0xde, 0x01, 0x0a,
	0x1e, 0x54, 0x61, 0x6e, 0x75, 0x6b, 0x69, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x5e, 0x0a, 0x1d, 0x74, 0x61, 0x6e, 0x75, 0x6b, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x6e, 0x75, 0x6b, 0x69, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x74, 0x61, 0x6e, 0x75, 0x6b, 0x69, 0x54, 0x72, 0x61, 0x76,
	0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x45, 0x0a,
	0x22, 0x54, 0x61, 0x6e, 0x75, 0x6b, 0x69, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x47, 0x75, 0x69, 0x64, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x1a, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x70, 0x73,
	0x22, 0x95, 0x02, 0x0a, 0x15, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x15, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x69, 0x70,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x14, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69,
	0x70, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x69, 0x70, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x1a, 0x53, 0x61, 0x6c, 0x76,
	0x61, 0x67, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x19, 0x53, 0x61, 0x6c, 0x76,
	0x61, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x14, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x44, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x14, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61,
	0x6c, 0x76, 0x61, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a,
	0x11, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6f, 0x73, 0x73,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22,
	0x93, 0x01, 0x0a, 0x10, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x21, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x69, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x22, 0xad, 0x01, 0x0a, 0x1d, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74,
	0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x58, 0x0a, 0x13,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x68, 0x0a, 0x18, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8e, 0x03, 0x0a, 0x1d,
	0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74,
	0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a,
	0x1d, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x65, 0x6c, 0x64, 0x72, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x45, 0x6c, 0x64, 0x72,
	0x69, 0x74, 0x63, 0x68, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69,
	0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x58, 0x0a, 0x1a,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x79,
	0x0a, 0x1c, 0x56, 0x69, 0x65, 0x77, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x1c, 0x56, 0x69, 0x65,
	0x77, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3e, 0x0a, 0x21, 0x56, 0x69, 0x65, 0x77, 0x4c, 0x61, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x21, 0x56, 0x69, 0x65, 0x77, 0x4c, 0x61, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x69, 0x70, 0x73, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x47, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7d, 0x0a, 0x1a,
	0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x17,
	0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x45, 0x73, 0x63, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x45, 0x73, 0x63, 0x6f,
	0x72, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0x7b, 0x0a, 0x19, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x45, 0x73,
	0x63, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6c,
	0x76, 0x61, 0x67, 0x65, 0x45, 0x73, 0x63, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x54,
	0x61, 0x6b, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x22, 0x38, 0x0a, 0x1c, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x54,
	0x61, 0x6b, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x18, 0x53, 0x61,
	0x6c, 0x76, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x18, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x17, 0x53, 0x61,
	0x6c, 0x76, 0x61, 0x67, 0x65, 0x45, 0x73, 0x63, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x17, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x45,
	0x73, 0x63, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x62, 0x0a, 0x22, 0x4c, 0x61, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x24,
	0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x23, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x52, 0x69, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x66,
	0x6f, 0x72, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0xdc, 0x03, 0x0a, 0x22, 0x4c, 0x61, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x12,
	0x55, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x66, 0x69, 0x72,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x52, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69, 0x72,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1f, 0x4c, 0x61, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x22, 0xa0, 0x03, 0x0a, 0x1f, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74,
	0x65, 0x44, 0x6f, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x55,
	0x0a, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69, 0x72, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x66, 0x69, 0x72, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x22, 0x60, 0x0a, 0x20, 0x4c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x52,
	0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52,
	0x65, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x20, 0x4c, 0x61, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x77, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x5f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x55, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0x5e, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x78, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x13, 0x4d, 0x69, 0x63,
	0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x7a, 0x0a, 0x1f, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73,
	0x75, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x7e, 0x0a,
	0x23, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xee, 0x02,
	0x0a, 0x20, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x58, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61,
	0x74, 0x73, 0x75, 0x72, 0x69, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x67, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x79, 0x73,
	0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74,
	0x73, 0x75, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5d,
	0x0a, 0x2b, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69,
	0x44, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2e, 0x0a,
	0x13, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x61, 0x72, 0x6b,
	0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4b, 0x0a,
	0x1f, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1f, 0x4d, 0x69,
	0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x23, 0x4d, 0x69, 0x63, 0x68, 0x69,
	0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61,
	0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x23, 0x4d, 0x69, 0x63, 0x68,
	0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x73, 0x74,
	0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x6f, 0x0a, 0x23, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61,
	0x74, 0x73, 0x75, 0x72, 0x69, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x23, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d,
	0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6f, 0x73, 0x73, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x23, 0x4d, 0x69, 0x63, 0x68, 0x69, 0x61, 0x65,
	0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x72, 0x6b,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x6f, 0x70,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x23, 0x4d, 0x69, 0x63, 0x68,
	0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x72, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5d, 0x0a, 0x23, 0x4d, 0x69, 0x63,
	0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x27, 0x4d, 0x69, 0x63, 0x68,
	0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x28, 0x4d,
	0x69, 0x63, 0x68, 0x69, 0x61, 0x65, 0x4d, 0x61, 0x74, 0x73, 0x75, 0x72, 0x69, 0x47, 0x61, 0x69,
	0x6e, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x69, 0x6e, 0x5f,
	0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x67, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0x40, 0x0a, 0x11, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x22, 0x5e, 0x0a, 0x12, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xe3, 0x02, 0x0a, 0x1b, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x45, 0x0a, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x19, 0x42,
	0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x69, 0x65, 0x77, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x73,
	0x70, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x66, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x17, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x17, 0x42, 0x61, 0x72,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x16, 0x42, 0x61, 0x72,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x16, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e,
	0x65, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x66, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x66, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x16, 0x42, 0x61, 0x72, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a,
	0x16, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x34, 0x0a, 0x17, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x17, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x73, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x1c, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x34, 0x0a, 0x17, 0x42, 0x61, 0x72, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x4e,
	0x0a, 0x17, 0x42, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x53,
	0x0a, 0x15, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x55, 0x67, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a,
	0x15, 0x69, 0x73, 0x5f, 0x75, 0x67, 0x63, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73,
	0x55, 0x67, 0x63, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x12, 0x35, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x1c, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x19, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x75, 0x67, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x67, 0x63, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x43,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x79, 0x73, 0x74,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x40, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0e,
	0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79,
	0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x15, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61,
	0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x5d, 0x0a, 0x13, 0x43, 0x72, 0x79, 0x73, 0x74,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x79, 0x73, 0x74,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x79, 0x73,
	0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x40, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x5a, 0x0a, 0x1c, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x22, 0xd6,
	0x02, 0x0a, 0x1c, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x40, 0x0a, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x75, 0x66, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x70, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x18, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x79, 0x73, 0x74,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x38, 0x0a, 0x1c, 0x43, 0x72, 0x79, 0x73, 0x74,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x37, 0x0a, 0x14, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x14, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xd0, 0x01,
	0x0a, 0x13, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x61,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x14,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x71, 0x75, 0x69, 0x70, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0xd3, 0x01, 0x0a, 0x15, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x61,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x42, 0x0a, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d,
	0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x10, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72,
	0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x7f, 0x0a, 0x11, 0x49, 0x72, 0x6f,
	0x64, 0x6f, 0x72, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x13, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x16, 0x49,
	0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x11,
	0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x1c, 0x49,
	0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x66, 0x66,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x66,
	0x66, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6d, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x54, 0x72, 0x79, 0x22, 0x79,
	0x0a, 0x16, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x19, 0x49, 0x72,
	0x6f, 0x64, 0x6f, 0x72, 0x69, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f,
	0x72, 0x69, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a,
	0x0b, 0x70, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f,
	0x72, 0x69, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x6f,
	0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x63, 0x68, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x86, 0x01, 0x0a, 0x1f, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x45, 0x64, 0x69, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x1f, 0x49, 0x72,
	0x6f, 0x64, 0x6f, 0x72, 0x69, 0x45, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x61, 0x6e,
	0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x14, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x53,
	0x63, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x49, 0x72,
	0x6f, 0x64, 0x6f, 0x72, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x14, 0x49, 0x72, 0x6f, 0x64,
	0x6f, 0x72, 0x69, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x14, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x46,
	0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0a,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69,
	0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a, 0x18, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x22,
	0x70, 0x0a, 0x1a, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x4d, 0x61,
	0x70, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x58,
	0x0a, 0x1b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x1b, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x43, 0x68, 0x65, 0x73, 0x73, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x4d, 0x61,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1c,
	0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0x38, 0x0a, 0x1c, 0x49, 0x72, 0x6f, 0x64, 0x6f,
	0x72, 0x69, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x5b, 0x0a, 0x1f, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x43, 0x67, 0x45, 0x6e, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x89,
	0x01, 0x0a, 0x20, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x72, 0x6f, 0x64, 0x6f, 0x72, 0x69, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x06, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x12, 0x42, 0x0a, 0x13, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x10, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x16, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x15,
	0x0a, 0x06, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x70, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x75,
	0x63, 0x63, 0x22, 0x49, 0x0a, 0x16, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x49, 0x64, 0x22, 0x33, 0x0a,
	0x1a, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x70,
	0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x73,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1a, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x49,
	0x64, 0x22, 0x69, 0x0a, 0x0e, 0x53, 0x70, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xff, 0x01, 0x0a,
	0x17, 0x53, 0x70, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x24, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x15, 0x73, 0x70, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x70, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12,
	0x73, 0x70, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4a, 0x0a, 0x22, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xad,
	0x01, 0x0a, 0x1f, 0x53, 0x70, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x75, 0x72, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x31, 0x0a, 0x15, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x12, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x75,
	0x0a, 0x1f, 0x53, 0x70, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x69, 0x63, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x59, 0x0a, 0x1b, 0x53, 0x70, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x66,
	0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x46, 0x6f, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xb1, 0x01, 0x0a, 0x1b, 0x53, 0x70, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x46, 0x6f, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x10, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x46, 0x6f, 0x6f, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x1f, 0x53, 0x70, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4e, 0x0a, 0x24, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49,
	0x64, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x4d, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x61, 0x63, 0x68, 0x61, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x04, 0x0a, 0x17, 0x47, 0x61, 0x63,
	0x68, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x10, 0x68, 0x61, 0x76, 0x65, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x15, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x67, 0x61, 0x63, 0x68, 0x61,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x73, 0x0a,
	0x19, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x48, 0x61, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x68, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x4d,
	0x61, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x74, 0x65, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0d, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e,
	0x75, 0x6d, 0x1a, 0x48, 0x0a, 0x1a, 0x48, 0x61, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x02, 0x0a,
	0x1a, 0x47, 0x61, 0x63, 0x68, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x1d, 0x47, 0x61, 0x63, 0x68, 0x61, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x61, 0x63, 0x68, 0x61, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x22, 0x52, 0x0a, 0x1b, 0x47, 0x61, 0x63, 0x68, 0x61, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x47, 0x61, 0x63, 0x68,
	0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x0d, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x3e,
	0x0a, 0x10, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce,
	0x01, 0x0a, 0x1a, 0x47, 0x61, 0x63, 0x68, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x56, 0x0a,
	0x0d, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63,
	0x68, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x1a,
	0x3e, 0x0a, 0x10, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x32, 0x0a, 0x15, 0x47, 0x61, 0x63, 0x68, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x15, 0x47, 0x61, 0x63, 0x68, 0x61, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x61, 0x63, 0x68, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x22, 0x50,
	0x0a, 0x19, 0x47, 0x61, 0x63, 0x68, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xe1, 0x01, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x52, 0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x3d, 0x0a, 0x0f, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x47, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x76, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x0c,
	0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x76, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x3d, 0x0a, 0x0f, 0x47,
	0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x1a, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x76, 0x47, 0x69, 0x66,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x1a, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x76, 0x47, 0x69, 0x66,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x76, 0x47,
	0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x47, 0x69, 0x66,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x48, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x76, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x96, 0x03, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6e, 0x0a, 0x15, 0x75, 0x6e, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x6e, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x12, 0x75, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x69, 0x66, 0x74,
	0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x68, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d,
	0x61, 0x70, 0x1a, 0x45, 0x0a, 0x17, 0x55, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x69,
	0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e,
	0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x47, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xb2,
	0x01, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x47, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x52, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x17,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x69, 0x76, 0x65, 0x47, 0x69,
	0x66, 0x74, 0x52, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x67, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x18, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x42, 0x0a, 0x1f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x47, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x1f, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x47, 0x69, 0x76, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x6e, 0x47, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47,
	0x69, 0x66, 0x74, 0x52, 0x73, 0x70, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d,
	0x61, 0x70, 0x1a, 0x3d, 0x0a, 0x0f, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc9, 0x01, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x74, 0x47, 0x69, 0x66, 0x74, 0x57, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a, 0x0c,
	0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x47, 0x69, 0x66, 0x74, 0x57, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x3d,
	0x0a, 0x0f, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a,
	0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x47, 0x69, 0x66, 0x74,
	0x57, 0x69, 0x73, 0x68, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x57, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x53,
	0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x57,
	0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d,
	0x4d, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x57, 0x69, 0x73,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x20, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47,
	0x69, 0x66, 0x74, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x15, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47, 0x69,
	0x66, 0x74, 0x57, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0xdb, 0x01, 0x0a, 0x29, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x99, 0x01,
	0x0a, 0x21, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x23, 0x4c, 0x75,
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x49, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x75,
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x17,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x76,
	0x65, 0x5f, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48,
	0x61, 0x76, 0x65, 0x54, 0x72, 0x79, 0x22, 0xc4, 0x01, 0x0a, 0x12, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x44, 0x69, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x2c, 0x0a,
	0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xed, 0x01,
	0x0a, 0x1c, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x44, 0x69, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x68, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd5, 0x01,
	0x0a, 0x10, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x54, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44,
	0x69, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0c,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xd7, 0x01,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72,
	0x79, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x44, 0x69, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x0a, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x16,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x8c, 0x01, 0x0a, 0x19, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44,
	0x69, 0x61, 0x72, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x12, 0x63, 0x68, 0x6f, 0x73,
	0x65, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x10, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x35, 0x0a, 0x19, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61,
	0x72, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x37, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0x36, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69,
	0x61, 0x72, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x1b, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x75, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x44, 0x69, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72,
	0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x7c, 0x0a, 0x1d, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x67, 0x0a,
	0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x61,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x48, 0x61, 0x72, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x1b, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x54, 0x69, 0x72, 0x65, 0x64, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x54, 0x0a, 0x1a, 0x6f, 0x70,
	0x74, 0x69, 0x61, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72,
	0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x61, 0x6e, 0x61,
	0x6c, 0x54, 0x69, 0x72, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x22,
	0x65, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44,
	0x69, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x47, 0x0a,
	0x13, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x1c,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x61, 0x69, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x22, 0x36, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x61, 0x69, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x46, 0x0a, 0x18, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x18,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72,
	0x79, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x6f,
	0x73, 0x65, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x12, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x52, 0x10, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x30, 0x0a, 0x14, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x54, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x3c, 0x0a, 0x20, 0x54, 0x72, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61,
	0x72, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xaf, 0x03, 0x0a, 0x1a, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x44, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61,
	0x72, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72,
	0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x6f,
	0x73, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72,
	0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x38, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x59, 0x0a, 0x19, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52,
	0x0c, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x35, 0x0a,
	0x19, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x76, 0x69, 0x76,
	0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x54, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x3c, 0x0a, 0x20, 0x54, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61,
	0x72, 0x79, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2b, 0x0a, 0x17, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44,
	0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x22, 0xda, 0x02, 0x0a, 0x16, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x56, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a,
	0x0a, 0x17, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x56, 0x32, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x75,
	0x72, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x75,
	0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x61, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a,
	0x14, 0x62, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32,
	0x42, 0x6f, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x62,
	0x6f, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xa6, 0x01, 0x0a, 0x1c, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56,
	0x32, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x50, 0x72, 0x65, 0x76, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x53, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x42, 0x6f, 0x61, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65,
	0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x1c, 0x53, 0x75, 0x6d, 0x6d,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x42, 0x6f, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x56, 0x32, 0x42, 0x6f, 0x61, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x22, 0x7d, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x75, 0x73,
	0x68, 0x54, 0x69, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x70, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x49, 0x64,
	0x22, 0xbb, 0x01, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x75, 0x73,
	0x68, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x5b, 0x0a, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x75, 0x73,
	0x68, 0x54, 0x69, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x76,
	0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x61, 0x64, 0x50, 0x75,
	0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x61, 0x64, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x42, 0x0a, 0x21, 0x53,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x6f, 0x61, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22,
	0x5c, 0x0a, 0x21, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6f, 0x61, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x1f, 0x0a,
	0x1d, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x39,
	0x0a, 0x1d, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x69, 0x0a, 0x14, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x5c, 0x0a, 0x15, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x17, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22,
	0x97, 0x01, 0x0a, 0x11, 0x4a, 0x69, 0x67, 0x73, 0x61, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x14, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x67, 0x65, 0x61, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x6a,
	0x69, 0x67, 0x73, 0x61, 0x77, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4a, 0x69, 0x67, 0x73, 0x61, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x11, 0x6a, 0x69, 0x67, 0x73, 0x61, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x1c, 0x47, 0x65, 0x61, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x53, 0x0a, 0x1c, 0x47, 0x65, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x65, 0x61, 0x72, 0x52, 0x73, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x61, 0x72, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x65, 0x61, 0x72,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x76, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x65, 0x61,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x47, 0x65, 0x61, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x67, 0x65, 0x61, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x75, 0x65, 0x12, 0x48,
	0x0a, 0x15, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x67, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x1d, 0x47, 0x65, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x65, 0x61,
	0x72, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x61, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x22, 0x3b, 0x0a, 0x1f, 0x47,
	0x65, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x41, 0x0a, 0x20, 0x47, 0x65, 0x61, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6c,
	0x61, 0x79, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x5b, 0x0a, 0x20, 0x47,
	0x65, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x74, 0x0a, 0x1d, 0x47, 0x72, 0x61, 0x76,
	0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x74,
	0x0a, 0x1e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0xb9, 0x01, 0x0a, 0x18, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49,
	0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4f, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x22, 0x66, 0x0a, 0x17, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6d,
	0x70, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x1c, 0x47, 0x72, 0x61,
	0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x63, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x66, 0x0a, 0x17, 0x47, 0x72,
	0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e,
	0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x53, 0x0a, 0x1d, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f,
	0x63, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x76, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x18, 0x47, 0x72, 0x61, 0x76,
	0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x76, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f,
	0x63, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x76, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x68, 0x61, 0x73, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc1,
	0x02, 0x0a, 0x19, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x76, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x72, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x81, 0x03, 0x0a, 0x1f, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e,
	0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x1d, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e,
	0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1d, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e,
	0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x22, 0x8d, 0x01, 0x0a, 0x26, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63,
	0x65, 0x6e, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x76, 0x65, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x42, 0x0a, 0x26, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65,
	0x6e, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x1d, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e, 0x49, 0x6e,
	0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x1d, 0x47, 0x72, 0x61, 0x76,
	0x65, 0x6e, 0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x22, 0x47, 0x72, 0x61, 0x76, 0x65, 0x6e,
	0x49, 0x6e, 0x6e, 0x6f, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x26, 0x0a, 0x0f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48,
	0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0e,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x60, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x51, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70,
	0x72, 0x61, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x12, 0x48, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61,
	0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x1c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x66, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61,
	0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x48,
	0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x1e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2d,
	0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4e,
	0x65, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2f, 0x0a,
	0x14, 0x69, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x53,
	0x6b, 0x69, 0x70, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x1e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x10,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x1e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x69, 0x0a,
	0x16, 0x4d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x1f, 0x4d, 0x75, 0x71,
	0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x1e,
	0x6d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x5f, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x71,
	0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x1a, 0x6d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x41, 0x0a, 0x24, 0x4d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x5b, 0x0a, 0x24, 0x4d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22,
	0xd7, 0x01, 0x0a, 0x20, 0x4d, 0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x57, 0x65,
	0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x4d, 0x75, 0x71,
	0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x3a, 0x0a, 0x1e, 0x4d,
	0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x72, 0x0a, 0x1f, 0x4d, 0x75, 0x71, 0x61, 0x64,
	0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x57,
	0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1f, 0x4d,
	0x75, 0x71, 0x61, 0x64, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x18, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65,
	0x6e, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x65, 0x73, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x20, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x13, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x10, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x1f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x65, 0x6c, 0x69, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x72,
	0x62, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x89, 0x01, 0x0a, 0x19, 0x52, 0x6f, 0x63, 0x6b, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x66, 0x0a, 0x1a, 0x52, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x48, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x56,
	0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x56, 0x69, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0xcc, 0x02, 0x0a, 0x17, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x5f, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x1a, 0x62,
	0x0a, 0x14, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x50, 0x0a, 0x18, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x6f,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x64, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x6d, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x22, 0x80, 0x03, 0x0a, 0x1d, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x6d, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x5c, 0x0a, 0x0e, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x1a, 0x65,
	0x0a, 0x11, 0x43, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x17, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x11, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xe3, 0x01, 0x0a, 0x15, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x65, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x64, 0x0a, 0x14, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x1a,
	0x64, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a, 0x16, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x69, 0x6d,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x69, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6c, 0x6f, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x22, 0xbd, 0x01, 0x0a, 0x18, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x65, 0x6c, 0x70,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x68, 0x65, 0x6c, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x64, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xc1, 0x09, 0x0a, 0x11, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0xcd, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x48, 0x65, 0x6c, 0x70, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x36, 0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xcf, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2b,
	0x0a, 0x12, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x45,
	0x6e, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x69,
	0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x35, 0x0a, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x88, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x48, 0x65,
	0x6c, 0x70, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x12, 0x30, 0x0a, 0x14, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x76, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x4e, 0x75, 0x6d, 0x12, 0x56, 0x0a, 0x10, 0x62, 0x61, 0x72,
	0x67, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61,
	0x72, 0x67, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x62, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61,
	0x70, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x86, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x5f, 0x6e, 0x70,
	0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x4e, 0x70, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x69,
	0x6e, 0x5f, 0x63, 0x64, 0x18, 0xee, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x48,
	0x65, 0x6c, 0x70, 0x49, 0x6e, 0x43, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x4e, 0x75, 0x6d, 0x12, 0x45,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0xf8, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68,
	0x65, 0x6c, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x69, 0x70, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0xec, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x30, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x41, 0x0a, 0x13, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x06, 0x0a, 0x19, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a,
	0x11, 0x68, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x68, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70,
	0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x55, 0x73, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x58, 0x0a, 0x0e, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x61,
	0x6d, 0x70, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x61, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x1a, 0x62, 0x0a, 0x14, 0x48, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a,
	0x11, 0x43, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x1b, 0x56, 0x69, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x54, 0x0a, 0x1b, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x22, 0x56, 0x69, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x69, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x69, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x75,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x72, 0x75, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x9d,
	0x02, 0x0a, 0x23, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x68, 0x0a, 0x10, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x1a, 0x41, 0x0a, 0x13, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60,
	0x0a, 0x22, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0xfd, 0x03, 0x0a, 0x26, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x68,
	0x61, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x55, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x55, 0x0a, 0x10, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x69, 0x72, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x3a, 0x0a, 0x19, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x17,
	0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x74, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x33, 0x0a, 0x17,
	0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x74, 0x68, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x0a, 0x1d, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x39, 0x0a,
	0x1d, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x24, 0x56, 0x69, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x1c, 0x56, 0x69, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x1e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x1e, 0x56, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x11, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1f, 0x56,
	0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x43, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xdb, 0x04, 0x0a, 0x1f, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x45, 0x6e, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x33,
	0x0a, 0x16, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x70, 0x63, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x70, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x10, 0x6c, 0x6f, 0x77, 0x41, 0x74, 0x74, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x62, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x12, 0x64,
	0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x73, 0x70,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x1a,
	0x41, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3b, 0x0a, 0x1a, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x3c, 0x0a, 0x1f, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0x75, 0x0a,
	0x1f, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x23, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x7f, 0x0a, 0x23, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x69, 0x0a, 0x21, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x83, 0x01,
	0x0a, 0x21, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x21, 0x56, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x22, 0x83, 0x01, 0x0a, 0x21, 0x56, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x70, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x69, 0x6e, 0x43, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x22, 0x58, 0x0a, 0x13,
	0x57, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x12, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x1c, 0x0a,
	0x1a, 0x57, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x36, 0x0a, 0x1a, 0x57,
	0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x6c, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x75,
	0x6c, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x6c,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x43, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x49, 0x64,
	0x22, 0x4b, 0x0a, 0x15, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x50, 0x6c, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x74, 0x0a,
	0x1b, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x5f, 0x68, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x48,
	0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x78, 0x0a, 0x22, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x66, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xa4, 0x01, 0x0a, 0x1f, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x68, 0x0a,
	0x1b, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x75,
	0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x18, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9a, 0x03, 0x0a, 0x1c, 0x46, 0x75, 0x6e, 0x67,
	0x75, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x19, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6f, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x16, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6e,
	0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x11, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x12, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xa2, 0x04, 0x0a, 0x17, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x51, 0x0a, 0x16, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x50,
	0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x13,
	0x70, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6d, 0x70, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x25, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6e,
	0x67, 0x75, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x21, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x1c,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6e, 0x67, 0x75,
	0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x19, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x61, 0x6d, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x18, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x75, 0x6c, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x15, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x75, 0x6c, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x20, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x50,
	0x6c, 0x6f, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x67,
	0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x6f, 0x74, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x1b, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x67, 0x75, 0x73, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x12, 0x46,
	0x75, 0x6e, 0x67, 0x75, 0x73, 0x43, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x75, 0x6e, 0x64, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x22, 0x75,
	0x0a, 0x12, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x43, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x6c, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x47, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x49, 0x64, 0x22, 0x61,
	0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x22, 0x45, 0x0a, 0x24, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x24, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x1e, 0x46, 0x75, 0x6e,
	0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4c, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6e,
	0x67, 0x75, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x8a, 0x01, 0x0a, 0x24, 0x46, 0x75,
	0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x75, 0x6e,
	0x67, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66,
	0x75, 0x6e, 0x67, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x69, 0x67, 0x68, 0x74, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x24, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x28, 0x46, 0x75, 0x6e,
	0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x67,
	0x75, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65,
	0x61, 0x64, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x4c, 0x69,
	0x66, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x49, 0x0a,
	0x28, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x28, 0x46, 0x75, 0x6e, 0x67,
	0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x54,
	0x0a, 0x1f, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x75, 0x6e, 0x67,
	0x75, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x1f, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x75,
	0x6e, 0x67, 0x75, 0x73, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x27, 0x0a, 0x25, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x41, 0x0a, 0x25, 0x46, 0x75,
	0x6e, 0x67, 0x75, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a,
	0x16, 0x43, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x17,
	0x43, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x79,
	0x0a, 0x19, 0x43, 0x68, 0x61, 0x72, 0x41, 0x6d, 0x75, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xd8, 0x02, 0x0a, 0x1a, 0x45, 0x66,
	0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x23, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x43, 0x0a, 0x1e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x4f, 0x70, 0x65, 0x6e, 0x22, 0x68, 0x0a, 0x1b, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb0,
	0x01, 0x0a, 0x20, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x56, 0x32, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x22, 0xca, 0x01, 0x0a, 0x20, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x24,
	0x0a, 0x22, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x22, 0x3e, 0x0a, 0x22, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x73, 0x0a, 0x1f, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x1f, 0x45, 0x66,
	0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x43,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x22, 0x45, 0x66,
	0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x32, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x3a, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33,
	0x0a, 0x16, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x4c, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xc0, 0x05, 0x0a, 0x14, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x1a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42,
	0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x12, 0x35, 0x0a, 0x17, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x68, 0x61,
	0x76, 0x65, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x48, 0x61, 0x76,
	0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x75, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x36, 0x0a, 0x18, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x68,
	0x61, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x48,
	0x61, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x76,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x48, 0x61, 0x76,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x51, 0x0a, 0x15, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x22, 0x5c, 0x0a, 0x15, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x5e, 0x0a, 0x19, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x78, 0x0a, 0x19, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x40, 0x0a, 0x23, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x23,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1f, 0x45, 0x6e, 0x64, 0x43,
	0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x3b, 0x0a, 0x1f, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x17, 0x0a, 0x15,
	0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x22, 0x31, 0x0a, 0x15, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3c, 0x0a, 0x1b, 0x43, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1b, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x3f,
	0x0a, 0x22, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22,
	0x59, 0x0a, 0x22, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x15, 0x42,
	0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x6f, 0x73, 0x65,
	0x6e, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x1d, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x64, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x31,
	0x0a, 0x15, 0x69, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69,
	0x73, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xa4, 0x03, 0x0a,
	0x16, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x17, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72,
	0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x15, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x69, 0x63,
	0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x61, 0x70, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb0, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x6f, 0x73,
	0x65, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x1a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x1c, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x1c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xf2, 0x03, 0x0a, 0x18, 0x42, 0x72, 0x69, 0x63, 0x6b,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65,
	0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x0c, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x49, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4c,
	0x49, 0x46, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x22, 0x1b, 0x0a, 0x19, 0x42,
	0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x77, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x22, 0x35, 0x0a, 0x19, 0x42, 0x72, 0x69, 0x63,
	0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x77, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x15, 0x0a, 0x13, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x51,
	0x75, 0x69, 0x74, 0x52, 0x65, 0x71, 0x22, 0x2f, 0x0a, 0x13, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x69, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x4c, 0x61,
	0x6d, 0x70, 0x56, 0x33, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x5a, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x52,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70,
	0x56, 0x33, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x76,
	0x0a, 0x18, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x4c, 0x61,
	0x6d, 0x70, 0x56, 0x33, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70,
	0x56, 0x33, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x5e, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70,
	0x56, 0x33, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x88, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x43, 0x61,
	0x6d, 0x70, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x11, 0x53,
	0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x43, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x45, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x43, 0x61, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x4c,
	0x61, 0x6d, 0x70, 0x56, 0x33, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3b, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61,
	0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09,
	0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56,
	0x33, 0x43, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x61, 0x4c, 0x61, 0x6d, 0x70, 0x56, 0x33, 0x52, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x61,
	0x6e, 0x56, 0x33, 0x42, 0x6f, 0x61, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x22, 0x37, 0x0a, 0x1b, 0x4c, 0x61, 0x6e,
	0x56, 0x33, 0x42, 0x6f, 0x61, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x42, 0x0a, 0x21, 0x4c, 0x61, 0x6e, 0x56, 0x33, 0x42, 0x6f, 0x61, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52,
	0x65, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x96, 0x02, 0x0a, 0x15, 0x4c, 0x61, 0x6e, 0x56, 0x33,
	0x52, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x34, 0x0a, 0x13, 0x4c, 0x61, 0x6e, 0x56, 0x33, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x13, 0x4c, 0x61, 0x6e, 0x56, 0x33, 0x52, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x4c, 0x61, 0x6e, 0x56, 0x33, 0x42, 0x6f,
	0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x22, 0x3c, 0x0a, 0x20, 0x4c, 0x61, 0x6e,
	0x56, 0x33, 0x42, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x4c, 0x61, 0x6e, 0x56, 0x33,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x35, 0x0a, 0x19, 0x4c, 0x61, 0x6e, 0x56, 0x33, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a, 0x1c, 0x44, 0x75, 0x65, 0x6c, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0xc1, 0x01,
	0x0a, 0x12, 0x44, 0x75, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x67, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x67,
	0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x14, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x65,
	0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x22, 0x58, 0x0a, 0x13, 0x44, 0x75, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x65, 0x6c, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x18, 0x44,
	0x75, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x44, 0x75, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x75, 0x65, 0x6c,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x36, 0x0a, 0x1a, 0x44, 0x75, 0x65, 0x6c, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3e,
	0x0a, 0x1c, 0x44, 0x75, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0x38,
	0x0a, 0x1c, 0x44, 0x75, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x15, 0x44, 0x75, 0x65, 0x6c,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44,
	0x75, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x43, 0x67, 0x45, 0x6e, 0x64, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x22, 0x67, 0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a,
	0x13, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x60,
	0x0a, 0x19, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64,
	0x22, 0x89, 0x01, 0x0a, 0x17, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a,
	0x18, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x18, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x62, 0x0a, 0x1a, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x44,
	0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x1a, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x1a,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x54, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x22, 0x39, 0x0a, 0x1d, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6d, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x4d, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x1f, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x28, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x66, 0x66, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x66, 0x66, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x22, 0x9c, 0x01, 0x0a, 0x28, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63,
	0x75, 0x6c, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x66, 0x66, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x66, 0x66, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22,
	0xc0, 0x01, 0x0a, 0x21, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x68, 0x65, 0x72, 0x63, 0x75,
	0x6c, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x66,
	0x66, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69,
	0x66, 0x66, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x2a, 0x87, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x43,
	0x45, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f,
	0x47, 0x55, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x47,
	0x55, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54,
	0x41, 0x4b, 0x45, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x04, 0x2a, 0x4c, 0x0a, 0x1c,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x45, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x45, 0x4c,
	0x49, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x10, 0x01, 0x2a, 0xbb, 0x01, 0x0a, 0x1d, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f,
	0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x54,
	0x41, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x52, 0x59,
	0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x4f, 0x47, 0x55, 0x45,
	0x5f, 0x44, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x29, 0x0a,
	0x25, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x56, 0x41,
	0x54, 0x41, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x81, 0x01, 0x0a, 0x15, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x75, 0x73, 0x68, 0x54, 0x69, 0x70, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x55, 0x53, 0x48, 0x5f, 0x54, 0x49, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x49, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x49, 0x50, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x42, 0x28, 0x5a, 0x26,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x79, 0x76, 0x61,
	0x74, 0x2d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x68, 0x6b, 0x34, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_cmd_activity_proto_rawDescOnce sync.Once
	file_cmd_cmd_activity_proto_rawDescData = file_cmd_cmd_activity_proto_rawDesc
)

func file_cmd_cmd_activity_proto_rawDescGZIP() []byte {
	file_cmd_cmd_activity_proto_rawDescOnce.Do(func() {
		file_cmd_cmd_activity_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_cmd_activity_proto_rawDescData)
	})
	return file_cmd_cmd_activity_proto_rawDescData
}

var file_cmd_cmd_activity_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_cmd_cmd_activity_proto_msgTypes = make([]protoimpl.MessageInfo, 921)
var file_cmd_cmd_activity_proto_goTypes = []interface{}{
	(RogueCellState)(0),                                     // 0: proto.RogueCellState
	(RogueEliteCellDifficultyType)(0),                       // 1: proto.RogueEliteCellDifficultyType
	(RogueDiaryAvatarDisableStatus)(0),                      // 2: proto.RogueDiaryAvatarDisableStatus
	(ActivityPushTipsState)(0),                              // 3: proto.ActivityPushTipsState
	(BrickBreakerSettleNotify_SettleReason)(0),              // 4: proto.BrickBreakerSettleNotify.SettleReason
	(*GetActivityScheduleReq)(nil),                          // 5: proto.GetActivityScheduleReq
	(*ActivityScheduleInfo)(nil),                            // 6: proto.ActivityScheduleInfo
	(*GetActivityScheduleRsp)(nil),                          // 7: proto.GetActivityScheduleRsp
	(*GetActivityInfoReq)(nil),                              // 8: proto.GetActivityInfoReq
	(*ActivityInfo)(nil),                                    // 9: proto.ActivityInfo
	(*GetActivityInfoRsp)(nil),                              // 10: proto.GetActivityInfoRsp
	(*ActivityPlayOpenAnimNotify)(nil),                      // 11: proto.ActivityPlayOpenAnimNotify
	(*ActivityInfoNotify)(nil),                              // 12: proto.ActivityInfoNotify
	(*ActivityScheduleInfoNotify)(nil),                      // 13: proto.ActivityScheduleInfoNotify
	(*ActivityWatcherInfo)(nil),                             // 14: proto.ActivityWatcherInfo
	(*ActivityTakeWatcherRewardReq)(nil),                    // 15: proto.ActivityTakeWatcherRewardReq
	(*ActivityTakeWatcherRewardRsp)(nil),                    // 16: proto.ActivityTakeWatcherRewardRsp
	(*ActivityUpdateWatcherNotify)(nil),                     // 17: proto.ActivityUpdateWatcherNotify
	(*ActivitySelectAvatarCardReq)(nil),                     // 18: proto.ActivitySelectAvatarCardReq
	(*ActivitySelectAvatarCardRsp)(nil),                     // 19: proto.ActivitySelectAvatarCardRsp
	(*ActivityCoinInfoNotify)(nil),                          // 20: proto.ActivityCoinInfoNotify
	(*SeaLampActivityDetailInfo)(nil),                       // 21: proto.SeaLampActivityDetailInfo
	(*SeaLampFlyLampReq)(nil),                               // 22: proto.SeaLampFlyLampReq
	(*SeaLampFlyLampRsp)(nil),                               // 23: proto.SeaLampFlyLampRsp
	(*SeaLampTakeContributionRewardReq)(nil),                // 24: proto.SeaLampTakeContributionRewardReq
	(*SeaLampTakeContributionRewardRsp)(nil),                // 25: proto.SeaLampTakeContributionRewardRsp
	(*SeaLampTakePhaseRewardReq)(nil),                       // 26: proto.SeaLampTakePhaseRewardReq
	(*SeaLampTakePhaseRewardRsp)(nil),                       // 27: proto.SeaLampTakePhaseRewardRsp
	(*SeaLampContributeItemReq)(nil),                        // 28: proto.SeaLampContributeItemReq
	(*SeaLampContributeItemRsp)(nil),                        // 29: proto.SeaLampContributeItemRsp
	(*SeaLampSectionInfo)(nil),                              // 30: proto.SeaLampSectionInfo
	(*SeaLampActivityInfo)(nil),                             // 31: proto.SeaLampActivityInfo
	(*SeaLampFlyLampNotify)(nil),                            // 32: proto.SeaLampFlyLampNotify
	(*SeaLampCoinNotify)(nil),                               // 33: proto.SeaLampCoinNotify
	(*SeaLampPopularityNotify)(nil),                         // 34: proto.SeaLampPopularityNotify
	(*AnnounceData)(nil),                                    // 35: proto.AnnounceData
	(*LoadActivityTerrainNotify)(nil),                       // 36: proto.LoadActivityTerrainNotify
	(*ServerAnnounceNotify)(nil),                            // 37: proto.ServerAnnounceNotify
	(*ServerAnnounceRevokeNotify)(nil),                      // 38: proto.ServerAnnounceRevokeNotify
	(*ActivityBannerNotify)(nil),                            // 39: proto.ActivityBannerNotify
	(*ActivityBannerClearReq)(nil),                          // 40: proto.ActivityBannerClearReq
	(*ActivityBannerClearRsp)(nil),                          // 41: proto.ActivityBannerClearRsp
	(*SalesmanActivityDetailInfo)(nil),                      // 42: proto.SalesmanActivityDetailInfo
	(*SalesmanDeliverItemReq)(nil),                          // 43: proto.SalesmanDeliverItemReq
	(*SalesmanDeliverItemRsp)(nil),                          // 44: proto.SalesmanDeliverItemRsp
	(*SalesmanTakeRewardReq)(nil),                           // 45: proto.SalesmanTakeRewardReq
	(*SalesmanTakeRewardRsp)(nil),                           // 46: proto.SalesmanTakeRewardRsp
	(*ActivityCondStateChangeNotify)(nil),                   // 47: proto.ActivityCondStateChangeNotify
	(*SalesmanTakeSpecialRewardReq)(nil),                    // 48: proto.SalesmanTakeSpecialRewardReq
	(*SalesmanTakeSpecialRewardRsp)(nil),                    // 49: proto.SalesmanTakeSpecialRewardRsp
	(*GetAuthSalesmanInfoReq)(nil),                          // 50: proto.GetAuthSalesmanInfoReq
	(*GetAuthSalesmanInfoRsp)(nil),                          // 51: proto.GetAuthSalesmanInfoRsp
	(*TrialAvatarActivityRewardDetailInfo)(nil),             // 52: proto.TrialAvatarActivityRewardDetailInfo
	(*TrialAvatarActivityDetailInfo)(nil),                   // 53: proto.TrialAvatarActivityDetailInfo
	(*EnterTrialAvatarActivityDungeonReq)(nil),              // 54: proto.EnterTrialAvatarActivityDungeonReq
	(*EnterTrialAvatarActivityDungeonRsp)(nil),              // 55: proto.EnterTrialAvatarActivityDungeonRsp
	(*ReceivedTrialAvatarActivityRewardReq)(nil),            // 56: proto.ReceivedTrialAvatarActivityRewardReq
	(*ReceivedTrialAvatarActivityRewardRsp)(nil),            // 57: proto.ReceivedTrialAvatarActivityRewardRsp
	(*TrialAvatarFirstPassDungeonNotify)(nil),               // 58: proto.TrialAvatarFirstPassDungeonNotify
	(*TrialAvatarInDungeonIndexNotify)(nil),                 // 59: proto.TrialAvatarInDungeonIndexNotify
	(*CrucibleBattleUidInfo)(nil),                           // 60: proto.CrucibleBattleUidInfo
	(*CrucibleActivityDetailInfo)(nil),                      // 61: proto.CrucibleActivityDetailInfo
	(*DeliveryActivityDetailInfo)(nil),                      // 62: proto.DeliveryActivityDetailInfo
	(*TakeDeliveryDailyRewardReq)(nil),                      // 63: proto.TakeDeliveryDailyRewardReq
	(*TakeDeliveryDailyRewardRsp)(nil),                      // 64: proto.TakeDeliveryDailyRewardRsp
	(*FinishDeliveryNotify)(nil),                            // 65: proto.FinishDeliveryNotify
	(*AsterLittleDetailInfo)(nil),                           // 66: proto.AsterLittleDetailInfo
	(*AsterMidCampInfo)(nil),                                // 67: proto.AsterMidCampInfo
	(*AsterMidDetailInfo)(nil),                              // 68: proto.AsterMidDetailInfo
	(*AsterLargeDetailInfo)(nil),                            // 69: proto.AsterLargeDetailInfo
	(*AsterProgressDetailInfo)(nil),                         // 70: proto.AsterProgressDetailInfo
	(*AsterActivityDetailInfo)(nil),                         // 71: proto.AsterActivityDetailInfo
	(*SelectAsterMidDifficultyReq)(nil),                     // 72: proto.SelectAsterMidDifficultyReq
	(*SelectAsterMidDifficultyRsp)(nil),                     // 73: proto.SelectAsterMidDifficultyRsp
	(*AsterProgressInfoNotify)(nil),                         // 74: proto.AsterProgressInfoNotify
	(*AsterLittleInfoNotify)(nil),                           // 75: proto.AsterLittleInfoNotify
	(*AsterMidInfoNotify)(nil),                              // 76: proto.AsterMidInfoNotify
	(*AsterMiscInfoNotify)(nil),                             // 77: proto.AsterMiscInfoNotify
	(*TakeAsterSpecialRewardReq)(nil),                       // 78: proto.TakeAsterSpecialRewardReq
	(*TakeAsterSpecialRewardRsp)(nil),                       // 79: proto.TakeAsterSpecialRewardRsp
	(*AsterLargeInfoNotify)(nil),                            // 80: proto.AsterLargeInfoNotify
	(*FlightDailyRecord)(nil),                               // 81: proto.FlightDailyRecord
	(*FlightActivityDetailInfo)(nil),                        // 82: proto.FlightActivityDetailInfo
	(*FlightActivitySettleNotify)(nil),                      // 83: proto.FlightActivitySettleNotify
	(*FlightActivityRestartReq)(nil),                        // 84: proto.FlightActivityRestartReq
	(*FlightActivityRestartRsp)(nil),                        // 85: proto.FlightActivityRestartRsp
	(*AsterMidCampInfoNotify)(nil),                          // 86: proto.AsterMidCampInfoNotify
	(*DragonSpineActivityDetailInfo)(nil),                   // 87: proto.DragonSpineActivityDetailInfo
	(*DragonSpineChapterInfo)(nil),                          // 88: proto.DragonSpineChapterInfo
	(*DragonSpineChapterOpenNotify)(nil),                    // 89: proto.DragonSpineChapterOpenNotify
	(*DragonSpineChapterProgressChangeNotify)(nil),          // 90: proto.DragonSpineChapterProgressChangeNotify
	(*DragonSpineChapterFinishNotify)(nil),                  // 91: proto.DragonSpineChapterFinishNotify
	(*DragonSpineCoinChangeNotify)(nil),                     // 92: proto.DragonSpineCoinChangeNotify
	(*ActivitySaleChangeNotify)(nil),                        // 93: proto.ActivitySaleChangeNotify
	(*EffigyDailyInfo)(nil),                                 // 94: proto.EffigyDailyInfo
	(*EffigyActivityDetailInfo)(nil),                        // 95: proto.EffigyActivityDetailInfo
	(*StartEffigyChallengeReq)(nil),                         // 96: proto.StartEffigyChallengeReq
	(*StartEffigyChallengeRsp)(nil),                         // 97: proto.StartEffigyChallengeRsp
	(*EffigyChallengeInfoNotify)(nil),                       // 98: proto.EffigyChallengeInfoNotify
	(*EffigyChallengeDungeonResultInfo)(nil),                // 99: proto.EffigyChallengeDungeonResultInfo
	(*EffigyChallengeResultNotify)(nil),                     // 100: proto.EffigyChallengeResultNotify
	(*TakeEffigyFirstPassRewardReq)(nil),                    // 101: proto.TakeEffigyFirstPassRewardReq
	(*TakeEffigyFirstPassRewardRsp)(nil),                    // 102: proto.TakeEffigyFirstPassRewardRsp
	(*TakeEffigyRewardReq)(nil),                             // 103: proto.TakeEffigyRewardReq
	(*TakeEffigyRewardRsp)(nil),                             // 104: proto.TakeEffigyRewardRsp
	(*SelectEffigyChallengeConditionReq)(nil),               // 105: proto.SelectEffigyChallengeConditionReq
	(*SelectEffigyChallengeConditionRsp)(nil),               // 106: proto.SelectEffigyChallengeConditionRsp
	(*RestartEffigyChallengeReq)(nil),                       // 107: proto.RestartEffigyChallengeReq
	(*RestartEffigyChallengeRsp)(nil),                       // 108: proto.RestartEffigyChallengeRsp
	(*TreasureMapRegionInfo)(nil),                           // 109: proto.TreasureMapRegionInfo
	(*TreasureMapBonusChallengeInfo)(nil),                   // 110: proto.TreasureMapBonusChallengeInfo
	(*TreasureMapActivityDetailInfo)(nil),                   // 111: proto.TreasureMapActivityDetailInfo
	(*TreasureMapRegionInfoNotify)(nil),                     // 112: proto.TreasureMapRegionInfoNotify
	(*TreasureMapCurrencyNotify)(nil),                       // 113: proto.TreasureMapCurrencyNotify
	(*TreasureMapRegionActiveNotify)(nil),                   // 114: proto.TreasureMapRegionActiveNotify
	(*TreasureMapMpChallengeNotify)(nil),                    // 115: proto.TreasureMapMpChallengeNotify
	(*TreasureMapBonusChallengeNotify)(nil),                 // 116: proto.TreasureMapBonusChallengeNotify
	(*TreasureMapGuideTaskDoneNotify)(nil),                  // 117: proto.TreasureMapGuideTaskDoneNotify
	(*TreasureMapPreTaskDoneNotify)(nil),                    // 118: proto.TreasureMapPreTaskDoneNotify
	(*BlessingActivityDetailInfo)(nil),                      // 119: proto.BlessingActivityDetailInfo
	(*BlessingScanReq)(nil),                                 // 120: proto.BlessingScanReq
	(*BlessingScanRsp)(nil),                                 // 121: proto.BlessingScanRsp
	(*BlessingRedeemRewardReq)(nil),                         // 122: proto.BlessingRedeemRewardReq
	(*BlessingRedeemRewardRsp)(nil),                         // 123: proto.BlessingRedeemRewardRsp
	(*BlessingFriendPicData)(nil),                           // 124: proto.BlessingFriendPicData
	(*BlessingRecvPicRecord)(nil),                           // 125: proto.BlessingRecvPicRecord
	(*BlessingGetFriendPicListReq)(nil),                     // 126: proto.BlessingGetFriendPicListReq
	(*BlessingGetFriendPicListRsp)(nil),                     // 127: proto.BlessingGetFriendPicListRsp
	(*BlessingGiveFriendPicReq)(nil),                        // 128: proto.BlessingGiveFriendPicReq
	(*BlessingGiveFriendPicRsp)(nil),                        // 129: proto.BlessingGiveFriendPicRsp
	(*BlessingAcceptGivePicReq)(nil),                        // 130: proto.BlessingAcceptGivePicReq
	(*BlessingAcceptGivePicRsp)(nil),                        // 131: proto.BlessingAcceptGivePicRsp
	(*BlessingGetAllRecvPicRecordListReq)(nil),              // 132: proto.BlessingGetAllRecvPicRecordListReq
	(*BlessingGetAllRecvPicRecordListRsp)(nil),              // 133: proto.BlessingGetAllRecvPicRecordListRsp
	(*BlessingRecvFriendPicNotify)(nil),                     // 134: proto.BlessingRecvFriendPicNotify
	(*BlessingAcceptAllGivePicReq)(nil),                     // 135: proto.BlessingAcceptAllGivePicReq
	(*BlessingAcceptAllGivePicRsp)(nil),                     // 136: proto.BlessingAcceptAllGivePicRsp
	(*ExpeditionPathInfo)(nil),                              // 137: proto.ExpeditionPathInfo
	(*ExpeditionChallengeInfo)(nil),                         // 138: proto.ExpeditionChallengeInfo
	(*ExpeditionActivityDetailInfo)(nil),                    // 139: proto.ExpeditionActivityDetailInfo
	(*ExpeditionStartReq)(nil),                              // 140: proto.ExpeditionStartReq
	(*ExpeditionStartRsp)(nil),                              // 141: proto.ExpeditionStartRsp
	(*ExpeditionRecallReq)(nil),                             // 142: proto.ExpeditionRecallReq
	(*ExpeditionRecallRsp)(nil),                             // 143: proto.ExpeditionRecallRsp
	(*ExpeditionTakeRewardReq)(nil),                         // 144: proto.ExpeditionTakeRewardReq
	(*ExpeditionTakeRewardRsp)(nil),                         // 145: proto.ExpeditionTakeRewardRsp
	(*ExpeditionAssistInfo)(nil),                            // 146: proto.ExpeditionAssistInfo
	(*GetExpeditionAssistInfoListReq)(nil),                  // 147: proto.GetExpeditionAssistInfoListReq
	(*GetExpeditionAssistInfoListRsp)(nil),                  // 148: proto.GetExpeditionAssistInfoListRsp
	(*SetCurExpeditionChallengeIdReq)(nil),                  // 149: proto.SetCurExpeditionChallengeIdReq
	(*SetCurExpeditionChallengeIdRsp)(nil),                  // 150: proto.SetCurExpeditionChallengeIdRsp
	(*ExpeditionChallengeEnterRegionNotify)(nil),            // 151: proto.ExpeditionChallengeEnterRegionNotify
	(*ExpeditionChallengeFinishedNotify)(nil),               // 152: proto.ExpeditionChallengeFinishedNotify
	(*WaterSpiritActivityDetailInfo)(nil),                   // 153: proto.WaterSpiritActivityDetailInfo
	(*FleurFairChapterInfo)(nil),                            // 154: proto.FleurFairChapterInfo
	(*FleurFairBalloonInfo)(nil),                            // 155: proto.FleurFairBalloonInfo
	(*FleurFairFallInfo)(nil),                               // 156: proto.FleurFairFallInfo
	(*FleurFairMusicRecord)(nil),                            // 157: proto.FleurFairMusicRecord
	(*FleurFairMusicGameInfo)(nil),                          // 158: proto.FleurFairMusicGameInfo
	(*FleurFairMinigameInfo)(nil),                           // 159: proto.FleurFairMinigameInfo
	(*FleurFairDungeonSectionInfo)(nil),                     // 160: proto.FleurFairDungeonSectionInfo
	(*FleurFairActivityDetailInfo)(nil),                     // 161: proto.FleurFairActivityDetailInfo
	(*FleurFairBalloonSettleInfo)(nil),                      // 162: proto.FleurFairBalloonSettleInfo
	(*FleurFairFallSettleInfo)(nil),                         // 163: proto.FleurFairFallSettleInfo
	(*FleurFairBalloonSettleNotify)(nil),                    // 164: proto.FleurFairBalloonSettleNotify
	(*FleurFairFallSettleNotify)(nil),                       // 165: proto.FleurFairFallSettleNotify
	(*FleurFairMusicGameSettleReq)(nil),                     // 166: proto.FleurFairMusicGameSettleReq
	(*FleurFairMusicGameSettleRsp)(nil),                     // 167: proto.FleurFairMusicGameSettleRsp
	(*FleurFairMusicGameStartReq)(nil),                      // 168: proto.FleurFairMusicGameStartReq
	(*FleurFairMusicGameStartRsp)(nil),                      // 169: proto.FleurFairMusicGameStartRsp
	(*FleurFairReplayMiniGameReq)(nil),                      // 170: proto.FleurFairReplayMiniGameReq
	(*FleurFairReplayMiniGameRsp)(nil),                      // 171: proto.FleurFairReplayMiniGameRsp
	(*ArenaChallengeMonsterLevel)(nil),                      // 172: proto.ArenaChallengeMonsterLevel
	(*ArenaChallengeActivityDetailInfo)(nil),                // 173: proto.ArenaChallengeActivityDetailInfo
	(*StartArenaChallengeLevelReq)(nil),                     // 174: proto.StartArenaChallengeLevelReq
	(*StartArenaChallengeLevelRsp)(nil),                     // 175: proto.StartArenaChallengeLevelRsp
	(*ArenaChallengeChildChallengeInfo)(nil),                // 176: proto.ArenaChallengeChildChallengeInfo
	(*ArenaChallengeFinishNotify)(nil),                      // 177: proto.ArenaChallengeFinishNotify
	(*WaterSpritePhaseFinishNotify)(nil),                    // 178: proto.WaterSpritePhaseFinishNotify
	(*ActivityTakeWatcherRewardBatchReq)(nil),               // 179: proto.ActivityTakeWatcherRewardBatchReq
	(*ActivityTakeWatcherRewardBatchRsp)(nil),               // 180: proto.ActivityTakeWatcherRewardBatchRsp
	(*ChannelerSlabCamp)(nil),                               // 181: proto.ChannelerSlabCamp
	(*ChannelerSlabChallenge)(nil),                          // 182: proto.ChannelerSlabChallenge
	(*ChannelerSlabOneoffDungeon)(nil),                      // 183: proto.ChannelerSlabOneoffDungeon
	(*ChannelerSlabChallengeStage)(nil),                     // 184: proto.ChannelerSlabChallengeStage
	(*ChannellerSlabBuffSchemeInfo)(nil),                    // 185: proto.ChannellerSlabBuffSchemeInfo
	(*ChannellerSlabAssistInfo)(nil),                        // 186: proto.ChannellerSlabAssistInfo
	(*ChannellerSlabBuffInfo)(nil),                          // 187: proto.ChannellerSlabBuffInfo
	(*ChannellerSlabLoopDungeonInfo)(nil),                   // 188: proto.ChannellerSlabLoopDungeonInfo
	(*ChannellerSlabLoopDungeonStageInfo)(nil),              // 189: proto.ChannellerSlabLoopDungeonStageInfo
	(*ChannelerSlabActivityDetailInfo)(nil),                 // 190: proto.ChannelerSlabActivityDetailInfo
	(*ChannelerSlabStageActiveChallengeIndexNotify)(nil),    // 191: proto.ChannelerSlabStageActiveChallengeIndexNotify
	(*ChannelerSlabStageOneoffDungeonNotify)(nil),           // 192: proto.ChannelerSlabStageOneoffDungeonNotify
	(*ChannellerSlabWearBuffReq)(nil),                       // 193: proto.ChannellerSlabWearBuffReq
	(*ChannellerSlabWearBuffRsp)(nil),                       // 194: proto.ChannellerSlabWearBuffRsp
	(*ChannellerSlabTakeoffBuffReq)(nil),                    // 195: proto.ChannellerSlabTakeoffBuffReq
	(*ChannellerSlabTakeoffBuffRsp)(nil),                    // 196: proto.ChannellerSlabTakeoffBuffRsp
	(*ChannellerSlabEnterLoopDungeonReq)(nil),               // 197: proto.ChannellerSlabEnterLoopDungeonReq
	(*ChannellerSlabEnterLoopDungeonRsp)(nil),               // 198: proto.ChannellerSlabEnterLoopDungeonRsp
	(*ChannellerSlabLoopDungeonTakeFirstPassRewardReq)(nil), // 199: proto.ChannellerSlabLoopDungeonTakeFirstPassRewardReq
	(*ChannellerSlabLoopDungeonTakeFirstPassRewardRsp)(nil), // 200: proto.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp
	(*ChannellerSlabLoopDungeonTakeScoreRewardReq)(nil),     // 201: proto.ChannellerSlabLoopDungeonTakeScoreRewardReq
	(*ChannellerSlabLoopDungeonTakeScoreRewardRsp)(nil),     // 202: proto.ChannellerSlabLoopDungeonTakeScoreRewardRsp
	(*ChannellerSlabLoopDungeonChallengeInfoNotify)(nil),    // 203: proto.ChannellerSlabLoopDungeonChallengeInfoNotify
	(*ChannellerSlabLoopDungeonSelectConditionReq)(nil),     // 204: proto.ChannellerSlabLoopDungeonSelectConditionReq
	(*ChannellerSlabLoopDungeonSelectConditionRsp)(nil),     // 205: proto.ChannellerSlabLoopDungeonSelectConditionRsp
	(*ChannellerSlabLoopDungeonResultInfo)(nil),             // 206: proto.ChannellerSlabLoopDungeonResultInfo
	(*ChannellerSlabOneOffDungeonInfoReq)(nil),              // 207: proto.ChannellerSlabOneOffDungeonInfoReq
	(*ChannellerSlabOneOffDungeonInfoRsp)(nil),              // 208: proto.ChannellerSlabOneOffDungeonInfoRsp
	(*ChannellerSlabOneOffDungeonInfoNotify)(nil),           // 209: proto.ChannellerSlabOneOffDungeonInfoNotify
	(*ChannellerSlabSaveAssistInfoReq)(nil),                 // 210: proto.ChannellerSlabSaveAssistInfoReq
	(*ChannellerSlabSaveAssistInfoRsp)(nil),                 // 211: proto.ChannellerSlabSaveAssistInfoRsp
	(*MistTrialBestAvatar)(nil),                             // 212: proto.MistTrialBestAvatar
	(*MistTrialLevelData)(nil),                              // 213: proto.MistTrialLevelData
	(*MistTrialActivityDetailInfo)(nil),                     // 214: proto.MistTrialActivityDetailInfo
	(*MistTrialSelectAvatarAndEnterDungeonReq)(nil),         // 215: proto.MistTrialSelectAvatarAndEnterDungeonReq
	(*MistTrialSelectAvatarAndEnterDungeonRsp)(nil),         // 216: proto.MistTrialSelectAvatarAndEnterDungeonRsp
	(*MistTrialMissionInfo)(nil),                            // 217: proto.MistTrialMissionInfo
	(*MistTrialGetChallengeMissionReq)(nil),                 // 218: proto.MistTrialGetChallengeMissionReq
	(*MistTrialGetChallengeMissionRsp)(nil),                 // 219: proto.MistTrialGetChallengeMissionRsp
	(*MistTrialDunegonFailNotify)(nil),                      // 220: proto.MistTrialDunegonFailNotify
	(*ChannellerSlabCheckEnterLoopDungeonReq)(nil),          // 221: proto.ChannellerSlabCheckEnterLoopDungeonReq
	(*ChannellerSlabCheckEnterLoopDungeonRsp)(nil),          // 222: proto.ChannellerSlabCheckEnterLoopDungeonRsp
	(*HideAndSeekMapInfo)(nil),                              // 223: proto.HideAndSeekMapInfo
	(*HideAndSeekActivityDetailInfo)(nil),                   // 224: proto.HideAndSeekActivityDetailInfo
	(*HideAndSeekSelectSkillReq)(nil),                       // 225: proto.HideAndSeekSelectSkillReq
	(*HideAndSeekSelectSkillRsp)(nil),                       // 226: proto.HideAndSeekSelectSkillRsp
	(*ActivityTakeScoreRewardReq)(nil),                      // 227: proto.ActivityTakeScoreRewardReq
	(*ActivityTakeScoreRewardRsp)(nil),                      // 228: proto.ActivityTakeScoreRewardRsp
	(*ActivityTakeAllScoreRewardReq)(nil),                   // 229: proto.ActivityTakeAllScoreRewardReq
	(*ActivityTakeAllScoreRewardRsp)(nil),                   // 230: proto.ActivityTakeAllScoreRewardRsp
	(*HideAndSeekChooseMapReq)(nil),                         // 231: proto.HideAndSeekChooseMapReq
	(*HideAndSeekChooseMapRsp)(nil),                         // 232: proto.HideAndSeekChooseMapRsp
	(*FindHilichurlDayContentInfo)(nil),                     // 233: proto.FindHilichurlDayContentInfo
	(*FindHilichurlDetailInfo)(nil),                         // 234: proto.FindHilichurlDetailInfo
	(*CommonPlayerTipsNotify)(nil),                          // 235: proto.CommonPlayerTipsNotify
	(*FindHilichurlFinishSecondQuestNotify)(nil),            // 236: proto.FindHilichurlFinishSecondQuestNotify
	(*FindHilichurlAcceptQuestNotify)(nil),                  // 237: proto.FindHilichurlAcceptQuestNotify
	(*SummerTimeSprintBoatRecord)(nil),                      // 238: proto.SummerTimeSprintBoatRecord
	(*SummerTimeSprintBoatInfo)(nil),                        // 239: proto.SummerTimeSprintBoatInfo
	(*SummerTimeDetailInfo)(nil),                            // 240: proto.SummerTimeDetailInfo
	(*SummerTimeStageInfo)(nil),                             // 241: proto.SummerTimeStageInfo
	(*SummerTimeFloatSignalPositionNotify)(nil),             // 242: proto.SummerTimeFloatSignalPositionNotify
	(*SummerTimeFloatSignalUpdateNotify)(nil),               // 243: proto.SummerTimeFloatSignalUpdateNotify
	(*SummerTimeSprintBoatSettleNotify)(nil),                // 244: proto.SummerTimeSprintBoatSettleNotify
	(*SummerTimeSprintBoatRestartReq)(nil),                  // 245: proto.SummerTimeSprintBoatRestartReq
	(*SummerTimeSprintBoatRestartRsp)(nil),                  // 246: proto.SummerTimeSprintBoatRestartRsp
	(*BuoyantCombatDailyInfo)(nil),                          // 247: proto.BuoyantCombatDailyInfo
	(*BuoyantCombatDetailInfo)(nil),                         // 248: proto.BuoyantCombatDetailInfo
	(*StartBuoyantCombatGalleryReq)(nil),                    // 249: proto.StartBuoyantCombatGalleryReq
	(*StartBuoyantCombatGalleryRsp)(nil),                    // 250: proto.StartBuoyantCombatGalleryRsp
	(*BuoyantCombatSettleInfo)(nil),                         // 251: proto.BuoyantCombatSettleInfo
	(*BuoyantCombatSettleNotify)(nil),                       // 252: proto.BuoyantCombatSettleNotify
	(*SetLimitOptimizationNotify)(nil),                      // 253: proto.SetLimitOptimizationNotify
	(*SummerTimeDungeonInfo)(nil),                           // 254: proto.SummerTimeDungeonInfo
	(*EchoShellDetailInfo)(nil),                             // 255: proto.EchoShellDetailInfo
	(*EchoShellUpdateNotify)(nil),                           // 256: proto.EchoShellUpdateNotify
	(*EchoShellTakeRewardReq)(nil),                          // 257: proto.EchoShellTakeRewardReq
	(*EchoShellTakeRewardRsp)(nil),                          // 258: proto.EchoShellTakeRewardRsp
	(*BounceConjuringChapterInfo)(nil),                      // 259: proto.BounceConjuringChapterInfo
	(*BounceConjuringActivityDetailInfo)(nil),               // 260: proto.BounceConjuringActivityDetailInfo
	(*BounceConjuringSettleNotify)(nil),                     // 261: proto.BounceConjuringSettleNotify
	(*BlitzRushStage)(nil),                                  // 262: proto.BlitzRushStage
	(*ParkourLevelInfo)(nil),                                // 263: proto.ParkourLevelInfo
	(*BlitzRushActivityDetailInfo)(nil),                     // 264: proto.BlitzRushActivityDetailInfo
	(*BlitzRushParkourRestartReq)(nil),                      // 265: proto.BlitzRushParkourRestartReq
	(*BlitzRushParkourRestartRsp)(nil),                      // 266: proto.BlitzRushParkourRestartRsp
	(*ChessActivityDetailInfo)(nil),                         // 267: proto.ChessActivityDetailInfo
	(*EnterChessDungeonReq)(nil),                            // 268: proto.EnterChessDungeonReq
	(*EnterChessDungeonRsp)(nil),                            // 269: proto.EnterChessDungeonRsp
	(*TreasureMapHostInfoNotify)(nil),                       // 270: proto.TreasureMapHostInfoNotify
	(*SumoActivityDetailInfo)(nil),                          // 271: proto.SumoActivityDetailInfo
	(*SumoAvatarInfo)(nil),                                  // 272: proto.SumoAvatarInfo
	(*SumoTeamData)(nil),                                    // 273: proto.SumoTeamData
	(*SumoStageData)(nil),                                   // 274: proto.SumoStageData
	(*SumoSaveTeamReq)(nil),                                 // 275: proto.SumoSaveTeamReq
	(*SumoSaveTeamRsp)(nil),                                 // 276: proto.SumoSaveTeamRsp
	(*SumoSelectTeamAndEnterDungeonReq)(nil),                // 277: proto.SumoSelectTeamAndEnterDungeonReq
	(*SumoSelectTeamAndEnterDungeonRsp)(nil),                // 278: proto.SumoSelectTeamAndEnterDungeonRsp
	(*SumoDungeonSettleNotify)(nil),                         // 279: proto.SumoDungeonSettleNotify
	(*SumoDungeonAvatar)(nil),                               // 280: proto.SumoDungeonAvatar
	(*SumoDungeonTeam)(nil),                                 // 281: proto.SumoDungeonTeam
	(*SumoEnterDungeonNotify)(nil),                          // 282: proto.SumoEnterDungeonNotify
	(*SumoSwitchTeamReq)(nil),                               // 283: proto.SumoSwitchTeamReq
	(*SumoSwitchTeamRsp)(nil),                               // 284: proto.SumoSwitchTeamRsp
	(*SumoLeaveDungeonNotify)(nil),                          // 285: proto.SumoLeaveDungeonNotify
	(*SumoRestartDungeonReq)(nil),                           // 286: proto.SumoRestartDungeonReq
	(*SumoRestartDungeonRsp)(nil),                           // 287: proto.SumoRestartDungeonRsp
	(*ActivityDisableTransferPointInteractionNotify)(nil),   // 288: proto.ActivityDisableTransferPointInteractionNotify
	(*SumoSetNoSwitchPunishTimeNotify)(nil),                 // 289: proto.SumoSetNoSwitchPunishTimeNotify
	(*MoonfinTrialLevelInfo)(nil),                           // 290: proto.MoonfinTrialLevelInfo
	(*MoonfinTrialActivityDetailInfo)(nil),                  // 291: proto.MoonfinTrialActivityDetailInfo
	(*FishingGallerySettleNotify)(nil),                      // 292: proto.FishingGallerySettleNotify
	(*LunaRiteHintPoint)(nil),                               // 293: proto.LunaRiteHintPoint
	(*LunaRiteAreaInfo)(nil),                                // 294: proto.LunaRiteAreaInfo
	(*LunaRiteDetailInfo)(nil),                              // 295: proto.LunaRiteDetailInfo
	(*LunaRiteSacrificeReq)(nil),                            // 296: proto.LunaRiteSacrificeReq
	(*LunaRiteSacrificeRsp)(nil),                            // 297: proto.LunaRiteSacrificeRsp
	(*LunaRiteTakeSacrificeRewardReq)(nil),                  // 298: proto.LunaRiteTakeSacrificeRewardReq
	(*LunaRiteTakeSacrificeRewardRsp)(nil),                  // 299: proto.LunaRiteTakeSacrificeRewardRsp
	(*LunaRiteHintPointReq)(nil),                            // 300: proto.LunaRiteHintPointReq
	(*LunaRiteHintPointRsp)(nil),                            // 301: proto.LunaRiteHintPointRsp
	(*LunaRiteHintPointRemoveNotify)(nil),                   // 302: proto.LunaRiteHintPointRemoveNotify
	(*LunaRiteGroupBundleRegisterNotify)(nil),               // 303: proto.LunaRiteGroupBundleRegisterNotify
	(*LunaRiteAreaFinishNotify)(nil),                        // 304: proto.LunaRiteAreaFinishNotify
	(*PlantFlowerActivityDetailInfo)(nil),                   // 305: proto.PlantFlowerActivityDetailInfo
	(*PlantFlowerGetSeedInfoReq)(nil),                       // 306: proto.PlantFlowerGetSeedInfoReq
	(*PlantFlowerGetSeedInfoRsp)(nil),                       // 307: proto.PlantFlowerGetSeedInfoRsp
	(*PlantFlowerTakeSeedRewardReq)(nil),                    // 308: proto.PlantFlowerTakeSeedRewardReq
	(*PlantFlowerTakeSeedRewardRsp)(nil),                    // 309: proto.PlantFlowerTakeSeedRewardRsp
	(*PlantFlowerSetFlowerWishReq)(nil),                     // 310: proto.PlantFlowerSetFlowerWishReq
	(*PlantFlowerSetFlowerWishRsp)(nil),                     // 311: proto.PlantFlowerSetFlowerWishRsp
	(*PlantFlowerGetFriendFlowerWishListReq)(nil),           // 312: proto.PlantFlowerGetFriendFlowerWishListReq
	(*PlantFlowerFriendFlowerWishData)(nil),                 // 313: proto.PlantFlowerFriendFlowerWishData
	(*PlantFlowerGetFriendFlowerWishListRsp)(nil),           // 314: proto.PlantFlowerGetFriendFlowerWishListRsp
	(*PlantFlowerGiveFriendFlowerReq)(nil),                  // 315: proto.PlantFlowerGiveFriendFlowerReq
	(*PlantFlowerGiveFriendFlowerRsp)(nil),                  // 316: proto.PlantFlowerGiveFriendFlowerRsp
	(*PlantFlowerGetRecvFlowerListReq)(nil),                 // 317: proto.PlantFlowerGetRecvFlowerListReq
	(*PlantFlowerRecvFlowerData)(nil),                       // 318: proto.PlantFlowerRecvFlowerData
	(*PlantFlowerGetRecvFlowerListRsp)(nil),                 // 319: proto.PlantFlowerGetRecvFlowerListRsp
	(*PlantFlowerHaveRecvFlowerNotify)(nil),                 // 320: proto.PlantFlowerHaveRecvFlowerNotify
	(*PlantFlowerAcceptGiveFlowerReq)(nil),                  // 321: proto.PlantFlowerAcceptGiveFlowerReq
	(*PlantFlowerAcceptFlowerResultInfo)(nil),               // 322: proto.PlantFlowerAcceptFlowerResultInfo
	(*PlantFlowerAcceptGiveFlowerRsp)(nil),                  // 323: proto.PlantFlowerAcceptGiveFlowerRsp
	(*PlantFlowerAcceptAllGiveFlowerReq)(nil),               // 324: proto.PlantFlowerAcceptAllGiveFlowerReq
	(*PlantFlowerAcceptAllGiveFlowerRsp)(nil),               // 325: proto.PlantFlowerAcceptAllGiveFlowerRsp
	(*PlantFlowerGetCanGiveFriendFlowerReq)(nil),            // 326: proto.PlantFlowerGetCanGiveFriendFlowerReq
	(*PlantFlowerGetCanGiveFriendFlowerRsp)(nil),            // 327: proto.PlantFlowerGetCanGiveFriendFlowerRsp
	(*PlantFlowerEditFlowerCombinationReq)(nil),             // 328: proto.PlantFlowerEditFlowerCombinationReq
	(*PlantFlowerEditFlowerCombinationRsp)(nil),             // 329: proto.PlantFlowerEditFlowerCombinationRsp
	(*MusicGameRecord)(nil),                                 // 330: proto.MusicGameRecord
	(*MusicGameActivityDetailInfo)(nil),                     // 331: proto.MusicGameActivityDetailInfo
	(*MusicGameSettleReq)(nil),                              // 332: proto.MusicGameSettleReq
	(*MusicGameSettleRsp)(nil),                              // 333: proto.MusicGameSettleRsp
	(*MusicGameStartReq)(nil),                               // 334: proto.MusicGameStartReq
	(*MusicGameStartRsp)(nil),                               // 335: proto.MusicGameStartRsp
	(*RogueAvatarInfo)(nil),                                 // 336: proto.RogueAvatarInfo
	(*RogueShowAvatarTeamInfo)(nil),                         // 337: proto.RogueShowAvatarTeamInfo
	(*RoguelikeShikigamiRecord)(nil),                        // 338: proto.RoguelikeShikigamiRecord
	(*RogueEffectRecord)(nil),                               // 339: proto.RogueEffectRecord
	(*RoguelikeRuneRecord)(nil),                             // 340: proto.RoguelikeRuneRecord
	(*RogueStageInfo)(nil),                                  // 341: proto.RogueStageInfo
	(*RoguelikeDungeonActivityDetailInfo)(nil),              // 342: proto.RoguelikeDungeonActivityDetailInfo
	(*DoRoguelikeDungeonCardGachaReq)(nil),                  // 343: proto.DoRoguelikeDungeonCardGachaReq
	(*DoRoguelikeDungeonCardGachaRsp)(nil),                  // 344: proto.DoRoguelikeDungeonCardGachaRsp
	(*RefreshRoguelikeDungeonCardReq)(nil),                  // 345: proto.RefreshRoguelikeDungeonCardReq
	(*RefreshRoguelikeDungeonCardRsp)(nil),                  // 346: proto.RefreshRoguelikeDungeonCardRsp
	(*SelectRoguelikeDungeonCardReq)(nil),                   // 347: proto.SelectRoguelikeDungeonCardReq
	(*SelectRoguelikeDungeonCardRsp)(nil),                   // 348: proto.SelectRoguelikeDungeonCardRsp
	(*EquipRoguelikeRuneReq)(nil),                           // 349: proto.EquipRoguelikeRuneReq
	(*EquipRoguelikeRuneRsp)(nil),                           // 350: proto.EquipRoguelikeRuneRsp
	(*TriggerRoguelikeRuneReq)(nil),                         // 351: proto.TriggerRoguelikeRuneReq
	(*TriggerRoguelikeRuneRsp)(nil),                         // 352: proto.TriggerRoguelikeRuneRsp
	(*TriggerRoguelikeCurseNotify)(nil),                     // 353: proto.TriggerRoguelikeCurseNotify
	(*UpgradeRoguelikeShikigamiReq)(nil),                    // 354: proto.UpgradeRoguelikeShikigamiReq
	(*UpgradeRoguelikeShikigamiRsp)(nil),                    // 355: proto.UpgradeRoguelikeShikigamiRsp
	(*RoguelikeSelectAvatarAndEnterDungeonReq)(nil),         // 356: proto.RoguelikeSelectAvatarAndEnterDungeonReq
	(*RoguelikeSelectAvatarAndEnterDungeonRsp)(nil),         // 357: proto.RoguelikeSelectAvatarAndEnterDungeonRsp
	(*RoguelikeGiveUpReq)(nil),                              // 358: proto.RoguelikeGiveUpReq
	(*RoguelikeGiveUpRsp)(nil),                              // 359: proto.RoguelikeGiveUpRsp
	(*RoguelikeTakeStageFirstPassRewardReq)(nil),            // 360: proto.RoguelikeTakeStageFirstPassRewardReq
	(*RoguelikeTakeStageFirstPassRewardRsp)(nil),            // 361: proto.RoguelikeTakeStageFirstPassRewardRsp
	(*GiveUpRoguelikeDungeonCardReq)(nil),                   // 362: proto.GiveUpRoguelikeDungeonCardReq
	(*GiveUpRoguelikeDungeonCardRsp)(nil),                   // 363: proto.GiveUpRoguelikeDungeonCardRsp
	(*RogueCellInfo)(nil),                                   // 364: proto.RogueCellInfo
	(*EnterRoguelikeDungeonNotify)(nil),                     // 365: proto.EnterRoguelikeDungeonNotify
	(*StartRogueEliteCellChallengeReq)(nil),                 // 366: proto.StartRogueEliteCellChallengeReq
	(*StartRogueEliteCellChallengeRsp)(nil),                 // 367: proto.StartRogueEliteCellChallengeRsp
	(*StartRogueNormalCellChallengeReq)(nil),                // 368: proto.StartRogueNormalCellChallengeReq
	(*StartRogueNormalCellChallengeRsp)(nil),                // 369: proto.StartRogueNormalCellChallengeRsp
	(*RogueCellUpdateNotify)(nil),                           // 370: proto.RogueCellUpdateNotify
	(*RogueDungeonPlayerCellChangeNotify)(nil),              // 371: proto.RogueDungeonPlayerCellChangeNotify
	(*RogueHealAvatarsReq)(nil),                             // 372: proto.RogueHealAvatarsReq
	(*RogueHealAvatarsRsp)(nil),                             // 373: proto.RogueHealAvatarsRsp
	(*RogueResumeDungeonReq)(nil),                           // 374: proto.RogueResumeDungeonReq
	(*RogueResumeDungeonRsp)(nil),                           // 375: proto.RogueResumeDungeonRsp
	(*ClearRoguelikeCurseNotify)(nil),                       // 376: proto.ClearRoguelikeCurseNotify
	(*RoguelikeCardGachaNotify)(nil),                        // 377: proto.RoguelikeCardGachaNotify
	(*RogueSwitchAvatarReq)(nil),                            // 378: proto.RogueSwitchAvatarReq
	(*RogueSwitchAvatarRsp)(nil),                            // 379: proto.RogueSwitchAvatarRsp
	(*DisableRoguelikeTrapNotify)(nil),                      // 380: proto.DisableRoguelikeTrapNotify
	(*RoguelikeRuneRecordUpdateNotify)(nil),                 // 381: proto.RoguelikeRuneRecordUpdateNotify
	(*RoguelikeMistClearNotify)(nil),                        // 382: proto.RoguelikeMistClearNotify
	(*RoguelikeEffectDataNotify)(nil),                       // 383: proto.RoguelikeEffectDataNotify
	(*RoguelikeEffectViewReq)(nil),                          // 384: proto.RoguelikeEffectViewReq
	(*RoguelikeEffectViewRsp)(nil),                          // 385: proto.RoguelikeEffectViewRsp
	(*RoguelikeResourceBonusPropUpdateNotify)(nil),          // 386: proto.RoguelikeResourceBonusPropUpdateNotify
	(*RoguelikeSettleCoinInfo)(nil),                         // 387: proto.RoguelikeSettleCoinInfo
	(*RoguelikeDungeonSettleInfo)(nil),                      // 388: proto.RoguelikeDungeonSettleInfo
	(*RoguelikeRefreshCardCostUpdateNotify)(nil),            // 389: proto.RoguelikeRefreshCardCostUpdateNotify
	(*DigMarkPoint)(nil),                                    // 390: proto.DigMarkPoint
	(*DigActivityDetailInfo)(nil),                           // 391: proto.DigActivityDetailInfo
	(*DigActivityMarkPointChangeNotify)(nil),                // 392: proto.DigActivityMarkPointChangeNotify
	(*DigActivityChangeGadgetStateReq)(nil),                 // 393: proto.DigActivityChangeGadgetStateReq
	(*DigActivityChangeGadgetStateRsp)(nil),                 // 394: proto.DigActivityChangeGadgetStateRsp
	(*HachiActivityDetailInfo)(nil),                         // 395: proto.HachiActivityDetailInfo
	(*HachiStageInfo)(nil),                                  // 396: proto.HachiStageInfo
	(*WinterCampStageInfo)(nil),                             // 397: proto.WinterCampStageInfo
	(*WinterCampRaceStageInfo)(nil),                         // 398: proto.WinterCampRaceStageInfo
	(*WinterCampActivityDetailInfo)(nil),                    // 399: proto.WinterCampActivityDetailInfo
	(*WinterCampStageInfoChangeNotify)(nil),                 // 400: proto.WinterCampStageInfoChangeNotify
	(*WinterCampRaceScoreNotify)(nil),                       // 401: proto.WinterCampRaceScoreNotify
	(*WinterCampGiveFriendItemReq)(nil),                     // 402: proto.WinterCampGiveFriendItemReq
	(*WinterCampGiveFriendItemRsp)(nil),                     // 403: proto.WinterCampGiveFriendItemRsp
	(*WinterCampSetWishListReq)(nil),                        // 404: proto.WinterCampSetWishListReq
	(*WinterCampSetWishListRsp)(nil),                        // 405: proto.WinterCampSetWishListRsp
	(*WinterCampFriendWishData)(nil),                        // 406: proto.WinterCampFriendWishData
	(*WinterCampGetFriendWishListReq)(nil),                  // 407: proto.WinterCampGetFriendWishListReq
	(*WinterCampGetFriendWishListRsp)(nil),                  // 408: proto.WinterCampGetFriendWishListRsp
	(*WinterCampRecvItemNotify)(nil),                        // 409: proto.WinterCampRecvItemNotify
	(*WinterCampAcceptItemResultInfo)(nil),                  // 410: proto.WinterCampAcceptItemResultInfo
	(*WinterCampAcceptGiveItemReq)(nil),                     // 411: proto.WinterCampAcceptGiveItemReq
	(*WinterCampAcceptGiveItemRsp)(nil),                     // 412: proto.WinterCampAcceptGiveItemRsp
	(*WinterCampAcceptAllGiveItemReq)(nil),                  // 413: proto.WinterCampAcceptAllGiveItemReq
	(*WinterCampAcceptAllGiveItemRsp)(nil),                  // 414: proto.WinterCampAcceptAllGiveItemRsp
	(*WinterCampGetCanGiveFriendItemReq)(nil),               // 415: proto.WinterCampGetCanGiveFriendItemReq
	(*WinterCampGetCanGiveFriendItemRsp)(nil),               // 416: proto.WinterCampGetCanGiveFriendItemRsp
	(*WinterCampRecvItemData)(nil),                          // 417: proto.WinterCampRecvItemData
	(*WinterCampGetRecvItemListReq)(nil),                    // 418: proto.WinterCampGetRecvItemListReq
	(*WinterCampGetRecvItemListRsp)(nil),                    // 419: proto.WinterCampGetRecvItemListRsp
	(*WinterCampEditSnowmanCombinationReq)(nil),             // 420: proto.WinterCampEditSnowmanCombinationReq
	(*WinterCampEditSnowmanCombinationRsp)(nil),             // 421: proto.WinterCampEditSnowmanCombinationRsp
	(*WinterCampTriathlonSettleNotify)(nil),                 // 422: proto.WinterCampTriathlonSettleNotify
	(*WinterCampTakeExploreRewardReq)(nil),                  // 423: proto.WinterCampTakeExploreRewardReq
	(*WinterCampTakeExploreRewardRsp)(nil),                  // 424: proto.WinterCampTakeExploreRewardRsp
	(*WinterCampTakeBattleRewardReq)(nil),                   // 425: proto.WinterCampTakeBattleRewardReq
	(*WinterCampTakeBattleRewardRsp)(nil),                   // 426: proto.WinterCampTakeBattleRewardRsp
	(*WinterCampTriathlonRestartReq)(nil),                   // 427: proto.WinterCampTriathlonRestartReq
	(*WinterCampTriathlonRestartRsp)(nil),                   // 428: proto.WinterCampTriathlonRestartRsp
	(*MistTrialSettleNotify)(nil),                           // 429: proto.MistTrialSettleNotify
	(*MistTrialGetDungeonExhibitionDataReq)(nil),            // 430: proto.MistTrialGetDungeonExhibitionDataReq
	(*MistTrialGetDungeonExhibitionDataRsp)(nil),            // 431: proto.MistTrialGetDungeonExhibitionDataRsp
	(*PotionLevelData)(nil),                                 // 432: proto.PotionLevelData
	(*PotionStageData)(nil),                                 // 433: proto.PotionStageData
	(*PotionActivityDetailInfo)(nil),                        // 434: proto.PotionActivityDetailInfo
	(*PotionResetChallengeReq)(nil),                         // 435: proto.PotionResetChallengeReq
	(*PotionResetChallengeRsp)(nil),                         // 436: proto.PotionResetChallengeRsp
	(*PotionAvatarInfo)(nil),                                // 437: proto.PotionAvatarInfo
	(*PotionEnterDungeonReq)(nil),                           // 438: proto.PotionEnterDungeonReq
	(*PotionEnterDungeonRsp)(nil),                           // 439: proto.PotionEnterDungeonRsp
	(*PotionDungeonAvatar)(nil),                             // 440: proto.PotionDungeonAvatar
	(*PotionEnterDungeonNotify)(nil),                        // 441: proto.PotionEnterDungeonNotify
	(*PotionSaveDungeonResultReq)(nil),                      // 442: proto.PotionSaveDungeonResultReq
	(*PotionSaveDungeonResultRsp)(nil),                      // 443: proto.PotionSaveDungeonResultRsp
	(*PotionRestartDungeonReq)(nil),                         // 444: proto.PotionRestartDungeonReq
	(*PotionRestartDungeonRsp)(nil),                         // 445: proto.PotionRestartDungeonRsp
	(*PotionDungeonResultInfo)(nil),                         // 446: proto.PotionDungeonResultInfo
	(*TanukiTravelLevelData)(nil),                           // 447: proto.TanukiTravelLevelData
	(*TanukiTravelActivityDetailInfo)(nil),                  // 448: proto.TanukiTravelActivityDetailInfo
	(*TanukiTravelFinishGuideQuestNotify)(nil),              // 449: proto.TanukiTravelFinishGuideQuestNotify
	(*LanternProjectionLevelInfo)(nil),                      // 450: proto.LanternProjectionLevelInfo
	(*LanternProjectionInfo)(nil),                           // 451: proto.LanternProjectionInfo
	(*SalvageBundleChallengeInfo)(nil),                      // 452: proto.SalvageBundleChallengeInfo
	(*SalvageScoreChallengeInfo)(nil),                       // 453: proto.SalvageScoreChallengeInfo
	(*SalvageChallengeInfo)(nil),                            // 454: proto.SalvageChallengeInfo
	(*SalvageStageInfo)(nil),                                // 455: proto.SalvageStageInfo
	(*LanternRiteFireworksChallengeInfo)(nil),               // 456: proto.LanternRiteFireworksChallengeInfo
	(*LanternRiteFireworksStageInfo)(nil),                   // 457: proto.LanternRiteFireworksStageInfo
	(*LanternRiteFireworksInfo)(nil),                        // 458: proto.LanternRiteFireworksInfo
	(*LanternRiteActivityDetailInfo)(nil),                   // 459: proto.LanternRiteActivityDetailInfo
	(*FinishLanternProjectionReq)(nil),                      // 460: proto.FinishLanternProjectionReq
	(*FinishLanternProjectionRsp)(nil),                      // 461: proto.FinishLanternProjectionRsp
	(*ViewLanternProjectionTipsReq)(nil),                    // 462: proto.ViewLanternProjectionTipsReq
	(*ViewLanternProjectionTipsRsp)(nil),                    // 463: proto.ViewLanternProjectionTipsRsp
	(*ViewLanternProjectionLevelTipsReq)(nil),               // 464: proto.ViewLanternProjectionLevelTipsReq
	(*ViewLanternProjectionLevelTipsRsp)(nil),               // 465: proto.ViewLanternProjectionLevelTipsRsp
	(*SalvagePreventSettleInfo)(nil),                        // 466: proto.SalvagePreventSettleInfo
	(*SalvagePreventSettleNotify)(nil),                      // 467: proto.SalvagePreventSettleNotify
	(*SalvageEscortSettleInfo)(nil),                         // 468: proto.SalvageEscortSettleInfo
	(*SalvageEscortSettleNotify)(nil),                       // 469: proto.SalvageEscortSettleNotify
	(*LanternRiteTakeSkinRewardReq)(nil),                    // 470: proto.LanternRiteTakeSkinRewardReq
	(*LanternRiteTakeSkinRewardRsp)(nil),                    // 471: proto.LanternRiteTakeSkinRewardRsp
	(*SalvagePreventRestartReq)(nil),                        // 472: proto.SalvagePreventRestartReq
	(*SalvagePreventRestartRsp)(nil),                        // 473: proto.SalvagePreventRestartRsp
	(*SalvageEscortRestartReq)(nil),                         // 474: proto.SalvageEscortRestartReq
	(*SalvageEscortRestartRsp)(nil),                         // 475: proto.SalvageEscortRestartRsp
	(*LanternRiteStartFireworksReformReq)(nil),              // 476: proto.LanternRiteStartFireworksReformReq
	(*LanternRiteFireworksReformFactorInfo)(nil),            // 477: proto.LanternRiteFireworksReformFactorInfo
	(*LanternRiteFireworksReformSkillInfo)(nil),             // 478: proto.LanternRiteFireworksReformSkillInfo
	(*LanternRiteStartFireworksReformRsp)(nil),              // 479: proto.LanternRiteStartFireworksReformRsp
	(*LanternRiteDoFireworksReformReq)(nil),                 // 480: proto.LanternRiteDoFireworksReformReq
	(*LanternRiteDoFireworksReformRsp)(nil),                 // 481: proto.LanternRiteDoFireworksReformRsp
	(*LanternRiteEndFireworksReformReq)(nil),                // 482: proto.LanternRiteEndFireworksReformReq
	(*LanternRiteEndFireworksReformRsp)(nil),                // 483: proto.LanternRiteEndFireworksReformRsp
	(*UpdateSalvageBundleMarkReq)(nil),                      // 484: proto.UpdateSalvageBundleMarkReq
	(*UpdateSalvageBundleMarkRsp)(nil),                      // 485: proto.UpdateSalvageBundleMarkRsp
	(*MichiaeMatsuriStage)(nil),                             // 486: proto.MichiaeMatsuriStage
	(*MichiaeMatsuriChestPositionInfo)(nil),                 // 487: proto.MichiaeMatsuriChestPositionInfo
	(*MichiaeMatsuriChallengePositionInfo)(nil),             // 488: proto.MichiaeMatsuriChallengePositionInfo
	(*MichiaeMatsuriActivityDetailInfo)(nil),                // 489: proto.MichiaeMatsuriActivityDetailInfo
	(*MichiaeMatsuriDarkPressureLevelUpdateNotify)(nil),     // 490: proto.MichiaeMatsuriDarkPressureLevelUpdateNotify
	(*MichiaeMatsuriInteractStatueReq)(nil),                 // 491: proto.MichiaeMatsuriInteractStatueReq
	(*MichiaeMatsuriInteractStatueRsp)(nil),                 // 492: proto.MichiaeMatsuriInteractStatueRsp
	(*MichiaeMatsuriUnlockCrystalSkillReq)(nil),             // 493: proto.MichiaeMatsuriUnlockCrystalSkillReq
	(*MichiaeMatsuriUnlockCrystalSkillRsp)(nil),             // 494: proto.MichiaeMatsuriUnlockCrystalSkillRsp
	(*MichiaeMatsuriStartBossChallengeReq)(nil),             // 495: proto.MichiaeMatsuriStartBossChallengeReq
	(*MichiaeMatsuriStartBossChallengeRsp)(nil),             // 496: proto.MichiaeMatsuriStartBossChallengeRsp
	(*MichiaeMatsuriStartDarkChallengeReq)(nil),             // 497: proto.MichiaeMatsuriStartDarkChallengeReq
	(*MichiaeMatsuriStartDarkChallengeRsp)(nil),             // 498: proto.MichiaeMatsuriStartDarkChallengeRsp
	(*MichiaeMatsuriRemoveChestMarkNotify)(nil),             // 499: proto.MichiaeMatsuriRemoveChestMarkNotify
	(*MichiaeMatsuriRemoveChallengeMarkNotify)(nil),         // 500: proto.MichiaeMatsuriRemoveChallengeMarkNotify
	(*MichiaeMatsuriGainCrystalExpUpdateNotify)(nil),        // 501: proto.MichiaeMatsuriGainCrystalExpUpdateNotify
	(*BartenderTaskInfo)(nil),                               // 502: proto.BartenderTaskInfo
	(*BartenderLevelInfo)(nil),                              // 503: proto.BartenderLevelInfo
	(*BartenderActivityDetailInfo)(nil),                     // 504: proto.BartenderActivityDetailInfo
	(*BartenderCompleteOrderReq)(nil),                       // 505: proto.BartenderCompleteOrderReq
	(*BartenderCompleteOrderRsp)(nil),                       // 506: proto.BartenderCompleteOrderRsp
	(*BartenderCancelOrderReq)(nil),                         // 507: proto.BartenderCancelOrderReq
	(*BartenderCancelOrderRsp)(nil),                         // 508: proto.BartenderCancelOrderRsp
	(*BartenderGetFormulaReq)(nil),                          // 509: proto.BartenderGetFormulaReq
	(*BartenderGetFormulaRsp)(nil),                          // 510: proto.BartenderGetFormulaRsp
	(*BartenderStartLevelReq)(nil),                          // 511: proto.BartenderStartLevelReq
	(*BartenderStartLevelRsp)(nil),                          // 512: proto.BartenderStartLevelRsp
	(*BartenderCancelLevelReq)(nil),                         // 513: proto.BartenderCancelLevelReq
	(*BartenderCancelLevelRsp)(nil),                         // 514: proto.BartenderCancelLevelRsp
	(*BartenderLevelProgressNotify)(nil),                    // 515: proto.BartenderLevelProgressNotify
	(*BartenderFinishLevelReq)(nil),                         // 516: proto.BartenderFinishLevelReq
	(*BartenderFinishLevelRsp)(nil),                         // 517: proto.BartenderFinishLevelRsp
	(*OfficialCustomDungeon)(nil),                           // 518: proto.OfficialCustomDungeon
	(*UgcActivityDetailInfo)(nil),                           // 519: proto.UgcActivityDetailInfo
	(*CrystalLinkActivityDetailInfo)(nil),                   // 520: proto.CrystalLinkActivityDetailInfo
	(*CrystalLinkLevelInfo)(nil),                            // 521: proto.CrystalLinkLevelInfo
	(*CrystalLinkTeamInfo)(nil),                             // 522: proto.CrystalLinkTeamInfo
	(*CrystalLinkAvatarInfo)(nil),                           // 523: proto.CrystalLinkAvatarInfo
	(*CrystalLinkBuffInfo)(nil),                             // 524: proto.CrystalLinkBuffInfo
	(*CrystalLinkEnterDungeonReq)(nil),                      // 525: proto.CrystalLinkEnterDungeonReq
	(*CrystalLinkEnterDungeonRsp)(nil),                      // 526: proto.CrystalLinkEnterDungeonRsp
	(*CrystalLinkDungeonAvatarInfo)(nil),                    // 527: proto.CrystalLinkDungeonAvatarInfo
	(*CrystalLinkDungeonInfoNotify)(nil),                    // 528: proto.CrystalLinkDungeonInfoNotify
	(*CrystalLinkRestartDungeonReq)(nil),                    // 529: proto.CrystalLinkRestartDungeonReq
	(*CrystalLinkRestartDungeonRsp)(nil),                    // 530: proto.CrystalLinkRestartDungeonRsp
	(*QuickOpenActivityReq)(nil),                            // 531: proto.QuickOpenActivityReq
	(*QuickOpenActivityRsp)(nil),                            // 532: proto.QuickOpenActivityRsp
	(*IrodoriChessMapData)(nil),                             // 533: proto.IrodoriChessMapData
	(*IrodoriChessLevelData)(nil),                           // 534: proto.IrodoriChessLevelData
	(*IrodoriChessData)(nil),                                // 535: proto.IrodoriChessData
	(*IrodoriFlowerData)(nil),                               // 536: proto.IrodoriFlowerData
	(*IrodoriPoetryThemeData)(nil),                          // 537: proto.IrodoriPoetryThemeData
	(*IrodoriPoetryData)(nil),                               // 538: proto.IrodoriPoetryData
	(*IrodoriMasterLevelDetailInfo)(nil),                    // 539: proto.IrodoriMasterLevelDetailInfo
	(*IrodoriMasterLevelInfo)(nil),                          // 540: proto.IrodoriMasterLevelInfo
	(*IrodoriActivityDetailInfo)(nil),                       // 541: proto.IrodoriActivityDetailInfo
	(*IrodoriEditFlowerCombinationReq)(nil),                 // 542: proto.IrodoriEditFlowerCombinationReq
	(*IrodoriEditFlowerCombinationRsp)(nil),                 // 543: proto.IrodoriEditFlowerCombinationRsp
	(*IrodoriScanEntityReq)(nil),                            // 544: proto.IrodoriScanEntityReq
	(*IrodoriScanEntityRsp)(nil),                            // 545: proto.IrodoriScanEntityRsp
	(*IrodoriFillPoetryReq)(nil),                            // 546: proto.IrodoriFillPoetryReq
	(*IrodoriFillPoetryRsp)(nil),                            // 547: proto.IrodoriFillPoetryRsp
	(*IrodoriChessEquipCardReq)(nil),                        // 548: proto.IrodoriChessEquipCardReq
	(*IrodoriChessEquipCardRsp)(nil),                        // 549: proto.IrodoriChessEquipCardRsp
	(*IrodoriChessUnequipCardReq)(nil),                      // 550: proto.IrodoriChessUnequipCardReq
	(*IrodoriChessUnequipCardRsp)(nil),                      // 551: proto.IrodoriChessUnequipCardRsp
	(*EnterIrodoriChessDungeonReq)(nil),                     // 552: proto.EnterIrodoriChessDungeonReq
	(*EnterIrodoriChessDungeonRsp)(nil),                     // 553: proto.EnterIrodoriChessDungeonRsp
	(*IrodoriMasterStartGalleryReq)(nil),                    // 554: proto.IrodoriMasterStartGalleryReq
	(*IrodoriMasterStartGalleryRsp)(nil),                    // 555: proto.IrodoriMasterStartGalleryRsp
	(*IrodoriMasterGalleryCgEndNotify)(nil),                 // 556: proto.IrodoriMasterGalleryCgEndNotify
	(*IrodoriMasterGallerySettleNotify)(nil),                // 557: proto.IrodoriMasterGallerySettleNotify
	(*PhotoPosData)(nil),                                    // 558: proto.PhotoPosData
	(*PhotoActivityDetailInfo)(nil),                         // 559: proto.PhotoActivityDetailInfo
	(*PhotoActivityFinishReq)(nil),                          // 560: proto.PhotoActivityFinishReq
	(*PhotoActivityFinishRsp)(nil),                          // 561: proto.PhotoActivityFinishRsp
	(*PhotoActivityClientViewReq)(nil),                      // 562: proto.PhotoActivityClientViewReq
	(*PhotoActivityClientViewRsp)(nil),                      // 563: proto.PhotoActivityClientViewRsp
	(*SpiceStageData)(nil),                                  // 564: proto.SpiceStageData
	(*SpiceActivityDetailInfo)(nil),                         // 565: proto.SpiceActivityDetailInfo
	(*SpiceActivityFinishMakeSpiceReq)(nil),                 // 566: proto.SpiceActivityFinishMakeSpiceReq
	(*SpiceActivityFinishMakeSpiceRsp)(nil),                 // 567: proto.SpiceActivityFinishMakeSpiceRsp
	(*SpiceActivityProcessFoodReq)(nil),                     // 568: proto.SpiceActivityProcessFoodReq
	(*SpiceActivityProcessFoodRsp)(nil),                     // 569: proto.SpiceActivityProcessFoodRsp
	(*SpiceActivityGivingRecordNotify)(nil),                 // 570: proto.SpiceActivityGivingRecordNotify
	(*GachaStageData)(nil),                                  // 571: proto.GachaStageData
	(*GachaActivityDetailInfo)(nil),                         // 572: proto.GachaActivityDetailInfo
	(*GachaActivityPercentNotify)(nil),                      // 573: proto.GachaActivityPercentNotify
	(*GachaActivityUpdateElemNotify)(nil),                   // 574: proto.GachaActivityUpdateElemNotify
	(*GachaActivityCreateRobotReq)(nil),                     // 575: proto.GachaActivityCreateRobotReq
	(*GachaActivityCreateRobotRsp)(nil),                     // 576: proto.GachaActivityCreateRobotRsp
	(*GachaActivityTakeRewardReq)(nil),                      // 577: proto.GachaActivityTakeRewardReq
	(*GachaActivityTakeRewardRsp)(nil),                      // 578: proto.GachaActivityTakeRewardRsp
	(*GachaActivityResetReq)(nil),                           // 579: proto.GachaActivityResetReq
	(*GachaActivityResetRsp)(nil),                           // 580: proto.GachaActivityResetRsp
	(*GachaActivityNextStageReq)(nil),                       // 581: proto.GachaActivityNextStageReq
	(*GachaActivityNextStageRsp)(nil),                       // 582: proto.GachaActivityNextStageRsp
	(*ActivityGiveFriendGiftReq)(nil),                       // 583: proto.ActivityGiveFriendGiftReq
	(*ActivityGiveFriendGiftRsp)(nil),                       // 584: proto.ActivityGiveFriendGiftRsp
	(*ActivityRecvGiftData)(nil),                            // 585: proto.ActivityRecvGiftData
	(*ActivityGetRecvGiftListReq)(nil),                      // 586: proto.ActivityGetRecvGiftListReq
	(*ActivityGetRecvGiftListRsp)(nil),                      // 587: proto.ActivityGetRecvGiftListRsp
	(*ActivityHaveRecvGiftNotify)(nil),                      // 588: proto.ActivityHaveRecvGiftNotify
	(*ActivityAcceptGiftResultInfo)(nil),                    // 589: proto.ActivityAcceptGiftResultInfo
	(*ActivityAcceptGiveGiftReq)(nil),                       // 590: proto.ActivityAcceptGiveGiftReq
	(*ActivityAcceptGiveGiftRsp)(nil),                       // 591: proto.ActivityAcceptGiveGiftRsp
	(*ActivityAcceptAllGiveGiftReq)(nil),                    // 592: proto.ActivityAcceptAllGiveGiftReq
	(*ActivityAcceptAllGiveGiftRsp)(nil),                    // 593: proto.ActivityAcceptAllGiveGiftRsp
	(*ActivityGetCanGiveFriendGiftReq)(nil),                 // 594: proto.ActivityGetCanGiveFriendGiftReq
	(*ActivityGetCanGiveFriendGiftRsp)(nil),                 // 595: proto.ActivityGetCanGiveFriendGiftRsp
	(*ActivitySetGiftWishReq)(nil),                          // 596: proto.ActivitySetGiftWishReq
	(*ActivitySetGiftWishRsp)(nil),                          // 597: proto.ActivitySetGiftWishRsp
	(*ActivityFriendGiftWishData)(nil),                      // 598: proto.ActivityFriendGiftWishData
	(*ActivityGetFriendGiftWishListReq)(nil),                // 599: proto.ActivityGetFriendGiftWishListReq
	(*ActivityGetFriendGiftWishListRsp)(nil),                // 600: proto.ActivityGetFriendGiftWishListRsp
	(*LuminanceStoneChallengeActivityDetailInfo)(nil),       // 601: proto.LuminanceStoneChallengeActivityDetailInfo
	(*LuminanceStoneChallengeSettleInfo)(nil),               // 602: proto.LuminanceStoneChallengeSettleInfo
	(*LuminanceStoneChallengeSettleNotify)(nil),             // 603: proto.LuminanceStoneChallengeSettleNotify
	(*RogueDiaryDungeonRecord)(nil),                         // 604: proto.RogueDiaryDungeonRecord
	(*RogueDiaryStageInfo)(nil),                             // 605: proto.RogueDiaryStageInfo
	(*RogueDiaryProgress)(nil),                              // 606: proto.RogueDiaryProgress
	(*RogueDiaryActivityDetailInfo)(nil),                    // 607: proto.RogueDiaryActivityDetailInfo
	(*RogueDiaryAvatar)(nil),                                // 608: proto.RogueDiaryAvatar
	(*RogueDiaryRoomInfo)(nil),                              // 609: proto.RogueDiaryRoomInfo
	(*StartRogueDiaryPlayReq)(nil),                          // 610: proto.StartRogueDiaryPlayReq
	(*StartRogueDiaryPlayRsp)(nil),                          // 611: proto.StartRogueDiaryPlayRsp
	(*ResetRogueDiaryPlayReq)(nil),                          // 612: proto.ResetRogueDiaryPlayReq
	(*ResetRogueDiaryPlayRsp)(nil),                          // 613: proto.ResetRogueDiaryPlayRsp
	(*EnterRogueDiaryDungeonReq)(nil),                       // 614: proto.EnterRogueDiaryDungeonReq
	(*EnterRogueDiaryDungeonRsp)(nil),                       // 615: proto.EnterRogueDiaryDungeonRsp
	(*ResumeRogueDiaryDungeonReq)(nil),                      // 616: proto.ResumeRogueDiaryDungeonReq
	(*ResumeRogueDiaryDungeonRsp)(nil),                      // 617: proto.ResumeRogueDiaryDungeonRsp
	(*RogueDiaryDungeonInfoNotify)(nil),                     // 618: proto.RogueDiaryDungeonInfoNotify
	(*RogueDiaryDungeonSettleNotify)(nil),                   // 619: proto.RogueDiaryDungeonSettleNotify
	(*StartRogueDiaryRoomReq)(nil),                          // 620: proto.StartRogueDiaryRoomReq
	(*StartRogueDiaryRoomRsp)(nil),                          // 621: proto.StartRogueDiaryRoomRsp
	(*RogueDiaryTiredAvatarNotify)(nil),                     // 622: proto.RogueDiaryTiredAvatarNotify
	(*ReserveRogueDiaryAvatarReq)(nil),                      // 623: proto.ReserveRogueDiaryAvatarReq
	(*ReserveRogueDiaryAvatarRsp)(nil),                      // 624: proto.ReserveRogueDiaryAvatarRsp
	(*GetRogueDairyRepairInfoReq)(nil),                      // 625: proto.GetRogueDairyRepairInfoReq
	(*GetRogueDairyRepairInfoRsp)(nil),                      // 626: proto.GetRogueDairyRepairInfoRsp
	(*RefreshRogueDiaryCardReq)(nil),                        // 627: proto.RefreshRogueDiaryCardReq
	(*RefreshRogueDiaryCardRsp)(nil),                        // 628: proto.RefreshRogueDiaryCardRsp
	(*RogueFinishRepairReq)(nil),                            // 629: proto.RogueFinishRepairReq
	(*RogueFinishRepairRsp)(nil),                            // 630: proto.RogueFinishRepairRsp
	(*TryInterruptRogueDiaryDungeonReq)(nil),                // 631: proto.TryInterruptRogueDiaryDungeonReq
	(*TryInterruptRogueDiaryDungeonRsp)(nil),                // 632: proto.TryInterruptRogueDiaryDungeonRsp
	(*RogueDiaryRepairInfoNotify)(nil),                      // 633: proto.RogueDiaryRepairInfoNotify
	(*RetryCurRogueDiaryDungeonReq)(nil),                    // 634: proto.RetryCurRogueDiaryDungeonReq
	(*RetryCurRogueDiaryDungeonRsp)(nil),                    // 635: proto.RetryCurRogueDiaryDungeonRsp
	(*RogueDiaryReviveAvatarReq)(nil),                       // 636: proto.RogueDiaryReviveAvatarReq
	(*RogueDiaryReviveAvatarRsp)(nil),                       // 637: proto.RogueDiaryReviveAvatarRsp
	(*TryEnterNextRogueDiaryDungeonReq)(nil),                // 638: proto.TryEnterNextRogueDiaryDungeonReq
	(*TryEnterNextRogueDiaryDungeonRsp)(nil),                // 639: proto.TryEnterNextRogueDiaryDungeonRsp
	(*RogueDiaryCoinAddNotify)(nil),                         // 640: proto.RogueDiaryCoinAddNotify
	(*SummerTimeV2DetailInfo)(nil),                          // 641: proto.SummerTimeV2DetailInfo
	(*SummerTimeV2DungeonStageInfo)(nil),                    // 642: proto.SummerTimeV2DungeonStageInfo
	(*SummerTimeV2BoatStageInfo)(nil),                       // 643: proto.SummerTimeV2BoatStageInfo
	(*SummerTimeV2BoatSettleNotify)(nil),                    // 644: proto.SummerTimeV2BoatSettleNotify
	(*ActivityPushTipsData)(nil),                            // 645: proto.ActivityPushTipsData
	(*ActivityPushTipsInfoNotify)(nil),                      // 646: proto.ActivityPushTipsInfoNotify
	(*ActivityReadPushTipsReq)(nil),                         // 647: proto.ActivityReadPushTipsReq
	(*ActivityReadPushTipsRsp)(nil),                         // 648: proto.ActivityReadPushTipsRsp
	(*SummerTimeV2RestartBoatGalleryReq)(nil),               // 649: proto.SummerTimeV2RestartBoatGalleryReq
	(*SummerTimeV2RestartBoatGalleryRsp)(nil),               // 650: proto.SummerTimeV2RestartBoatGalleryRsp
	(*SummerTimeV2RestartDungeonReq)(nil),                   // 651: proto.SummerTimeV2RestartDungeonReq
	(*SummerTimeV2RestartDungeonRsp)(nil),                   // 652: proto.SummerTimeV2RestartDungeonRsp
	(*IslandPartyStageData)(nil),                            // 653: proto.IslandPartyStageData
	(*IslandPartyDetailInfo)(nil),                           // 654: proto.IslandPartyDetailInfo
	(*IslandPartySettleNotify)(nil),                         // 655: proto.IslandPartySettleNotify
	(*GearLevelData)(nil),                                   // 656: proto.GearLevelData
	(*JigsawPictureData)(nil),                               // 657: proto.JigsawPictureData
	(*GearActivityDetailInfo)(nil),                          // 658: proto.GearActivityDetailInfo
	(*GearActivityStartPlayGearReq)(nil),                    // 659: proto.GearActivityStartPlayGearReq
	(*GearActivityStartPlayGearRsp)(nil),                    // 660: proto.GearActivityStartPlayGearRsp
	(*GearColumnInfo)(nil),                                  // 661: proto.GearColumnInfo
	(*GearActivityFinishPlayGearReq)(nil),                   // 662: proto.GearActivityFinishPlayGearReq
	(*GearActivityFinishPlayGearRsp)(nil),                   // 663: proto.GearActivityFinishPlayGearRsp
	(*GearActivityStartPlayPictureReq)(nil),                 // 664: proto.GearActivityStartPlayPictureReq
	(*GearActivityStartPlayPictureRsp)(nil),                 // 665: proto.GearActivityStartPlayPictureRsp
	(*GearActivityFinishPlayPictureReq)(nil),                // 666: proto.GearActivityFinishPlayPictureReq
	(*GearActivityFinishPlayPictureRsp)(nil),                // 667: proto.GearActivityFinishPlayPictureRsp
	(*GravenInnocencePhotoStageInfo)(nil),                   // 668: proto.GravenInnocencePhotoStageInfo
	(*GravenInnocencePhotoObjectInfo)(nil),                  // 669: proto.GravenInnocencePhotoObjectInfo
	(*GravenInnocencePhotoInfo)(nil),                        // 670: proto.GravenInnocencePhotoInfo
	(*GravenInnocenceCampStageInfo)(nil),                    // 671: proto.GravenInnocenceCampStageInfo
	(*GravenInnocenceCampInfo)(nil),                         // 672: proto.GravenInnocenceCampInfo
	(*GravenInnocenceRaceLevelInfo)(nil),                    // 673: proto.GravenInnocenceRaceLevelInfo
	(*GravenInnocenceRaceInfo)(nil),                         // 674: proto.GravenInnocenceRaceInfo
	(*GravenInnocenceCarveStageInfo)(nil),                   // 675: proto.GravenInnocenceCarveStageInfo
	(*GravenInnocenceCarveInfo)(nil),                        // 676: proto.GravenInnocenceCarveInfo
	(*GravenInnocenceDetailInfo)(nil),                       // 677: proto.GravenInnocenceDetailInfo
	(*GravenInnocenceRaceSettleNotify)(nil),                 // 678: proto.GravenInnocenceRaceSettleNotify
	(*GravenInnocenceRaceRestartReq)(nil),                   // 679: proto.GravenInnocenceRaceRestartReq
	(*GravenInnocenceRaceRestartRsp)(nil),                   // 680: proto.GravenInnocenceRaceRestartRsp
	(*GravenInnocenceEditCarveCombinationReq)(nil),          // 681: proto.GravenInnocenceEditCarveCombinationReq
	(*GravenInnocenceEditCarveCombinationRsp)(nil),          // 682: proto.GravenInnocenceEditCarveCombinationRsp
	(*GravenInnocencePhotoFinishReq)(nil),                   // 683: proto.GravenInnocencePhotoFinishReq
	(*GravenInnocencePhotoFinishRsp)(nil),                   // 684: proto.GravenInnocencePhotoFinishRsp
	(*GravenInnocencePhotoReminderNotify)(nil),              // 685: proto.GravenInnocencePhotoReminderNotify
	(*InstableSprayTeamInfo)(nil),                           // 686: proto.InstableSprayTeamInfo
	(*InstableSprayStageInfo)(nil),                          // 687: proto.InstableSprayStageInfo
	(*InstableSprayDetailInfo)(nil),                         // 688: proto.InstableSprayDetailInfo
	(*InstableSprayAvatarInfo)(nil),                         // 689: proto.InstableSprayAvatarInfo
	(*InstableSprayEnterDungeonReq)(nil),                    // 690: proto.InstableSprayEnterDungeonReq
	(*InstableSprayEnterDungeonRsp)(nil),                    // 691: proto.InstableSprayEnterDungeonRsp
	(*InstableSpraySwitchTeamReq)(nil),                      // 692: proto.InstableSpraySwitchTeamReq
	(*InstableSpraySwitchTeamRsp)(nil),                      // 693: proto.InstableSpraySwitchTeamRsp
	(*InstableSprayLevelFinishNotify)(nil),                  // 694: proto.InstableSprayLevelFinishNotify
	(*InstableSprayRestartDungeonReq)(nil),                  // 695: proto.InstableSprayRestartDungeonReq
	(*InstableSprayRestartDungeonRsp)(nil),                  // 696: proto.InstableSprayRestartDungeonRsp
	(*MuqadasPotionLevelData)(nil),                          // 697: proto.MuqadasPotionLevelData
	(*MuqadasPotionActivityDetailInfo)(nil),                 // 698: proto.MuqadasPotionActivityDetailInfo
	(*MuqadasPotionActivityEnterDungeonReq)(nil),            // 699: proto.MuqadasPotionActivityEnterDungeonReq
	(*MuqadasPotionActivityEnterDungeonRsp)(nil),            // 700: proto.MuqadasPotionActivityEnterDungeonRsp
	(*MuqadasPotionDungeonSettleNotify)(nil),                // 701: proto.MuqadasPotionDungeonSettleNotify
	(*MuqadasPotionRestartDungeonReq)(nil),                  // 702: proto.MuqadasPotionRestartDungeonReq
	(*MuqadasPotionRestartDungeonRsp)(nil),                  // 703: proto.MuqadasPotionRestartDungeonRsp
	(*MuqadasPotionCaptureWeaknessReq)(nil),                 // 704: proto.MuqadasPotionCaptureWeaknessReq
	(*MuqadasPotionCaptureWeaknessRsp)(nil),                 // 705: proto.MuqadasPotionCaptureWeaknessRsp
	(*TreasureSeelieRegionData)(nil),                        // 706: proto.TreasureSeelieRegionData
	(*TreasureSeelieActivityDetailInfo)(nil),                // 707: proto.TreasureSeelieActivityDetailInfo
	(*TreasureSeelieCollectOrbsNotify)(nil),                 // 708: proto.TreasureSeelieCollectOrbsNotify
	(*RockBoardExploreStageData)(nil),                       // 709: proto.RockBoardExploreStageData
	(*RockBoardExploreDetailInfo)(nil),                      // 710: proto.RockBoardExploreDetailInfo
	(*VintageHuntingStageData)(nil),                         // 711: proto.VintageHuntingStageData
	(*VintagePresentLevelData)(nil),                         // 712: proto.VintagePresentLevelData
	(*VintagePresentStageData)(nil),                         // 713: proto.VintagePresentStageData
	(*VintageBoothUsedItemData)(nil),                        // 714: proto.VintageBoothUsedItemData
	(*VintageCampChallengeLevelData)(nil),                   // 715: proto.VintageCampChallengeLevelData
	(*VintageCampChallengeStageData)(nil),                   // 716: proto.VintageCampChallengeStageData
	(*VintageMarketTraderInfo)(nil),                         // 717: proto.VintageMarketTraderInfo
	(*VintageMarketDealInfo)(nil),                           // 718: proto.VintageMarketDealInfo
	(*VintageMarketStoreInfo)(nil),                          // 719: proto.VintageMarketStoreInfo
	(*VintageMarketStoreOpInfo)(nil),                        // 720: proto.VintageMarketStoreOpInfo
	(*VintageMarketInfo)(nil),                               // 721: proto.VintageMarketInfo
	(*VintageActivityDetailInfo)(nil),                       // 722: proto.VintageActivityDetailInfo
	(*VintageMarketDeliverItemReq)(nil),                     // 723: proto.VintageMarketDeliverItemReq
	(*VintageMarketDeliverItemRsp)(nil),                     // 724: proto.VintageMarketDeliverItemRsp
	(*VintageHuntingFirstStageSettleInfo)(nil),              // 725: proto.VintageHuntingFirstStageSettleInfo
	(*VintageHuntingSecondStageSettleInfo)(nil),             // 726: proto.VintageHuntingSecondStageSettleInfo
	(*VintageHuntingThirdStageSettleInfo)(nil),              // 727: proto.VintageHuntingThirdStageSettleInfo
	(*SceneGalleryVintageHuntingSettleNotify)(nil),          // 728: proto.SceneGalleryVintageHuntingSettleNotify
	(*VintagePresentFinishNoify)(nil),                       // 729: proto.VintagePresentFinishNoify
	(*VintageDecorateBoothReq)(nil),                         // 730: proto.VintageDecorateBoothReq
	(*VintageDecorateBoothRsp)(nil),                         // 731: proto.VintageDecorateBoothRsp
	(*VintageHuntingStartGalleryReq)(nil),                   // 732: proto.VintageHuntingStartGalleryReq
	(*VintageHuntingStartGalleryRsp)(nil),                   // 733: proto.VintageHuntingStartGalleryRsp
	(*VintageCampGroupBundleRegisterNotify)(nil),            // 734: proto.VintageCampGroupBundleRegisterNotify
	(*VintageCampStageFinishNotify)(nil),                    // 735: proto.VintageCampStageFinishNotify
	(*VintageMarketStartStorePlayReq)(nil),                  // 736: proto.VintageMarketStartStorePlayReq
	(*VintageMarketStartStorePlayRsp)(nil),                  // 737: proto.VintageMarketStartStorePlayRsp
	(*VintageMarketFinishStorePlayReq)(nil),                 // 738: proto.VintageMarketFinishStorePlayReq
	(*VintageMarketFinishStorePlayRsp)(nil),                 // 739: proto.VintageMarketFinishStorePlayRsp
	(*VintagePresentFinishNotify)(nil),                      // 740: proto.VintagePresentFinishNotify
	(*VintageMarketStoreUnlockSlotReq)(nil),                 // 741: proto.VintageMarketStoreUnlockSlotReq
	(*VintageMarketStoreUnlockSlotRsp)(nil),                 // 742: proto.VintageMarketStoreUnlockSlotRsp
	(*VintageMarketStoreChooseStrategyReq)(nil),             // 743: proto.VintageMarketStoreChooseStrategyReq
	(*VintageMarketStoreChooseStrategyRsp)(nil),             // 744: proto.VintageMarketStoreChooseStrategyRsp
	(*VintageMarketStoreViewStrategyReq)(nil),               // 745: proto.VintageMarketStoreViewStrategyReq
	(*VintageMarketStoreViewStrategyRsp)(nil),               // 746: proto.VintageMarketStoreViewStrategyRsp
	(*VintageMarketDividendFinishNotify)(nil),               // 747: proto.VintageMarketDividendFinishNotify
	(*VintageMarketNpcEventFinishNotify)(nil),               // 748: proto.VintageMarketNpcEventFinishNotify
	(*WindFieldDetailInfo)(nil),                             // 749: proto.WindFieldDetailInfo
	(*WindFieldStageInfo)(nil),                              // 750: proto.WindFieldStageInfo
	(*WindFieldRestartDungeonReq)(nil),                      // 751: proto.WindFieldRestartDungeonReq
	(*WindFieldRestartDungeonRsp)(nil),                      // 752: proto.WindFieldRestartDungeonRsp
	(*FungusDetail)(nil),                                    // 753: proto.FungusDetail
	(*FungusPlotStageDetail)(nil),                           // 754: proto.FungusPlotStageDetail
	(*FungusTrainingDungeonDetail)(nil),                     // 755: proto.FungusTrainingDungeonDetail
	(*FungusFighterMonsterDetail)(nil),                      // 756: proto.FungusFighterMonsterDetail
	(*FungusTrainingMonsterPreviewDetail)(nil),              // 757: proto.FungusTrainingMonsterPreviewDetail
	(*FungusTrainingPoolPreviewDetail)(nil),                 // 758: proto.FungusTrainingPoolPreviewDetail
	(*FungusTrainingProgressDetail)(nil),                    // 759: proto.FungusTrainingProgressDetail
	(*FungusFighterDetailInfo)(nil),                         // 760: proto.FungusFighterDetailInfo
	(*EnterFungusFighterPlotDungeonReq)(nil),                // 761: proto.EnterFungusFighterPlotDungeonReq
	(*EnterFungusFighterPlotDungeonRsp)(nil),                // 762: proto.EnterFungusFighterPlotDungeonRsp
	(*FungusFighterPlotInfoNotify)(nil),                     // 763: proto.FungusFighterPlotInfoNotify
	(*FungusCultivateReq)(nil),                              // 764: proto.FungusCultivateReq
	(*FungusCultivateRsp)(nil),                              // 765: proto.FungusCultivateRsp
	(*FungusRenameReq)(nil),                                 // 766: proto.FungusRenameReq
	(*FungusRenameRsp)(nil),                                 // 767: proto.FungusRenameRsp
	(*EnterFungusFighterTrainingDungeonReq)(nil),            // 768: proto.EnterFungusFighterTrainingDungeonReq
	(*EnterFungusFighterTrainingDungeonRsp)(nil),            // 769: proto.EnterFungusFighterTrainingDungeonRsp
	(*FungusFighterRuntimeDataNotify)(nil),                  // 770: proto.FungusFighterRuntimeDataNotify
	(*FungusFighterTrainingSelectFungusReq)(nil),            // 771: proto.FungusFighterTrainingSelectFungusReq
	(*FungusFighterTrainingSelectFungusRsp)(nil),            // 772: proto.FungusFighterTrainingSelectFungusRsp
	(*FungusFighterTrainingGallerySettleNotify)(nil),        // 773: proto.FungusFighterTrainingGallerySettleNotify
	(*FungusFighterClearTrainingRuntimeDataReq)(nil),        // 774: proto.FungusFighterClearTrainingRuntimeDataReq
	(*FungusFighterClearTrainingRuntimeDataRsp)(nil),        // 775: proto.FungusFighterClearTrainingRuntimeDataRsp
	(*FungusFighterUseBackupFungusReq)(nil),                 // 776: proto.FungusFighterUseBackupFungusReq
	(*FungusFighterUseBackupFungusRsp)(nil),                 // 777: proto.FungusFighterUseBackupFungusRsp
	(*FungusFighterRestartTraningDungeonReq)(nil),           // 778: proto.FungusFighterRestartTraningDungeonReq
	(*FungusFighterRestartTraningDungeonRsp)(nil),           // 779: proto.FungusFighterRestartTraningDungeonRsp
	(*CharAmusementStageData)(nil),                          // 780: proto.CharAmusementStageData
	(*CharAmusementDetailInfo)(nil),                         // 781: proto.CharAmusementDetailInfo
	(*CharAmusementSettleNotify)(nil),                       // 782: proto.CharAmusementSettleNotify
	(*EffigyChallengeV2LevelData)(nil),                      // 783: proto.EffigyChallengeV2LevelData
	(*EffigyChallengeV2DetailInfo)(nil),                     // 784: proto.EffigyChallengeV2DetailInfo
	(*EffigyChallengeV2EnterDungeonReq)(nil),                // 785: proto.EffigyChallengeV2EnterDungeonReq
	(*EffigyChallengeV2EnterDungeonRsp)(nil),                // 786: proto.EffigyChallengeV2EnterDungeonRsp
	(*EffigyChallengeV2RestartDungeonReq)(nil),              // 787: proto.EffigyChallengeV2RestartDungeonReq
	(*EffigyChallengeV2RestartDungeonRsp)(nil),              // 788: proto.EffigyChallengeV2RestartDungeonRsp
	(*EffigyChallengeV2ChooseSkillReq)(nil),                 // 789: proto.EffigyChallengeV2ChooseSkillReq
	(*EffigyChallengeV2ChooseSkillRsp)(nil),                 // 790: proto.EffigyChallengeV2ChooseSkillRsp
	(*EffigyChallengeV2DungeonInfoNotify)(nil),              // 791: proto.EffigyChallengeV2DungeonInfoNotify
	(*CoinCollectTeamInfoData)(nil),                         // 792: proto.CoinCollectTeamInfoData
	(*CoinCollectLevelData)(nil),                            // 793: proto.CoinCollectLevelData
	(*CoinCollectDetailInfo)(nil),                           // 794: proto.CoinCollectDetailInfo
	(*CoinCollectChooseSkillReq)(nil),                       // 795: proto.CoinCollectChooseSkillReq
	(*CoinCollectChooseSkillRsp)(nil),                       // 796: proto.CoinCollectChooseSkillRsp
	(*RestartCoinCollectPlaySingleModeReq)(nil),             // 797: proto.RestartCoinCollectPlaySingleModeReq
	(*RestartCoinCollectPlaySingleModeRsp)(nil),             // 798: proto.RestartCoinCollectPlaySingleModeRsp
	(*EndCoinCollectPlaySingleModeReq)(nil),                 // 799: proto.EndCoinCollectPlaySingleModeReq
	(*EndCoinCollectPlaySingleModeRsp)(nil),                 // 800: proto.EndCoinCollectPlaySingleModeRsp
	(*CoinCollectPrepareReq)(nil),                           // 801: proto.CoinCollectPrepareReq
	(*CoinCollectPrepareRsp)(nil),                           // 802: proto.CoinCollectPrepareRsp
	(*CoinCollectInterruptPlayReq)(nil),                     // 803: proto.CoinCollectInterruptPlayReq
	(*CoinCollectInterruptPlayRsp)(nil),                     // 804: proto.CoinCollectInterruptPlayRsp
	(*CoinCollectCheckDoubleStartPlayReq)(nil),              // 805: proto.CoinCollectCheckDoubleStartPlayReq
	(*CoinCollectCheckDoubleStartPlayRsp)(nil),              // 806: proto.CoinCollectCheckDoubleStartPlayRsp
	(*BrickBreakerLevelInfo)(nil),                           // 807: proto.BrickBreakerLevelInfo
	(*BrickBreakerActivityStageInfo)(nil),                   // 808: proto.BrickBreakerActivityStageInfo
	(*BrickBreakerDetailInfo)(nil),                          // 809: proto.BrickBreakerDetailInfo
	(*SingleStartBrickBreakerReq)(nil),                      // 810: proto.SingleStartBrickBreakerReq
	(*SingleStartBrickBreakerRsp)(nil),                      // 811: proto.SingleStartBrickBreakerRsp
	(*SingleRestartBrickBreakerReq)(nil),                    // 812: proto.SingleRestartBrickBreakerReq
	(*SingleRestartBrickBreakerRsp)(nil),                    // 813: proto.SingleRestartBrickBreakerRsp
	(*BrickBreakerSettleNotify)(nil),                        // 814: proto.BrickBreakerSettleNotify
	(*BrickBreakerTwiceStartReq)(nil),                       // 815: proto.BrickBreakerTwiceStartReq
	(*BrickBreakerTwiceStartRsp)(nil),                       // 816: proto.BrickBreakerTwiceStartRsp
	(*BrickBreakerQuitReq)(nil),                             // 817: proto.BrickBreakerQuitReq
	(*BrickBreakerQuitRsp)(nil),                             // 818: proto.BrickBreakerQuitRsp
	(*SeaLampV3RaceLevelInfo)(nil),                          // 819: proto.SeaLampV3RaceLevelInfo
	(*SeaLampV3RaceInfo)(nil),                               // 820: proto.SeaLampV3RaceInfo
	(*SeaLampV3ShadowLevelInfo)(nil),                        // 821: proto.SeaLampV3ShadowLevelInfo
	(*SeaLampV3ShadowStageInfo)(nil),                        // 822: proto.SeaLampV3ShadowStageInfo
	(*SeaLampV3ShadowInfo)(nil),                             // 823: proto.SeaLampV3ShadowInfo
	(*SeaLampV3CampStageInfo)(nil),                          // 824: proto.SeaLampV3CampStageInfo
	(*SeaLampV3CampInfo)(nil),                               // 825: proto.SeaLampV3CampInfo
	(*SeaLampV3DetailInfo)(nil),                             // 826: proto.SeaLampV3DetailInfo
	(*LanV3BoatGameStartSingleReq)(nil),                     // 827: proto.LanV3BoatGameStartSingleReq
	(*LanV3BoatGameStartSingleRsp)(nil),                     // 828: proto.LanV3BoatGameStartSingleRsp
	(*LanV3BoatGameTransferFinishNotify)(nil),               // 829: proto.LanV3BoatGameTransferFinishNotify
	(*LanV3RaceSettleNotify)(nil),                           // 830: proto.LanV3RaceSettleNotify
	(*LanV3RaceRestartReq)(nil),                             // 831: proto.LanV3RaceRestartReq
	(*LanV3RaceRestartRsp)(nil),                             // 832: proto.LanV3RaceRestartRsp
	(*LanV3BoatInterruptSettleStageReq)(nil),                // 833: proto.LanV3BoatInterruptSettleStageReq
	(*LanV3BoatInterruptSettleStageRsp)(nil),                // 834: proto.LanV3BoatInterruptSettleStageRsp
	(*LanV3ShadowFinishLevelReq)(nil),                       // 835: proto.LanV3ShadowFinishLevelReq
	(*LanV3ShadowFinishLevelRsp)(nil),                       // 836: proto.LanV3ShadowFinishLevelRsp
	(*DuelHeartLevelDifficultyInfo)(nil),                    // 837: proto.DuelHeartLevelDifficultyInfo
	(*DuelHeartLevelInfo)(nil),                              // 838: proto.DuelHeartLevelInfo
	(*DuelHeartDetailInfo)(nil),                             // 839: proto.DuelHeartDetailInfo
	(*DuelHeartEnterDungeonReq)(nil),                        // 840: proto.DuelHeartEnterDungeonReq
	(*DuelHeartEnterDungeonRsp)(nil),                        // 841: proto.DuelHeartEnterDungeonRsp
	(*DuelHeartRestartDungeonReq)(nil),                      // 842: proto.DuelHeartRestartDungeonReq
	(*DuelHeartRestartDungeonRsp)(nil),                      // 843: proto.DuelHeartRestartDungeonRsp
	(*DuelHeartSelectDifficultyReq)(nil),                    // 844: proto.DuelHeartSelectDifficultyReq
	(*DuelHeartSelectDifficultyRsp)(nil),                    // 845: proto.DuelHeartSelectDifficultyRsp
	(*DuelHeartSettleNotify)(nil),                           // 846: proto.DuelHeartSettleNotify
	(*DuelHeartCgEndNotify)(nil),                            // 847: proto.DuelHeartCgEndNotify
	(*TeamChainStageData)(nil),                              // 848: proto.TeamChainStageData
	(*TeamChainDetailInfo)(nil),                             // 849: proto.TeamChainDetailInfo
	(*TeamChainChooseAvatarInfo)(nil),                       // 850: proto.TeamChainChooseAvatarInfo
	(*TeamChainChooseTeamInfo)(nil),                         // 851: proto.TeamChainChooseTeamInfo
	(*TeamChainEnterDungeonReq)(nil),                        // 852: proto.TeamChainEnterDungeonReq
	(*TeamChainEnterDungeonRsp)(nil),                        // 853: proto.TeamChainEnterDungeonRsp
	(*TeamChainRestartDungeonReq)(nil),                      // 854: proto.TeamChainRestartDungeonReq
	(*TeamChainRestartDungeonRsp)(nil),                      // 855: proto.TeamChainRestartDungeonRsp
	(*TeamChainDungeonInfoNotify)(nil),                      // 856: proto.TeamChainDungeonInfoNotify
	(*TeamChainTakeCostumeRewardReq)(nil),                   // 857: proto.TeamChainTakeCostumeRewardReq
	(*TeamChainTakeCostumeRewardRsp)(nil),                   // 858: proto.TeamChainTakeCostumeRewardRsp
	(*ElectroherculesBattleLevelInfo)(nil),                  // 859: proto.ElectroherculesBattleLevelInfo
	(*ElectroherculesBattleStageInfo)(nil),                  // 860: proto.ElectroherculesBattleStageInfo
	(*ElectroherculesBattleDetailInfo)(nil),                 // 861: proto.ElectroherculesBattleDetailInfo
	(*ElectroherculesBattleSelectDifficultyReq)(nil),        // 862: proto.ElectroherculesBattleSelectDifficultyReq
	(*ElectroherculesBattleSelectDifficultyRsp)(nil),        // 863: proto.ElectroherculesBattleSelectDifficultyRsp
	(*ElectroherculesBattleSettleNotify)(nil),               // 864: proto.ElectroherculesBattleSettleNotify
	nil, // 865: proto.ActivityInfo.ActivityCoinMapEntry
	nil, // 866: proto.ActivityInfo.WishGiftNumMapEntry
	nil, // 867: proto.ActivityCoinInfoNotify.ActivityCoinMapEntry
	nil, // 868: proto.SalesmanActivityDetailInfo.SelectedRewardIdMapEntry
	nil, // 869: proto.TreasureMapBonusChallengeInfo.FragmentMapEntry
	nil, // 870: proto.BlessingActivityDetailInfo.PicNumMapEntry
	nil, // 871: proto.BlessingRedeemRewardRsp.PicNumMapEntry
	nil, // 872: proto.BlessingFriendPicData.PicNumMapEntry
	nil, // 873: proto.BlessingAcceptAllGivePicRsp.AcceptPicNumMapEntry
	nil, // 874: proto.WaterSpiritActivityDetailInfo.SearchTimeMapEntry
	nil, // 875: proto.FleurFairMusicGameInfo.MusicRecordMapEntry
	nil, // 876: proto.FleurFairActivityDetailInfo.MinigameInfoMapEntry
	nil, // 877: proto.FleurFairActivityDetailInfo.DungeonSectionInfoMapEntry
	nil, // 878: proto.FleurFairBalloonSettleNotify.SettleInfoMapEntry
	nil, // 879: proto.FleurFairFallSettleNotify.SettleInfoMapEntry
	nil, // 880: proto.ArenaChallengeActivityDetailInfo.LevelOpenTimeMapEntry
	nil, // 881: proto.ChannellerSlabBuffSchemeInfo.SlotMapEntry
	(*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex)(nil), // 882: proto.MistTrialSelectAvatarAndEnterDungeonReq.SelectAvatarIndex
	nil,                                     // 883: proto.SummerTimeDetailInfo.StageMapEntry
	nil,                                     // 884: proto.BounceConjuringSettleNotify.SettleInfoMapEntry
	nil,                                     // 885: proto.SumoActivityDetailInfo.SumoStageMapEntry
	nil,                                     // 886: proto.MoonfinTrialActivityDetailInfo.LevelInfoMapEntry
	nil,                                     // 887: proto.PlantFlowerActivityDetailInfo.WishFlowerNumMapEntry
	nil,                                     // 888: proto.PlantFlowerActivityDetailInfo.UsedFlowerNumMapEntry
	nil,                                     // 889: proto.PlantFlowerSetFlowerWishReq.FlowerNumMapEntry
	nil,                                     // 890: proto.PlantFlowerFriendFlowerWishData.FlowerNumMapEntry
	nil,                                     // 891: proto.PlantFlowerGiveFriendFlowerReq.FlowerNumMapEntry
	nil,                                     // 892: proto.PlantFlowerRecvFlowerData.FlowerNumMapEntry
	nil,                                     // 893: proto.PlantFlowerAcceptFlowerResultInfo.UnacceptFlowerNumMapEntry
	nil,                                     // 894: proto.PlantFlowerAcceptFlowerResultInfo.AcceptFlowerNumMapEntry
	nil,                                     // 895: proto.PlantFlowerGetCanGiveFriendFlowerRsp.FlowerNumMapEntry
	nil,                                     // 896: proto.MusicGameActivityDetailInfo.MusicGameRecordMapEntry
	nil,                                     // 897: proto.EnterRoguelikeDungeonNotify.CellInfoMapEntry
	nil,                                     // 898: proto.ClearRoguelikeCurseNotify.ClearCurseMapEntry
	nil,                                     // 899: proto.RoguelikeDungeonSettleInfo.FinishedChallengeCellNumMapEntry
	nil,                                     // 900: proto.HachiActivityDetailInfo.StageMapEntry
	nil,                                     // 901: proto.MistTrialSettleNotify.ExhibitionListDataResultMapEntry
	nil,                                     // 902: proto.MistTrialSettleNotify.ExhibitionListDataRecordMapEntry
	nil,                                     // 903: proto.GachaStageData.TargetNumMapEntry
	nil,                                     // 904: proto.GachaActivityDetailInfo.HaveRewardRobotNumMapEntry
	nil,                                     // 905: proto.GachaActivityDetailInfo.RobotNumMapEntry
	nil,                                     // 906: proto.GachaActivityPercentNotify.TargetNumMapEntry
	nil,                                     // 907: proto.GachaActivityTakeRewardReq.RobotNumMapEntry
	nil,                                     // 908: proto.GachaActivityTakeRewardRsp.RobotNumMapEntry
	nil,                                     // 909: proto.ActivityGiveFriendGiftReq.GiftNumMapEntry
	nil,                                     // 910: proto.ActivityRecvGiftData.GiftNumMapEntry
	nil,                                     // 911: proto.ActivityAcceptGiftResultInfo.UnacceptGiftNumMapEntry
	nil,                                     // 912: proto.ActivityAcceptGiftResultInfo.AcceptGiftNumMapEntry
	nil,                                     // 913: proto.ActivityGetCanGiveFriendGiftRsp.GiftNumMapEntry
	nil,                                     // 914: proto.ActivitySetGiftWishReq.GiftNumMapEntry
	nil,                                     // 915: proto.ActivityFriendGiftWishData.GiftNumMapEntry
	nil,                                     // 916: proto.VintagePresentStageData.PresentLevelMapEntry
	nil,                                     // 917: proto.VintageCampChallengeStageData.CampLevelMapEntry
	nil,                                     // 918: proto.VintageMarketDealInfo.TraderItemInfoMapEntry
	nil,                                     // 919: proto.VintageMarketInfo.BargainInfoMapEntry
	nil,                                     // 920: proto.VintageActivityDetailInfo.HuntingStageMapEntry
	nil,                                     // 921: proto.VintageActivityDetailInfo.CampStageMapEntry
	nil,                                     // 922: proto.VintageActivityDetailInfo.PresentStageMapEntry
	nil,                                     // 923: proto.VintageHuntingSecondStageSettleInfo.AnimalCountMapEntry
	nil,                                     // 924: proto.VintageMarketFinishStorePlayRsp.StoreIncomeMapEntry
	nil,                                     // 925: proto.BrickBreakerDetailInfo.SkillInfoMapEntry
	(*Uint32Pair)(nil),                      // 926: proto.Uint32Pair
	(*Vector)(nil),                          // 927: proto.Vector
	(*ItemParam)(nil),                       // 928: proto.ItemParam
	(SalesmanStatusType)(0),                 // 929: proto.SalesmanStatusType
	(*ProfilePicture)(nil),                  // 930: proto.ProfilePicture
	(AsterLittleStageState)(0),              // 931: proto.AsterLittleStageState
	(ExpeditionState)(0),                    // 932: proto.ExpeditionState
	(*BalloonSettleInfo)(nil),               // 933: proto.BalloonSettleInfo
	(*FallSettleInfo)(nil),                  // 934: proto.FallSettleInfo
	(AvatarType)(0),                         // 935: proto.AvatarType
	(*BuoyantCombatGallerySettleInfo)(nil),  // 936: proto.BuoyantCombatGallerySettleInfo
	(*FishingGallerySettleInfo)(nil),        // 937: proto.FishingGallerySettleInfo
	(LunaRiteHintPointType)(0),              // 938: proto.LunaRiteHintPointType
	(LunaRiteHintStatusType)(0),             // 939: proto.LunaRiteHintStatusType
	(*CustomGadgetTreeInfo)(nil),            // 940: proto.CustomGadgetTreeInfo
	(*UgcMusicBriefInfo)(nil),               // 941: proto.UgcMusicBriefInfo
	(ClientInputType)(0),                    // 942: proto.ClientInputType
	(*SalvagePreventGallerySettleInfo)(nil), // 943: proto.SalvagePreventGallerySettleInfo
	(*SalvageEscortGallerySettleInfo)(nil),  // 944: proto.SalvageEscortGallerySettleInfo
	(*IrodoriChessEntranceDetailInfo)(nil),  // 945: proto.IrodoriChessEntranceDetailInfo
	(*IrodoriMasterGallerySettleInfo)(nil),  // 946: proto.IrodoriMasterGallerySettleInfo
	(*LuminanceStoneChallengeGallerySettleInfo)(nil), // 947: proto.LuminanceStoneChallengeGallerySettleInfo
	(*ActivityDungeonAvatar)(nil),                    // 948: proto.ActivityDungeonAvatar
	(*SummerTimeV2BoatGallerySettleInfo)(nil),        // 949: proto.SummerTimeV2BoatGallerySettleInfo
	(GalleryStopReason)(0),                           // 950: proto.GalleryStopReason
	(*IslandPartyGallerySettleInfo)(nil),             // 951: proto.IslandPartyGallerySettleInfo
	(*ExhibitionDisplayInfo)(nil),                    // 952: proto.ExhibitionDisplayInfo
	(*BounceConjuringGallerySettleInfo)(nil),         // 953: proto.BounceConjuringGallerySettleInfo
}
var file_cmd_cmd_activity_proto_depIdxs = []int32{
	6,   // 0: proto.GetActivityScheduleRsp.activity_schedule_list:type_name -> proto.ActivityScheduleInfo
	865, // 1: proto.ActivityInfo.activity_coin_map:type_name -> proto.ActivityInfo.ActivityCoinMapEntry
	866, // 2: proto.ActivityInfo.wish_gift_num_map:type_name -> proto.ActivityInfo.WishGiftNumMapEntry
	645, // 3: proto.ActivityInfo.activity_push_tips_data_list:type_name -> proto.ActivityPushTipsData
	14,  // 4: proto.ActivityInfo.watcher_info_list:type_name -> proto.ActivityWatcherInfo
	21,  // 5: proto.ActivityInfo.sam_lamp_info:type_name -> proto.SeaLampActivityDetailInfo
	61,  // 6: proto.ActivityInfo.crucible_info:type_name -> proto.CrucibleActivityDetailInfo
	42,  // 7: proto.ActivityInfo.salesman_info:type_name -> proto.SalesmanActivityDetailInfo
	53,  // 8: proto.ActivityInfo.trial_avatar_info:type_name -> proto.TrialAvatarActivityDetailInfo
	62,  // 9: proto.ActivityInfo.delivery_info:type_name -> proto.DeliveryActivityDetailInfo
	71,  // 10: proto.ActivityInfo.aster_info:type_name -> proto.AsterActivityDetailInfo
	82,  // 11: proto.ActivityInfo.flight_info:type_name -> proto.FlightActivityDetailInfo
	87,  // 12: proto.ActivityInfo.dragon_spine_info:type_name -> proto.DragonSpineActivityDetailInfo
	95,  // 13: proto.ActivityInfo.effigy_info:type_name -> proto.EffigyActivityDetailInfo
	111, // 14: proto.ActivityInfo.treasure_map_info:type_name -> proto.TreasureMapActivityDetailInfo
	119, // 15: proto.ActivityInfo.blessing_info:type_name -> proto.BlessingActivityDetailInfo
	31,  // 16: proto.ActivityInfo.sea_lamp_info:type_name -> proto.SeaLampActivityInfo
	139, // 17: proto.ActivityInfo.expedition_info:type_name -> proto.ExpeditionActivityDetailInfo
	173, // 18: proto.ActivityInfo.arena_challenge_info:type_name -> proto.ArenaChallengeActivityDetailInfo
	161, // 19: proto.ActivityInfo.fleur_fair_info:type_name -> proto.FleurFairActivityDetailInfo
	153, // 20: proto.ActivityInfo.water_spirit_info:type_name -> proto.WaterSpiritActivityDetailInfo
	190, // 21: proto.ActivityInfo.challneler_slab_info:type_name -> proto.ChannelerSlabActivityDetailInfo
	214, // 22: proto.ActivityInfo.mist_trial_activity_info:type_name -> proto.MistTrialActivityDetailInfo
	224, // 23: proto.ActivityInfo.hide_and_seek_info:type_name -> proto.HideAndSeekActivityDetailInfo
	234, // 24: proto.ActivityInfo.find_hilichurl_info:type_name -> proto.FindHilichurlDetailInfo
	240, // 25: proto.ActivityInfo.summer_time_info:type_name -> proto.SummerTimeDetailInfo
	248, // 26: proto.ActivityInfo.buoyant_combat_info:type_name -> proto.BuoyantCombatDetailInfo
	255, // 27: proto.ActivityInfo.echo_shell_info:type_name -> proto.EchoShellDetailInfo
	260, // 28: proto.ActivityInfo.bounce_conjuring_info:type_name -> proto.BounceConjuringActivityDetailInfo
	264, // 29: proto.ActivityInfo.blitz_rush_info:type_name -> proto.BlitzRushActivityDetailInfo
	267, // 30: proto.ActivityInfo.chess_info:type_name -> proto.ChessActivityDetailInfo
	271, // 31: proto.ActivityInfo.sumo_info:type_name -> proto.SumoActivityDetailInfo
	291, // 32: proto.ActivityInfo.moonfin_trial_info:type_name -> proto.MoonfinTrialActivityDetailInfo
	295, // 33: proto.ActivityInfo.luna_rite_info:type_name -> proto.LunaRiteDetailInfo
	305, // 34: proto.ActivityInfo.plant_flower_info:type_name -> proto.PlantFlowerActivityDetailInfo
	331, // 35: proto.ActivityInfo.music_game_info:type_name -> proto.MusicGameActivityDetailInfo
	342, // 36: proto.ActivityInfo.roguelike_dungoen_info:type_name -> proto.RoguelikeDungeonActivityDetailInfo
	391, // 37: proto.ActivityInfo.dig_info:type_name -> proto.DigActivityDetailInfo
	395, // 38: proto.ActivityInfo.hachi_info:type_name -> proto.HachiActivityDetailInfo
	399, // 39: proto.ActivityInfo.winter_camp_info:type_name -> proto.WinterCampActivityDetailInfo
	434, // 40: proto.ActivityInfo.potion_info:type_name -> proto.PotionActivityDetailInfo
	448, // 41: proto.ActivityInfo.tanuki_travel_activity_info:type_name -> proto.TanukiTravelActivityDetailInfo
	459, // 42: proto.ActivityInfo.lantern_rite_activity_info:type_name -> proto.LanternRiteActivityDetailInfo
	489, // 43: proto.ActivityInfo.michiae_matsuri_info:type_name -> proto.MichiaeMatsuriActivityDetailInfo
	504, // 44: proto.ActivityInfo.bartender_info:type_name -> proto.BartenderActivityDetailInfo
	519, // 45: proto.ActivityInfo.ugc_info:type_name -> proto.UgcActivityDetailInfo
	520, // 46: proto.ActivityInfo.crystal_link_info:type_name -> proto.CrystalLinkActivityDetailInfo
	541, // 47: proto.ActivityInfo.irodori_info:type_name -> proto.IrodoriActivityDetailInfo
	559, // 48: proto.ActivityInfo.photo_info:type_name -> proto.PhotoActivityDetailInfo
	565, // 49: proto.ActivityInfo.spice_info:type_name -> proto.SpiceActivityDetailInfo
	572, // 50: proto.ActivityInfo.gacha_info:type_name -> proto.GachaActivityDetailInfo
	601, // 51: proto.ActivityInfo.luminance_stone_challenge_info:type_name -> proto.LuminanceStoneChallengeActivityDetailInfo
	607, // 52: proto.ActivityInfo.rogue_diary_info:type_name -> proto.RogueDiaryActivityDetailInfo
	641, // 53: proto.ActivityInfo.summer_time_v2_info:type_name -> proto.SummerTimeV2DetailInfo
	654, // 54: proto.ActivityInfo.island_party_info:type_name -> proto.IslandPartyDetailInfo
	658, // 55: proto.ActivityInfo.gear_info:type_name -> proto.GearActivityDetailInfo
	677, // 56: proto.ActivityInfo.graven_innocence_info:type_name -> proto.GravenInnocenceDetailInfo
	688, // 57: proto.ActivityInfo.instable_spray_info:type_name -> proto.InstableSprayDetailInfo
	698, // 58: proto.ActivityInfo.muqadas_potion_info:type_name -> proto.MuqadasPotionActivityDetailInfo
	707, // 59: proto.ActivityInfo.treasure_seelie_info:type_name -> proto.TreasureSeelieActivityDetailInfo
	710, // 60: proto.ActivityInfo.rock_board_explore_info:type_name -> proto.RockBoardExploreDetailInfo
	722, // 61: proto.ActivityInfo.vintage_info:type_name -> proto.VintageActivityDetailInfo
	749, // 62: proto.ActivityInfo.wind_field_info:type_name -> proto.WindFieldDetailInfo
	760, // 63: proto.ActivityInfo.fungus_fighter_info:type_name -> proto.FungusFighterDetailInfo
	781, // 64: proto.ActivityInfo.char_amusement_info:type_name -> proto.CharAmusementDetailInfo
	784, // 65: proto.ActivityInfo.effigy_challenge_info:type_name -> proto.EffigyChallengeV2DetailInfo
	794, // 66: proto.ActivityInfo.coin_collect_info:type_name -> proto.CoinCollectDetailInfo
	809, // 67: proto.ActivityInfo.brick_breaker_info:type_name -> proto.BrickBreakerDetailInfo
	839, // 68: proto.ActivityInfo.duel_heart_info:type_name -> proto.DuelHeartDetailInfo
	826, // 69: proto.ActivityInfo.sea_lamp_v3_info:type_name -> proto.SeaLampV3DetailInfo
	849, // 70: proto.ActivityInfo.team_chain_info:type_name -> proto.TeamChainDetailInfo
	861, // 71: proto.ActivityInfo.electrohercules_battle_info:type_name -> proto.ElectroherculesBattleDetailInfo
	9,   // 72: proto.GetActivityInfoRsp.activity_info_list:type_name -> proto.ActivityInfo
	926, // 73: proto.GetActivityInfoRsp.disable_transfer_point_interaction_list:type_name -> proto.Uint32Pair
	9,   // 74: proto.ActivityInfoNotify.activity_info:type_name -> proto.ActivityInfo
	6,   // 75: proto.ActivityScheduleInfoNotify.activity_schedule_list:type_name -> proto.ActivityScheduleInfo
	14,  // 76: proto.ActivityUpdateWatcherNotify.watcher_info:type_name -> proto.ActivityWatcherInfo
	867, // 77: proto.ActivityCoinInfoNotify.activity_coin_map:type_name -> proto.ActivityCoinInfoNotify.ActivityCoinMapEntry
	927, // 78: proto.SeaLampFlyLampReq.pos:type_name -> proto.Vector
	928, // 79: proto.SeaLampContributeItemReq.item_list:type_name -> proto.ItemParam
	30,  // 80: proto.SeaLampActivityInfo.section_info_list:type_name -> proto.SeaLampSectionInfo
	927, // 81: proto.SeaLampFlyLampNotify.pos:type_name -> proto.Vector
	35,  // 82: proto.ServerAnnounceNotify.announce_data_list:type_name -> proto.AnnounceData
	929, // 83: proto.SalesmanActivityDetailInfo.status:type_name -> proto.SalesmanStatusType
	868, // 84: proto.SalesmanActivityDetailInfo.selected_reward_id_map:type_name -> proto.SalesmanActivityDetailInfo.SelectedRewardIdMapEntry
	926, // 85: proto.ActivityCondStateChangeNotify.disable_transfer_point_interaction_list:type_name -> proto.Uint32Pair
	52,  // 86: proto.TrialAvatarActivityDetailInfo.reward_info_list:type_name -> proto.TrialAvatarActivityRewardDetailInfo
	930, // 87: proto.CrucibleBattleUidInfo.profile_picture:type_name -> proto.ProfilePicture
	60,  // 88: proto.CrucibleActivityDetailInfo.uid_info_list:type_name -> proto.CrucibleBattleUidInfo
	927, // 89: proto.CrucibleActivityDetailInfo.pos:type_name -> proto.Vector
	931, // 90: proto.AsterLittleDetailInfo.stage_state:type_name -> proto.AsterLittleStageState
	927, // 91: proto.AsterMidCampInfo.pos:type_name -> proto.Vector
	67,  // 92: proto.AsterMidDetailInfo.camp_list:type_name -> proto.AsterMidCampInfo
	66,  // 93: proto.AsterActivityDetailInfo.aster_little:type_name -> proto.AsterLittleDetailInfo
	69,  // 94: proto.AsterActivityDetailInfo.aster_large:type_name -> proto.AsterLargeDetailInfo
	68,  // 95: proto.AsterActivityDetailInfo.aster_mid:type_name -> proto.AsterMidDetailInfo
	70,  // 96: proto.AsterActivityDetailInfo.aster_progress:type_name -> proto.AsterProgressDetailInfo
	70,  // 97: proto.AsterProgressInfoNotify.info:type_name -> proto.AsterProgressDetailInfo
	66,  // 98: proto.AsterLittleInfoNotify.info:type_name -> proto.AsterLittleDetailInfo
	68,  // 99: proto.AsterMidInfoNotify.info:type_name -> proto.AsterMidDetailInfo
	69,  // 100: proto.AsterLargeInfoNotify.info:type_name -> proto.AsterLargeDetailInfo
	81,  // 101: proto.FlightActivityDetailInfo.daily_record_list:type_name -> proto.FlightDailyRecord
	67,  // 102: proto.AsterMidCampInfoNotify.camp_list:type_name -> proto.AsterMidCampInfo
	88,  // 103: proto.DragonSpineActivityDetailInfo.chapter_info_list:type_name -> proto.DragonSpineChapterInfo
	94,  // 104: proto.EffigyActivityDetailInfo.daily_info_list:type_name -> proto.EffigyDailyInfo
	927, // 105: proto.TreasureMapRegionInfo.region_center_pos:type_name -> proto.Vector
	869, // 106: proto.TreasureMapBonusChallengeInfo.fragment_map:type_name -> proto.TreasureMapBonusChallengeInfo.FragmentMapEntry
	109, // 107: proto.TreasureMapActivityDetailInfo.region_info_list:type_name -> proto.TreasureMapRegionInfo
	110, // 108: proto.TreasureMapActivityDetailInfo.bonus_challenge_list:type_name -> proto.TreasureMapBonusChallengeInfo
	109, // 109: proto.TreasureMapRegionInfoNotify.region_info:type_name -> proto.TreasureMapRegionInfo
	110, // 110: proto.TreasureMapBonusChallengeNotify.info:type_name -> proto.TreasureMapBonusChallengeInfo
	870, // 111: proto.BlessingActivityDetailInfo.pic_num_map:type_name -> proto.BlessingActivityDetailInfo.PicNumMapEntry
	871, // 112: proto.BlessingRedeemRewardRsp.pic_num_map:type_name -> proto.BlessingRedeemRewardRsp.PicNumMapEntry
	872, // 113: proto.BlessingFriendPicData.pic_num_map:type_name -> proto.BlessingFriendPicData.PicNumMapEntry
	930, // 114: proto.BlessingFriendPicData.profile_picture:type_name -> proto.ProfilePicture
	930, // 115: proto.BlessingRecvPicRecord.profile_picture:type_name -> proto.ProfilePicture
	124, // 116: proto.BlessingGetFriendPicListRsp.friend_pic_data_list:type_name -> proto.BlessingFriendPicData
	125, // 117: proto.BlessingGetAllRecvPicRecordListRsp.recv_pic_record_list:type_name -> proto.BlessingRecvPicRecord
	873, // 118: proto.BlessingAcceptAllGivePicRsp.accept_pic_num_map:type_name -> proto.BlessingAcceptAllGivePicRsp.AcceptPicNumMapEntry
	932, // 119: proto.ExpeditionPathInfo.state:type_name -> proto.ExpeditionState
	138, // 120: proto.ExpeditionActivityDetailInfo.challenge_info_list:type_name -> proto.ExpeditionChallengeInfo
	137, // 121: proto.ExpeditionActivityDetailInfo.path_info_list:type_name -> proto.ExpeditionPathInfo
	146, // 122: proto.GetExpeditionAssistInfoListRsp.assist_info_list:type_name -> proto.ExpeditionAssistInfo
	874, // 123: proto.WaterSpiritActivityDetailInfo.search_time_map:type_name -> proto.WaterSpiritActivityDetailInfo.SearchTimeMapEntry
	875, // 124: proto.FleurFairMusicGameInfo.music_record_map:type_name -> proto.FleurFairMusicGameInfo.MusicRecordMapEntry
	155, // 125: proto.FleurFairMinigameInfo.balloon_info:type_name -> proto.FleurFairBalloonInfo
	156, // 126: proto.FleurFairMinigameInfo.fall_info:type_name -> proto.FleurFairFallInfo
	158, // 127: proto.FleurFairMinigameInfo.music_info:type_name -> proto.FleurFairMusicGameInfo
	154, // 128: proto.FleurFairActivityDetailInfo.chapter_info_list:type_name -> proto.FleurFairChapterInfo
	876, // 129: proto.FleurFairActivityDetailInfo.minigame_info_map:type_name -> proto.FleurFairActivityDetailInfo.MinigameInfoMapEntry
	877, // 130: proto.FleurFairActivityDetailInfo.dungeon_section_info_map:type_name -> proto.FleurFairActivityDetailInfo.DungeonSectionInfoMapEntry
	933, // 131: proto.FleurFairBalloonSettleInfo.settle_info:type_name -> proto.BalloonSettleInfo
	934, // 132: proto.FleurFairFallSettleInfo.settle_info:type_name -> proto.FallSettleInfo
	878, // 133: proto.FleurFairBalloonSettleNotify.settle_info_map:type_name -> proto.FleurFairBalloonSettleNotify.SettleInfoMapEntry
	879, // 134: proto.FleurFairFallSettleNotify.settle_info_map:type_name -> proto.FleurFairFallSettleNotify.SettleInfoMapEntry
	880, // 135: proto.ArenaChallengeActivityDetailInfo.level_open_time_map:type_name -> proto.ArenaChallengeActivityDetailInfo.LevelOpenTimeMapEntry
	172, // 136: proto.ArenaChallengeActivityDetailInfo.level_list:type_name -> proto.ArenaChallengeMonsterLevel
	176, // 137: proto.ArenaChallengeFinishNotify.child_challenge_list:type_name -> proto.ArenaChallengeChildChallengeInfo
	928, // 138: proto.ActivityTakeWatcherRewardBatchRsp.item_list:type_name -> proto.ItemParam
	927, // 139: proto.ChannelerSlabCamp.pos:type_name -> proto.Vector
	181, // 140: proto.ChannelerSlabChallenge.camp_list:type_name -> proto.ChannelerSlabCamp
	182, // 141: proto.ChannelerSlabChallengeStage.challenge_list:type_name -> proto.ChannelerSlabChallenge
	183, // 142: proto.ChannelerSlabChallengeStage.dungeon_info:type_name -> proto.ChannelerSlabOneoffDungeon
	881, // 143: proto.ChannellerSlabBuffSchemeInfo.slot_map:type_name -> proto.ChannellerSlabBuffSchemeInfo.SlotMapEntry
	185, // 144: proto.ChannellerSlabBuffInfo.mp_buff_scheme_info:type_name -> proto.ChannellerSlabBuffSchemeInfo
	185, // 145: proto.ChannellerSlabBuffInfo.single_buff_scheme_info:type_name -> proto.ChannellerSlabBuffSchemeInfo
	186, // 146: proto.ChannellerSlabBuffInfo.assist_info_list:type_name -> proto.ChannellerSlabAssistInfo
	188, // 147: proto.ChannellerSlabLoopDungeonStageInfo.dungeon_info_list:type_name -> proto.ChannellerSlabLoopDungeonInfo
	187, // 148: proto.ChannelerSlabActivityDetailInfo.buff_info:type_name -> proto.ChannellerSlabBuffInfo
	189, // 149: proto.ChannelerSlabActivityDetailInfo.loop_dungeon_stage_info:type_name -> proto.ChannellerSlabLoopDungeonStageInfo
	184, // 150: proto.ChannelerSlabActivityDetailInfo.stage_list:type_name -> proto.ChannelerSlabChallengeStage
	186, // 151: proto.ChannellerSlabSaveAssistInfoReq.assist_info_list:type_name -> proto.ChannellerSlabAssistInfo
	186, // 152: proto.ChannellerSlabSaveAssistInfoRsp.assist_info_list:type_name -> proto.ChannellerSlabAssistInfo
	935, // 153: proto.MistTrialBestAvatar.avatar_type:type_name -> proto.AvatarType
	212, // 154: proto.MistTrialLevelData.best_hit_avatar:type_name -> proto.MistTrialBestAvatar
	212, // 155: proto.MistTrialLevelData.best_avatar_list:type_name -> proto.MistTrialBestAvatar
	213, // 156: proto.MistTrialActivityDetailInfo.trial_level_data_list:type_name -> proto.MistTrialLevelData
	882, // 157: proto.MistTrialSelectAvatarAndEnterDungeonReq.select_avatar_index_list:type_name -> proto.MistTrialSelectAvatarAndEnterDungeonReq.SelectAvatarIndex
	217, // 158: proto.MistTrialGetChallengeMissionRsp.mission_info_list:type_name -> proto.MistTrialMissionInfo
	223, // 159: proto.HideAndSeekActivityDetailInfo.open_map_info_list:type_name -> proto.HideAndSeekMapInfo
	233, // 160: proto.FindHilichurlDetailInfo.day_content_info_list:type_name -> proto.FindHilichurlDayContentInfo
	238, // 161: proto.SummerTimeSprintBoatInfo.record_list:type_name -> proto.SummerTimeSprintBoatRecord
	883, // 162: proto.SummerTimeDetailInfo.stage_map:type_name -> proto.SummerTimeDetailInfo.StageMapEntry
	239, // 163: proto.SummerTimeDetailInfo.sprint_boat_info:type_name -> proto.SummerTimeSprintBoatInfo
	927, // 164: proto.SummerTimeFloatSignalPositionNotify.position:type_name -> proto.Vector
	927, // 165: proto.SummerTimeFloatSignalUpdateNotify.position:type_name -> proto.Vector
	247, // 166: proto.BuoyantCombatDetailInfo.daily_info_list:type_name -> proto.BuoyantCombatDailyInfo
	936, // 167: proto.BuoyantCombatSettleInfo.settle_info:type_name -> proto.BuoyantCombatGallerySettleInfo
	251, // 168: proto.BuoyantCombatSettleNotify.settle_info:type_name -> proto.BuoyantCombatSettleInfo
	254, // 169: proto.EchoShellDetailInfo.summer_time_dungeon_list:type_name -> proto.SummerTimeDungeonInfo
	259, // 170: proto.BounceConjuringActivityDetailInfo.chapter_info_list:type_name -> proto.BounceConjuringChapterInfo
	884, // 171: proto.BounceConjuringSettleNotify.settle_info_map:type_name -> proto.BounceConjuringSettleNotify.SettleInfoMapEntry
	927, // 172: proto.ParkourLevelInfo.pos:type_name -> proto.Vector
	262, // 173: proto.BlitzRushActivityDetailInfo.stage_list:type_name -> proto.BlitzRushStage
	263, // 174: proto.BlitzRushActivityDetailInfo.parkour_level_info_list:type_name -> proto.ParkourLevelInfo
	885, // 175: proto.SumoActivityDetailInfo.sumo_stage_map:type_name -> proto.SumoActivityDetailInfo.SumoStageMapEntry
	272, // 176: proto.SumoTeamData.avatar_info_list:type_name -> proto.SumoAvatarInfo
	273, // 177: proto.SumoStageData.team_list:type_name -> proto.SumoTeamData
	273, // 178: proto.SumoSaveTeamReq.team_list:type_name -> proto.SumoTeamData
	273, // 179: proto.SumoSaveTeamRsp.team_list:type_name -> proto.SumoTeamData
	273, // 180: proto.SumoSelectTeamAndEnterDungeonReq.team_list:type_name -> proto.SumoTeamData
	273, // 181: proto.SumoSelectTeamAndEnterDungeonRsp.team_list:type_name -> proto.SumoTeamData
	280, // 182: proto.SumoDungeonTeam.dungeon_avatar_list:type_name -> proto.SumoDungeonAvatar
	281, // 183: proto.SumoEnterDungeonNotify.dungeon_team_list:type_name -> proto.SumoDungeonTeam
	281, // 184: proto.SumoSwitchTeamRsp.dungeon_team_list:type_name -> proto.SumoDungeonTeam
	926, // 185: proto.ActivityDisableTransferPointInteractionNotify.scene_point_pair:type_name -> proto.Uint32Pair
	281, // 186: proto.SumoSetNoSwitchPunishTimeNotify.dungeon_team_list:type_name -> proto.SumoDungeonTeam
	886, // 187: proto.MoonfinTrialActivityDetailInfo.level_info_map:type_name -> proto.MoonfinTrialActivityDetailInfo.LevelInfoMapEntry
	937, // 188: proto.FishingGallerySettleNotify.settle_info:type_name -> proto.FishingGallerySettleInfo
	938, // 189: proto.LunaRiteHintPoint.type:type_name -> proto.LunaRiteHintPointType
	927, // 190: proto.LunaRiteHintPoint.pos:type_name -> proto.Vector
	939, // 191: proto.LunaRiteAreaInfo.hint_status:type_name -> proto.LunaRiteHintStatusType
	293, // 192: proto.LunaRiteDetailInfo.hint_point:type_name -> proto.LunaRiteHintPoint
	294, // 193: proto.LunaRiteDetailInfo.area_info_list:type_name -> proto.LunaRiteAreaInfo
	939, // 194: proto.LunaRiteHintPointRsp.hint_status:type_name -> proto.LunaRiteHintStatusType
	293, // 195: proto.LunaRiteHintPointRsp.hint_point:type_name -> proto.LunaRiteHintPoint
	887, // 196: proto.PlantFlowerActivityDetailInfo.wish_flower_num_map:type_name -> proto.PlantFlowerActivityDetailInfo.WishFlowerNumMapEntry
	888, // 197: proto.PlantFlowerActivityDetailInfo.used_flower_num_map:type_name -> proto.PlantFlowerActivityDetailInfo.UsedFlowerNumMapEntry
	889, // 198: proto.PlantFlowerSetFlowerWishReq.flower_num_map:type_name -> proto.PlantFlowerSetFlowerWishReq.FlowerNumMapEntry
	930, // 199: proto.PlantFlowerFriendFlowerWishData.profile_picture:type_name -> proto.ProfilePicture
	890, // 200: proto.PlantFlowerFriendFlowerWishData.flower_num_map:type_name -> proto.PlantFlowerFriendFlowerWishData.FlowerNumMapEntry
	313, // 201: proto.PlantFlowerGetFriendFlowerWishListRsp.friend_flower_wish_list:type_name -> proto.PlantFlowerFriendFlowerWishData
	891, // 202: proto.PlantFlowerGiveFriendFlowerReq.flower_num_map:type_name -> proto.PlantFlowerGiveFriendFlowerReq.FlowerNumMapEntry
	930, // 203: proto.PlantFlowerRecvFlowerData.profile_picture:type_name -> proto.ProfilePicture
	892, // 204: proto.PlantFlowerRecvFlowerData.flower_num_map:type_name -> proto.PlantFlowerRecvFlowerData.FlowerNumMapEntry
	318, // 205: proto.PlantFlowerGetRecvFlowerListRsp.recv_flower_list:type_name -> proto.PlantFlowerRecvFlowerData
	893, // 206: proto.PlantFlowerAcceptFlowerResultInfo.unaccept_flower_num_map:type_name -> proto.PlantFlowerAcceptFlowerResultInfo.UnacceptFlowerNumMapEntry
	894, // 207: proto.PlantFlowerAcceptFlowerResultInfo.accept_flower_num_map:type_name -> proto.PlantFlowerAcceptFlowerResultInfo.AcceptFlowerNumMapEntry
	322, // 208: proto.PlantFlowerAcceptGiveFlowerRsp.accept_flower_result_info:type_name -> proto.PlantFlowerAcceptFlowerResultInfo
	322, // 209: proto.PlantFlowerAcceptAllGiveFlowerRsp.accept_flower_result_info_list:type_name -> proto.PlantFlowerAcceptFlowerResultInfo
	895, // 210: proto.PlantFlowerGetCanGiveFriendFlowerRsp.flower_num_map:type_name -> proto.PlantFlowerGetCanGiveFriendFlowerRsp.FlowerNumMapEntry
	940, // 211: proto.PlantFlowerEditFlowerCombinationReq.flower_combination_info:type_name -> proto.CustomGadgetTreeInfo
	941, // 212: proto.MusicGameActivityDetailInfo.ugc_record_list:type_name -> proto.UgcMusicBriefInfo
	941, // 213: proto.MusicGameActivityDetailInfo.ugc_search_list:type_name -> proto.UgcMusicBriefInfo
	896, // 214: proto.MusicGameActivityDetailInfo.music_game_record_map:type_name -> proto.MusicGameActivityDetailInfo.MusicGameRecordMapEntry
	336, // 215: proto.RogueShowAvatarTeamInfo.avatar_list:type_name -> proto.RogueAvatarInfo
	337, // 216: proto.RogueStageInfo.avatar_team:type_name -> proto.RogueShowAvatarTeamInfo
	340, // 217: proto.RogueStageInfo.rune_record_list:type_name -> proto.RoguelikeRuneRecord
	341, // 218: proto.RoguelikeDungeonActivityDetailInfo.stage_list:type_name -> proto.RogueStageInfo
	338, // 219: proto.RoguelikeDungeonActivityDetailInfo.shikigami_list:type_name -> proto.RoguelikeShikigamiRecord
	388, // 220: proto.RoguelikeGiveUpRsp.settle_info:type_name -> proto.RoguelikeDungeonSettleInfo
	0,   // 221: proto.RogueCellInfo.state:type_name -> proto.RogueCellState
	340, // 222: proto.EnterRoguelikeDungeonNotify.rune_record_list:type_name -> proto.RoguelikeRuneRecord
	897, // 223: proto.EnterRoguelikeDungeonNotify.cell_info_map:type_name -> proto.EnterRoguelikeDungeonNotify.CellInfoMapEntry
	1,   // 224: proto.StartRogueEliteCellChallengeReq.difficulty:type_name -> proto.RogueEliteCellDifficultyType
	364, // 225: proto.RogueCellUpdateNotify.cell_info:type_name -> proto.RogueCellInfo
	898, // 226: proto.ClearRoguelikeCurseNotify.clear_curse_map:type_name -> proto.ClearRoguelikeCurseNotify.ClearCurseMapEntry
	340, // 227: proto.RoguelikeRuneRecordUpdateNotify.rune_record_list:type_name -> proto.RoguelikeRuneRecord
	339, // 228: proto.RoguelikeEffectDataNotify.curse_list:type_name -> proto.RogueEffectRecord
	339, // 229: proto.RoguelikeEffectDataNotify.card_list:type_name -> proto.RogueEffectRecord
	899, // 230: proto.RoguelikeDungeonSettleInfo.finished_challenge_cell_num_map:type_name -> proto.RoguelikeDungeonSettleInfo.FinishedChallengeCellNumMapEntry
	927, // 231: proto.DigMarkPoint.pos:type_name -> proto.Vector
	927, // 232: proto.DigMarkPoint.rot:type_name -> proto.Vector
	390, // 233: proto.DigActivityDetailInfo.dig_mark_point_list:type_name -> proto.DigMarkPoint
	390, // 234: proto.DigActivityMarkPointChangeNotify.dig_mark_point_list:type_name -> proto.DigMarkPoint
	900, // 235: proto.HachiActivityDetailInfo.stage_map:type_name -> proto.HachiActivityDetailInfo.StageMapEntry
	927, // 236: proto.WinterCampStageInfo.pos:type_name -> proto.Vector
	927, // 237: proto.WinterCampRaceStageInfo.pos:type_name -> proto.Vector
	398, // 238: proto.WinterCampActivityDetailInfo.race_info_list:type_name -> proto.WinterCampRaceStageInfo
	397, // 239: proto.WinterCampActivityDetailInfo.battle_info:type_name -> proto.WinterCampStageInfo
	397, // 240: proto.WinterCampActivityDetailInfo.explore_info:type_name -> proto.WinterCampStageInfo
	928, // 241: proto.WinterCampActivityDetailInfo.used_item_list:type_name -> proto.ItemParam
	397, // 242: proto.WinterCampStageInfoChangeNotify.explore_info:type_name -> proto.WinterCampStageInfo
	397, // 243: proto.WinterCampStageInfoChangeNotify.battle_info:type_name -> proto.WinterCampStageInfo
	928, // 244: proto.WinterCampGiveFriendItemReq.item_list:type_name -> proto.ItemParam
	930, // 245: proto.WinterCampFriendWishData.profile_picture:type_name -> proto.ProfilePicture
	406, // 246: proto.WinterCampGetFriendWishListRsp.wish_data_list:type_name -> proto.WinterCampFriendWishData
	417, // 247: proto.WinterCampRecvItemNotify.recv_item_data:type_name -> proto.WinterCampRecvItemData
	928, // 248: proto.WinterCampAcceptItemResultInfo.accept_item_list:type_name -> proto.ItemParam
	928, // 249: proto.WinterCampAcceptItemResultInfo.unaccept_item_list:type_name -> proto.ItemParam
	410, // 250: proto.WinterCampAcceptGiveItemRsp.accept_item_result_info:type_name -> proto.WinterCampAcceptItemResultInfo
	410, // 251: proto.WinterCampAcceptAllGiveItemRsp.accept_item_result_info:type_name -> proto.WinterCampAcceptItemResultInfo
	928, // 252: proto.WinterCampGetCanGiveFriendItemRsp.item_list:type_name -> proto.ItemParam
	928, // 253: proto.WinterCampRecvItemData.item_list:type_name -> proto.ItemParam
	930, // 254: proto.WinterCampRecvItemData.profile_picture:type_name -> proto.ProfilePicture
	417, // 255: proto.WinterCampGetRecvItemListRsp.recv_item_data_list:type_name -> proto.WinterCampRecvItemData
	940, // 256: proto.WinterCampEditSnowmanCombinationReq.combination_info:type_name -> proto.CustomGadgetTreeInfo
	212, // 257: proto.MistTrialSettleNotify.best_avatar_list:type_name -> proto.MistTrialBestAvatar
	901, // 258: proto.MistTrialSettleNotify.exhibition_list_data_result_map:type_name -> proto.MistTrialSettleNotify.ExhibitionListDataResultMapEntry
	212, // 259: proto.MistTrialSettleNotify.best_hit_avatar:type_name -> proto.MistTrialBestAvatar
	902, // 260: proto.MistTrialSettleNotify.exhibition_list_data_record_map:type_name -> proto.MistTrialSettleNotify.ExhibitionListDataRecordMapEntry
	432, // 261: proto.PotionStageData.level_list:type_name -> proto.PotionLevelData
	433, // 262: proto.PotionActivityDetailInfo.stage_list:type_name -> proto.PotionStageData
	433, // 263: proto.PotionResetChallengeRsp.stage_data:type_name -> proto.PotionStageData
	437, // 264: proto.PotionEnterDungeonReq.avatar_info_list:type_name -> proto.PotionAvatarInfo
	440, // 265: proto.PotionEnterDungeonNotify.dungeon_avatar_list:type_name -> proto.PotionDungeonAvatar
	447, // 266: proto.TanukiTravelActivityDetailInfo.tanuki_travel_level_data_list:type_name -> proto.TanukiTravelLevelData
	942, // 267: proto.LanternProjectionInfo.view_switch_tips_list:type_name -> proto.ClientInputType
	450, // 268: proto.LanternProjectionInfo.level_list:type_name -> proto.LanternProjectionLevelInfo
	942, // 269: proto.LanternProjectionInfo.view_input_tips_list:type_name -> proto.ClientInputType
	452, // 270: proto.SalvageChallengeInfo.bundle_info:type_name -> proto.SalvageBundleChallengeInfo
	453, // 271: proto.SalvageChallengeInfo.score_challenge_info:type_name -> proto.SalvageScoreChallengeInfo
	454, // 272: proto.SalvageStageInfo.challenge_info_list:type_name -> proto.SalvageChallengeInfo
	456, // 273: proto.LanternRiteFireworksStageInfo.challenge_info_list:type_name -> proto.LanternRiteFireworksChallengeInfo
	457, // 274: proto.LanternRiteFireworksInfo.stage_info_list:type_name -> proto.LanternRiteFireworksStageInfo
	451, // 275: proto.LanternRiteActivityDetailInfo.projection_info:type_name -> proto.LanternProjectionInfo
	455, // 276: proto.LanternRiteActivityDetailInfo.stage_info_list:type_name -> proto.SalvageStageInfo
	458, // 277: proto.LanternRiteActivityDetailInfo.fireworks_info:type_name -> proto.LanternRiteFireworksInfo
	942, // 278: proto.ViewLanternProjectionTipsReq.input_type:type_name -> proto.ClientInputType
	943, // 279: proto.SalvagePreventSettleInfo.settle_info:type_name -> proto.SalvagePreventGallerySettleInfo
	466, // 280: proto.SalvagePreventSettleNotify.settle_info:type_name -> proto.SalvagePreventSettleInfo
	944, // 281: proto.SalvageEscortSettleInfo.settle_info:type_name -> proto.SalvageEscortGallerySettleInfo
	468, // 282: proto.SalvageEscortSettleNotify.settle_info:type_name -> proto.SalvageEscortSettleInfo
	477, // 283: proto.LanternRiteStartFireworksReformRsp.factor_info_list:type_name -> proto.LanternRiteFireworksReformFactorInfo
	478, // 284: proto.LanternRiteStartFireworksReformRsp.skill_info_list:type_name -> proto.LanternRiteFireworksReformSkillInfo
	477, // 285: proto.LanternRiteDoFireworksReformRsp.factor_info_list:type_name -> proto.LanternRiteFireworksReformFactorInfo
	927, // 286: proto.MichiaeMatsuriChestPositionInfo.pos:type_name -> proto.Vector
	927, // 287: proto.MichiaeMatsuriChallengePositionInfo.pos:type_name -> proto.Vector
	488, // 288: proto.MichiaeMatsuriActivityDetailInfo.challenge_pos_list:type_name -> proto.MichiaeMatsuriChallengePositionInfo
	487, // 289: proto.MichiaeMatsuriActivityDetailInfo.chest_pos_list:type_name -> proto.MichiaeMatsuriChestPositionInfo
	486, // 290: proto.MichiaeMatsuriActivityDetailInfo.stage_list:type_name -> proto.MichiaeMatsuriStage
	503, // 291: proto.BartenderActivityDetailInfo.unlock_level_list:type_name -> proto.BartenderLevelInfo
	502, // 292: proto.BartenderActivityDetailInfo.unlock_task_list:type_name -> proto.BartenderTaskInfo
	928, // 293: proto.BartenderCompleteOrderReq.item_list:type_name -> proto.ItemParam
	928, // 294: proto.BartenderGetFormulaReq.item_list:type_name -> proto.ItemParam
	518, // 295: proto.UgcActivityDetailInfo.official_custom_dungeon_list:type_name -> proto.OfficialCustomDungeon
	521, // 296: proto.CrystalLinkActivityDetailInfo.level_info_list:type_name -> proto.CrystalLinkLevelInfo
	522, // 297: proto.CrystalLinkLevelInfo.team_info_list:type_name -> proto.CrystalLinkTeamInfo
	524, // 298: proto.CrystalLinkTeamInfo.buff_info_list:type_name -> proto.CrystalLinkBuffInfo
	523, // 299: proto.CrystalLinkTeamInfo.avatar_info_list:type_name -> proto.CrystalLinkAvatarInfo
	522, // 300: proto.CrystalLinkEnterDungeonReq.team_info_list:type_name -> proto.CrystalLinkTeamInfo
	522, // 301: proto.CrystalLinkEnterDungeonRsp.team_info_list:type_name -> proto.CrystalLinkTeamInfo
	524, // 302: proto.CrystalLinkDungeonInfoNotify.buff_info_list:type_name -> proto.CrystalLinkBuffInfo
	527, // 303: proto.CrystalLinkDungeonInfoNotify.dungeon_avatar_info_list:type_name -> proto.CrystalLinkDungeonAvatarInfo
	945, // 304: proto.IrodoriChessMapData.entrance_detail_info:type_name -> proto.IrodoriChessEntranceDetailInfo
	533, // 305: proto.IrodoriChessLevelData.hard_map_data:type_name -> proto.IrodoriChessMapData
	533, // 306: proto.IrodoriChessLevelData.normal_map_data:type_name -> proto.IrodoriChessMapData
	534, // 307: proto.IrodoriChessData.level_data_list:type_name -> proto.IrodoriChessLevelData
	928, // 308: proto.IrodoriFlowerData.used_flower_list:type_name -> proto.ItemParam
	537, // 309: proto.IrodoriPoetryData.theme_data_list:type_name -> proto.IrodoriPoetryThemeData
	539, // 310: proto.IrodoriMasterLevelInfo.detail_info:type_name -> proto.IrodoriMasterLevelDetailInfo
	540, // 311: proto.IrodoriActivityDetailInfo.master_level_list:type_name -> proto.IrodoriMasterLevelInfo
	536, // 312: proto.IrodoriActivityDetailInfo.flower_data:type_name -> proto.IrodoriFlowerData
	538, // 313: proto.IrodoriActivityDetailInfo.poetry_data:type_name -> proto.IrodoriPoetryData
	535, // 314: proto.IrodoriActivityDetailInfo.chess_data:type_name -> proto.IrodoriChessData
	940, // 315: proto.IrodoriEditFlowerCombinationReq.combination_info:type_name -> proto.CustomGadgetTreeInfo
	537, // 316: proto.IrodoriScanEntityRsp.theme_data:type_name -> proto.IrodoriPoetryThemeData
	537, // 317: proto.IrodoriFillPoetryRsp.theme_data:type_name -> proto.IrodoriPoetryThemeData
	946, // 318: proto.IrodoriMasterGallerySettleNotify.settle_info:type_name -> proto.IrodoriMasterGallerySettleInfo
	927, // 319: proto.PhotoPosData.center:type_name -> proto.Vector
	558, // 320: proto.PhotoActivityDetailInfo.photo_pos_data_list:type_name -> proto.PhotoPosData
	564, // 321: proto.SpiceActivityDetailInfo.spice_stage_data_list:type_name -> proto.SpiceStageData
	928, // 322: proto.SpiceActivityProcessFoodReq.normal_food_list:type_name -> proto.ItemParam
	928, // 323: proto.SpiceActivityProcessFoodRsp.special_food_list:type_name -> proto.ItemParam
	928, // 324: proto.SpiceActivityProcessFoodRsp.normal_food_list:type_name -> proto.ItemParam
	903, // 325: proto.GachaStageData.target_num_map:type_name -> proto.GachaStageData.TargetNumMapEntry
	571, // 326: proto.GachaActivityDetailInfo.gacha_stage_data_list:type_name -> proto.GachaStageData
	904, // 327: proto.GachaActivityDetailInfo.have_reward_robot_num_map:type_name -> proto.GachaActivityDetailInfo.HaveRewardRobotNumMapEntry
	905, // 328: proto.GachaActivityDetailInfo.robot_num_map:type_name -> proto.GachaActivityDetailInfo.RobotNumMapEntry
	906, // 329: proto.GachaActivityPercentNotify.target_num_map:type_name -> proto.GachaActivityPercentNotify.TargetNumMapEntry
	907, // 330: proto.GachaActivityTakeRewardReq.robot_num_map:type_name -> proto.GachaActivityTakeRewardReq.RobotNumMapEntry
	908, // 331: proto.GachaActivityTakeRewardRsp.robot_num_map:type_name -> proto.GachaActivityTakeRewardRsp.RobotNumMapEntry
	909, // 332: proto.ActivityGiveFriendGiftReq.gift_num_map:type_name -> proto.ActivityGiveFriendGiftReq.GiftNumMapEntry
	930, // 333: proto.ActivityRecvGiftData.profile_picture:type_name -> proto.ProfilePicture
	910, // 334: proto.ActivityRecvGiftData.gift_num_map:type_name -> proto.ActivityRecvGiftData.GiftNumMapEntry
	585, // 335: proto.ActivityGetRecvGiftListRsp.recv_gift_list:type_name -> proto.ActivityRecvGiftData
	911, // 336: proto.ActivityAcceptGiftResultInfo.unaccept_gift_num_map:type_name -> proto.ActivityAcceptGiftResultInfo.UnacceptGiftNumMapEntry
	912, // 337: proto.ActivityAcceptGiftResultInfo.accept_gift_num_map:type_name -> proto.ActivityAcceptGiftResultInfo.AcceptGiftNumMapEntry
	589, // 338: proto.ActivityAcceptGiveGiftRsp.accept_gift_result_info:type_name -> proto.ActivityAcceptGiftResultInfo
	589, // 339: proto.ActivityAcceptAllGiveGiftRsp.accept_gift_result_info_list:type_name -> proto.ActivityAcceptGiftResultInfo
	913, // 340: proto.ActivityGetCanGiveFriendGiftRsp.gift_num_map:type_name -> proto.ActivityGetCanGiveFriendGiftRsp.GiftNumMapEntry
	914, // 341: proto.ActivitySetGiftWishReq.gift_num_map:type_name -> proto.ActivitySetGiftWishReq.GiftNumMapEntry
	930, // 342: proto.ActivityFriendGiftWishData.profile_picture:type_name -> proto.ProfilePicture
	915, // 343: proto.ActivityFriendGiftWishData.gift_num_map:type_name -> proto.ActivityFriendGiftWishData.GiftNumMapEntry
	598, // 344: proto.ActivityGetFriendGiftWishListRsp.friend_gift_wish_list:type_name -> proto.ActivityFriendGiftWishData
	947, // 345: proto.LuminanceStoneChallengeSettleInfo.settle_info:type_name -> proto.LuminanceStoneChallengeGallerySettleInfo
	602, // 346: proto.LuminanceStoneChallengeSettleNotify.settle_info:type_name -> proto.LuminanceStoneChallengeSettleInfo
	604, // 347: proto.RogueDiaryStageInfo.best_record:type_name -> proto.RogueDiaryDungeonRecord
	605, // 348: proto.RogueDiaryActivityDetailInfo.stage_list:type_name -> proto.RogueDiaryStageInfo
	606, // 349: proto.RogueDiaryActivityDetailInfo.cur_progress:type_name -> proto.RogueDiaryProgress
	948, // 350: proto.RogueDiaryAvatar.avatar:type_name -> proto.ActivityDungeonAvatar
	2,   // 351: proto.RogueDiaryAvatar.disable_status_list:type_name -> proto.RogueDiaryAvatarDisableStatus
	926, // 352: proto.RogueDiaryRoomInfo.monster_list:type_name -> proto.Uint32Pair
	608, // 353: proto.StartRogueDiaryPlayRsp.trial_avatar_list:type_name -> proto.RogueDiaryAvatar
	608, // 354: proto.StartRogueDiaryPlayRsp.avatar_list:type_name -> proto.RogueDiaryAvatar
	608, // 355: proto.EnterRogueDiaryDungeonReq.chosen_avatar_list:type_name -> proto.RogueDiaryAvatar
	609, // 356: proto.RogueDiaryDungeonInfoNotify.room_list:type_name -> proto.RogueDiaryRoomInfo
	608, // 357: proto.RogueDiaryTiredAvatarNotify.optianal_tired_avatar_list:type_name -> proto.RogueDiaryAvatar
	608, // 358: proto.ReserveRogueDiaryAvatarReq.reserve_avatar_list:type_name -> proto.RogueDiaryAvatar
	608, // 359: proto.RogueFinishRepairReq.chosen_avatar_list:type_name -> proto.RogueDiaryAvatar
	608, // 360: proto.RogueDiaryRepairInfoNotify.avatar_list:type_name -> proto.RogueDiaryAvatar
	609, // 361: proto.RogueDiaryRepairInfoNotify.room_list:type_name -> proto.RogueDiaryRoomInfo
	608, // 362: proto.RogueDiaryRepairInfoNotify.select_avatar_list:type_name -> proto.RogueDiaryAvatar
	608, // 363: proto.RogueDiaryRepairInfoNotify.trial_avatar_list:type_name -> proto.RogueDiaryAvatar
	608, // 364: proto.RogueDiaryReviveAvatarReq.revive_avatar:type_name -> proto.RogueDiaryAvatar
	642, // 365: proto.SummerTimeV2DetailInfo.dungeon_stage_info_list:type_name -> proto.SummerTimeV2DungeonStageInfo
	643, // 366: proto.SummerTimeV2DetailInfo.boat_stage_info_list:type_name -> proto.SummerTimeV2BoatStageInfo
	949, // 367: proto.SummerTimeV2BoatSettleNotify.settle_info:type_name -> proto.SummerTimeV2BoatGallerySettleInfo
	3,   // 368: proto.ActivityPushTipsData.state:type_name -> proto.ActivityPushTipsState
	645, // 369: proto.ActivityPushTipsInfoNotify.activity_push_tips_data_list:type_name -> proto.ActivityPushTipsData
	653, // 370: proto.IslandPartyDetailInfo.stage_data_list:type_name -> proto.IslandPartyStageData
	950, // 371: proto.IslandPartySettleNotify.reason:type_name -> proto.GalleryStopReason
	951, // 372: proto.IslandPartySettleNotify.settle_info_list:type_name -> proto.IslandPartyGallerySettleInfo
	952, // 373: proto.IslandPartySettleNotify.score_list:type_name -> proto.ExhibitionDisplayInfo
	656, // 374: proto.GearActivityDetailInfo.gear_level_data_list:type_name -> proto.GearLevelData
	657, // 375: proto.GearActivityDetailInfo.jigsaw_picture_data:type_name -> proto.JigsawPictureData
	661, // 376: proto.GearActivityFinishPlayGearReq.gear_column_info_list:type_name -> proto.GearColumnInfo
	668, // 377: proto.GravenInnocencePhotoInfo.stage_info_list:type_name -> proto.GravenInnocencePhotoStageInfo
	669, // 378: proto.GravenInnocencePhotoInfo.object_info_list:type_name -> proto.GravenInnocencePhotoObjectInfo
	671, // 379: proto.GravenInnocenceCampInfo.stage_info_list:type_name -> proto.GravenInnocenceCampStageInfo
	673, // 380: proto.GravenInnocenceRaceInfo.level_info_list:type_name -> proto.GravenInnocenceRaceLevelInfo
	675, // 381: proto.GravenInnocenceCarveInfo.stage_info_list:type_name -> proto.GravenInnocenceCarveStageInfo
	674, // 382: proto.GravenInnocenceDetailInfo.race_info:type_name -> proto.GravenInnocenceRaceInfo
	670, // 383: proto.GravenInnocenceDetailInfo.photo_info:type_name -> proto.GravenInnocencePhotoInfo
	676, // 384: proto.GravenInnocenceDetailInfo.carve_info:type_name -> proto.GravenInnocenceCarveInfo
	672, // 385: proto.GravenInnocenceDetailInfo.camp_info:type_name -> proto.GravenInnocenceCampInfo
	950, // 386: proto.GravenInnocenceRaceSettleNotify.reason:type_name -> proto.GalleryStopReason
	940, // 387: proto.GravenInnocenceEditCarveCombinationReq.combination_info:type_name -> proto.CustomGadgetTreeInfo
	689, // 388: proto.InstableSprayTeamInfo.avatar_info_list:type_name -> proto.InstableSprayAvatarInfo
	686, // 389: proto.InstableSprayStageInfo.team_info_list:type_name -> proto.InstableSprayTeamInfo
	687, // 390: proto.InstableSprayDetailInfo.stage_info_list:type_name -> proto.InstableSprayStageInfo
	689, // 391: proto.InstableSprayEnterDungeonReq.avatar_info_list:type_name -> proto.InstableSprayAvatarInfo
	689, // 392: proto.InstableSpraySwitchTeamReq.avatar_info_list:type_name -> proto.InstableSprayAvatarInfo
	689, // 393: proto.InstableSprayRestartDungeonReq.avatar_info_list:type_name -> proto.InstableSprayAvatarInfo
	697, // 394: proto.MuqadasPotionActivityDetailInfo.muqadas_potion_level_data_list:type_name -> proto.MuqadasPotionLevelData
	927, // 395: proto.TreasureSeelieRegionData.region_center_pos:type_name -> proto.Vector
	706, // 396: proto.TreasureSeelieActivityDetailInfo.region_data_list:type_name -> proto.TreasureSeelieRegionData
	709, // 397: proto.RockBoardExploreDetailInfo.stage_data_list:type_name -> proto.RockBoardExploreStageData
	916, // 398: proto.VintagePresentStageData.present_level_map:type_name -> proto.VintagePresentStageData.PresentLevelMapEntry
	917, // 399: proto.VintageCampChallengeStageData.camp_level_map:type_name -> proto.VintageCampChallengeStageData.CampLevelMapEntry
	928, // 400: proto.VintageMarketTraderInfo.available_item_list:type_name -> proto.ItemParam
	918, // 401: proto.VintageMarketDealInfo.trader_item_info_map:type_name -> proto.VintageMarketDealInfo.TraderItemInfoMapEntry
	718, // 402: proto.VintageMarketInfo.deal_info:type_name -> proto.VintageMarketDealInfo
	919, // 403: proto.VintageMarketInfo.bargain_info_map:type_name -> proto.VintageMarketInfo.BargainInfoMapEntry
	719, // 404: proto.VintageMarketInfo.open_store_list:type_name -> proto.VintageMarketStoreInfo
	721, // 405: proto.VintageActivityDetailInfo.market_info:type_name -> proto.VintageMarketInfo
	920, // 406: proto.VintageActivityDetailInfo.hunting_stage_map:type_name -> proto.VintageActivityDetailInfo.HuntingStageMapEntry
	714, // 407: proto.VintageActivityDetailInfo.booth_data:type_name -> proto.VintageBoothUsedItemData
	921, // 408: proto.VintageActivityDetailInfo.camp_stage_map:type_name -> proto.VintageActivityDetailInfo.CampStageMapEntry
	922, // 409: proto.VintageActivityDetailInfo.present_stage_map:type_name -> proto.VintageActivityDetailInfo.PresentStageMapEntry
	928, // 410: proto.VintageMarketDeliverItemReq.deliver_item_list:type_name -> proto.ItemParam
	923, // 411: proto.VintageHuntingSecondStageSettleInfo.animal_count_map:type_name -> proto.VintageHuntingSecondStageSettleInfo.AnimalCountMapEntry
	725, // 412: proto.SceneGalleryVintageHuntingSettleNotify.first_stage_info:type_name -> proto.VintageHuntingFirstStageSettleInfo
	726, // 413: proto.SceneGalleryVintageHuntingSettleNotify.second_stage_info:type_name -> proto.VintageHuntingSecondStageSettleInfo
	727, // 414: proto.SceneGalleryVintageHuntingSettleNotify.third_stage_info:type_name -> proto.VintageHuntingThirdStageSettleInfo
	940, // 415: proto.VintageDecorateBoothReq.combination_info:type_name -> proto.CustomGadgetTreeInfo
	720, // 416: proto.VintageMarketFinishStorePlayReq.store_op_list:type_name -> proto.VintageMarketStoreOpInfo
	924, // 417: proto.VintageMarketFinishStorePlayRsp.store_income_map:type_name -> proto.VintageMarketFinishStorePlayRsp.StoreIncomeMapEntry
	720, // 418: proto.VintageMarketStoreChooseStrategyReq.store_op_list:type_name -> proto.VintageMarketStoreOpInfo
	750, // 419: proto.WindFieldDetailInfo.stage_info_list:type_name -> proto.WindFieldStageInfo
	757, // 420: proto.FungusTrainingPoolPreviewDetail.monster_preview_detail_list:type_name -> proto.FungusTrainingMonsterPreviewDetail
	758, // 421: proto.FungusTrainingProgressDetail.monster_pool_preview_list:type_name -> proto.FungusTrainingPoolPreviewDetail
	756, // 422: proto.FungusTrainingProgressDetail.monster_detail_list:type_name -> proto.FungusFighterMonsterDetail
	754, // 423: proto.FungusFighterDetailInfo.plot_stage_detail_list:type_name -> proto.FungusPlotStageDetail
	753, // 424: proto.FungusFighterDetailInfo.fungus_detail_list:type_name -> proto.FungusDetail
	759, // 425: proto.FungusFighterDetailInfo.training_dungeon_progress_detail_list:type_name -> proto.FungusTrainingProgressDetail
	755, // 426: proto.FungusFighterDetailInfo.training_dungeon_detail_list:type_name -> proto.FungusTrainingDungeonDetail
	759, // 427: proto.FungusFighterRuntimeDataNotify.progress_detail:type_name -> proto.FungusTrainingProgressDetail
	950, // 428: proto.FungusFighterTrainingGallerySettleNotify.reason:type_name -> proto.GalleryStopReason
	780, // 429: proto.CharAmusementDetailInfo.stage_data_list:type_name -> proto.CharAmusementStageData
	783, // 430: proto.EffigyChallengeV2DetailInfo.level_data_list:type_name -> proto.EffigyChallengeV2LevelData
	792, // 431: proto.CoinCollectLevelData.double_best_team_info_list:type_name -> proto.CoinCollectTeamInfoData
	792, // 432: proto.CoinCollectLevelData.single_best_team_info:type_name -> proto.CoinCollectTeamInfoData
	793, // 433: proto.CoinCollectDetailInfo.level_data_list:type_name -> proto.CoinCollectLevelData
	807, // 434: proto.BrickBreakerDetailInfo.dungeon_level_info_list:type_name -> proto.BrickBreakerLevelInfo
	808, // 435: proto.BrickBreakerDetailInfo.stage_info_list:type_name -> proto.BrickBreakerActivityStageInfo
	807, // 436: proto.BrickBreakerDetailInfo.world_level_info_list:type_name -> proto.BrickBreakerLevelInfo
	925, // 437: proto.BrickBreakerDetailInfo.skill_info_map:type_name -> proto.BrickBreakerDetailInfo.SkillInfoMapEntry
	926, // 438: proto.BrickBreakerSettleNotify.update_skill_list:type_name -> proto.Uint32Pair
	4,   // 439: proto.BrickBreakerSettleNotify.reason:type_name -> proto.BrickBreakerSettleNotify.SettleReason
	819, // 440: proto.SeaLampV3RaceInfo.level_info_list:type_name -> proto.SeaLampV3RaceLevelInfo
	821, // 441: proto.SeaLampV3ShadowStageInfo.level_info_list:type_name -> proto.SeaLampV3ShadowLevelInfo
	822, // 442: proto.SeaLampV3ShadowInfo.stage_info_list:type_name -> proto.SeaLampV3ShadowStageInfo
	824, // 443: proto.SeaLampV3CampInfo.stage_info_list:type_name -> proto.SeaLampV3CampStageInfo
	823, // 444: proto.SeaLampV3DetailInfo.shadow_info:type_name -> proto.SeaLampV3ShadowInfo
	825, // 445: proto.SeaLampV3DetailInfo.camp_info:type_name -> proto.SeaLampV3CampInfo
	820, // 446: proto.SeaLampV3DetailInfo.race_info:type_name -> proto.SeaLampV3RaceInfo
	837, // 447: proto.DuelHeartLevelInfo.difficulty_info_list:type_name -> proto.DuelHeartLevelDifficultyInfo
	838, // 448: proto.DuelHeartDetailInfo.level_info_list:type_name -> proto.DuelHeartLevelInfo
	848, // 449: proto.TeamChainDetailInfo.stage_data_list:type_name -> proto.TeamChainStageData
	850, // 450: proto.TeamChainChooseTeamInfo.avatar_info_list:type_name -> proto.TeamChainChooseAvatarInfo
	851, // 451: proto.TeamChainEnterDungeonReq.team_info_list:type_name -> proto.TeamChainChooseTeamInfo
	851, // 452: proto.TeamChainRestartDungeonReq.team_info_list:type_name -> proto.TeamChainChooseTeamInfo
	859, // 453: proto.ElectroherculesBattleStageInfo.level_info_list:type_name -> proto.ElectroherculesBattleLevelInfo
	860, // 454: proto.ElectroherculesBattleDetailInfo.stage_info_list:type_name -> proto.ElectroherculesBattleStageInfo
	157, // 455: proto.FleurFairMusicGameInfo.MusicRecordMapEntry.value:type_name -> proto.FleurFairMusicRecord
	159, // 456: proto.FleurFairActivityDetailInfo.MinigameInfoMapEntry.value:type_name -> proto.FleurFairMinigameInfo
	160, // 457: proto.FleurFairActivityDetailInfo.DungeonSectionInfoMapEntry.value:type_name -> proto.FleurFairDungeonSectionInfo
	162, // 458: proto.FleurFairBalloonSettleNotify.SettleInfoMapEntry.value:type_name -> proto.FleurFairBalloonSettleInfo
	163, // 459: proto.FleurFairFallSettleNotify.SettleInfoMapEntry.value:type_name -> proto.FleurFairFallSettleInfo
	241, // 460: proto.SummerTimeDetailInfo.StageMapEntry.value:type_name -> proto.SummerTimeStageInfo
	953, // 461: proto.BounceConjuringSettleNotify.SettleInfoMapEntry.value:type_name -> proto.BounceConjuringGallerySettleInfo
	274, // 462: proto.SumoActivityDetailInfo.SumoStageMapEntry.value:type_name -> proto.SumoStageData
	290, // 463: proto.MoonfinTrialActivityDetailInfo.LevelInfoMapEntry.value:type_name -> proto.MoonfinTrialLevelInfo
	330, // 464: proto.MusicGameActivityDetailInfo.MusicGameRecordMapEntry.value:type_name -> proto.MusicGameRecord
	364, // 465: proto.EnterRoguelikeDungeonNotify.CellInfoMapEntry.value:type_name -> proto.RogueCellInfo
	387, // 466: proto.RoguelikeDungeonSettleInfo.FinishedChallengeCellNumMapEntry.value:type_name -> proto.RoguelikeSettleCoinInfo
	396, // 467: proto.HachiActivityDetailInfo.StageMapEntry.value:type_name -> proto.HachiStageInfo
	712, // 468: proto.VintagePresentStageData.PresentLevelMapEntry.value:type_name -> proto.VintagePresentLevelData
	715, // 469: proto.VintageCampChallengeStageData.CampLevelMapEntry.value:type_name -> proto.VintageCampChallengeLevelData
	717, // 470: proto.VintageMarketDealInfo.TraderItemInfoMapEntry.value:type_name -> proto.VintageMarketTraderInfo
	711, // 471: proto.VintageActivityDetailInfo.HuntingStageMapEntry.value:type_name -> proto.VintageHuntingStageData
	716, // 472: proto.VintageActivityDetailInfo.CampStageMapEntry.value:type_name -> proto.VintageCampChallengeStageData
	713, // 473: proto.VintageActivityDetailInfo.PresentStageMapEntry.value:type_name -> proto.VintagePresentStageData
	474, // [474:474] is the sub-list for method output_type
	474, // [474:474] is the sub-list for method input_type
	474, // [474:474] is the sub-list for extension type_name
	474, // [474:474] is the sub-list for extension extendee
	0,   // [0:474] is the sub-list for field type_name
}

func init() { file_cmd_cmd_activity_proto_init() }
func file_cmd_cmd_activity_proto_init() {
	if File_cmd_cmd_activity_proto != nil {
		return
	}
	file_define_proto_init()
	file_cmd_cmd_gallery_proto_init()
	file_cmd_cmd_ugc_proto_init()
	file_cmd_cmd_multistage_play_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cmd_cmd_activity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityScheduleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityScheduleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityPlayOpenAnimNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityScheduleInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityWatcherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTakeWatcherRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTakeWatcherRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityUpdateWatcherNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivitySelectAvatarCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivitySelectAvatarCardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityCoinInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampFlyLampReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampFlyLampRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampTakeContributionRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampTakeContributionRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampTakePhaseRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampTakePhaseRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampContributeItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampContributeItemRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampSectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampActivityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampFlyLampNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampCoinNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampPopularityNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnounceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadActivityTerrainNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerAnnounceNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerAnnounceRevokeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBannerNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBannerClearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBannerClearRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesmanActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesmanDeliverItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesmanDeliverItemRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesmanTakeRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesmanTakeRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityCondStateChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesmanTakeSpecialRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesmanTakeSpecialRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthSalesmanInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthSalesmanInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialAvatarActivityRewardDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialAvatarActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterTrialAvatarActivityDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterTrialAvatarActivityDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedTrialAvatarActivityRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedTrialAvatarActivityRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialAvatarFirstPassDungeonNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialAvatarInDungeonIndexNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrucibleBattleUidInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrucibleActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeDeliveryDailyRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeDeliveryDailyRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishDeliveryNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterLittleDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterMidCampInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterMidDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterLargeDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterProgressDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectAsterMidDifficultyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectAsterMidDifficultyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterProgressInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterLittleInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterMidInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterMiscInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeAsterSpecialRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeAsterSpecialRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterLargeInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightDailyRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightActivitySettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightActivityRestartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightActivityRestartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsterMidCampInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonSpineActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonSpineChapterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonSpineChapterOpenNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonSpineChapterProgressChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonSpineChapterFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonSpineCoinChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivitySaleChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyDailyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartEffigyChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartEffigyChallengeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeDungeonResultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeResultNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeEffigyFirstPassRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeEffigyFirstPassRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeEffigyRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeEffigyRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectEffigyChallengeConditionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectEffigyChallengeConditionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartEffigyChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartEffigyChallengeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapRegionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapBonusChallengeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapRegionInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapCurrencyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapRegionActiveNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapMpChallengeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapBonusChallengeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapGuideTaskDoneNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapPreTaskDoneNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingScanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingScanRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingRedeemRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingRedeemRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingFriendPicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingRecvPicRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingGetFriendPicListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingGetFriendPicListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingGiveFriendPicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingGiveFriendPicRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingAcceptGivePicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingAcceptGivePicRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingGetAllRecvPicRecordListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingGetAllRecvPicRecordListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingRecvFriendPicNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingAcceptAllGivePicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlessingAcceptAllGivePicRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionPathInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionChallengeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionStartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionRecallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionRecallRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionTakeRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionTakeRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionAssistInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExpeditionAssistInfoListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExpeditionAssistInfoListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCurExpeditionChallengeIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCurExpeditionChallengeIdRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionChallengeEnterRegionNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpeditionChallengeFinishedNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaterSpiritActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairChapterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairBalloonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairFallInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairMusicRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairMusicGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairMinigameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairDungeonSectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairBalloonSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairFallSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairBalloonSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairFallSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairMusicGameSettleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairMusicGameSettleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairMusicGameStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairMusicGameStartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairReplayMiniGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleurFairReplayMiniGameRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArenaChallengeMonsterLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArenaChallengeActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartArenaChallengeLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartArenaChallengeLevelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArenaChallengeChildChallengeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArenaChallengeFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaterSpritePhaseFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTakeWatcherRewardBatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTakeWatcherRewardBatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelerSlabCamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelerSlabChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelerSlabOneoffDungeon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelerSlabChallengeStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabBuffSchemeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabAssistInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabBuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabLoopDungeonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabLoopDungeonStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelerSlabActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelerSlabStageActiveChallengeIndexNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelerSlabStageOneoffDungeonNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabWearBuffReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabWearBuffRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabTakeoffBuffReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabTakeoffBuffRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabEnterLoopDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabEnterLoopDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabLoopDungeonTakeFirstPassRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabLoopDungeonTakeFirstPassRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabLoopDungeonTakeScoreRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabLoopDungeonTakeScoreRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabLoopDungeonChallengeInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabLoopDungeonSelectConditionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabLoopDungeonSelectConditionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabLoopDungeonResultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabOneOffDungeonInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabOneOffDungeonInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabOneOffDungeonInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabSaveAssistInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabSaveAssistInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialBestAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialSelectAvatarAndEnterDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialSelectAvatarAndEnterDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialMissionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialGetChallengeMissionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialGetChallengeMissionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialDunegonFailNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabCheckEnterLoopDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannellerSlabCheckEnterLoopDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekMapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekSelectSkillReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekSelectSkillRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTakeScoreRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTakeScoreRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTakeAllScoreRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityTakeAllScoreRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekChooseMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideAndSeekChooseMapRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHilichurlDayContentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHilichurlDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonPlayerTipsNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHilichurlFinishSecondQuestNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHilichurlAcceptQuestNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeSprintBoatRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeSprintBoatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeFloatSignalPositionNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeFloatSignalUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeSprintBoatSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeSprintBoatRestartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeSprintBoatRestartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuoyantCombatDailyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuoyantCombatDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBuoyantCombatGalleryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBuoyantCombatGalleryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuoyantCombatSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuoyantCombatSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLimitOptimizationNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeDungeonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoShellDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoShellUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoShellTakeRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoShellTakeRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BounceConjuringChapterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BounceConjuringActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BounceConjuringSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlitzRushStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParkourLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlitzRushActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlitzRushParkourRestartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlitzRushParkourRestartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterChessDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterChessDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureMapHostInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoTeamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoSaveTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoSaveTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoSelectTeamAndEnterDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoSelectTeamAndEnterDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoDungeonSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoDungeonAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoDungeonTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoEnterDungeonNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoSwitchTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoSwitchTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoLeaveDungeonNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoRestartDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoRestartDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDisableTransferPointInteractionNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoSetNoSwitchPunishTimeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoonfinTrialLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoonfinTrialActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishingGallerySettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteHintPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteAreaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteSacrificeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteSacrificeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteTakeSacrificeRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteTakeSacrificeRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteHintPointReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteHintPointRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteHintPointRemoveNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteGroupBundleRegisterNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LunaRiteAreaFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerGetSeedInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerGetSeedInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerTakeSeedRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerTakeSeedRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerSetFlowerWishReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerSetFlowerWishRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerGetFriendFlowerWishListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerFriendFlowerWishData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerGetFriendFlowerWishListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerGiveFriendFlowerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerGiveFriendFlowerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerGetRecvFlowerListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerRecvFlowerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerGetRecvFlowerListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerHaveRecvFlowerNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerAcceptGiveFlowerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerAcceptFlowerResultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerAcceptGiveFlowerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerAcceptAllGiveFlowerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerAcceptAllGiveFlowerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerGetCanGiveFriendFlowerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerGetCanGiveFriendFlowerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerEditFlowerCombinationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantFlowerEditFlowerCombinationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicGameRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicGameActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicGameSettleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicGameSettleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicGameStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicGameStartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueShowAvatarTeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeShikigamiRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueEffectRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeRuneRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeDungeonActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoRoguelikeDungeonCardGachaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoRoguelikeDungeonCardGachaRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshRoguelikeDungeonCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshRoguelikeDungeonCardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectRoguelikeDungeonCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectRoguelikeDungeonCardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipRoguelikeRuneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipRoguelikeRuneRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerRoguelikeRuneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerRoguelikeRuneRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerRoguelikeCurseNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeRoguelikeShikigamiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeRoguelikeShikigamiRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeSelectAvatarAndEnterDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeSelectAvatarAndEnterDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeGiveUpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeGiveUpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeTakeStageFirstPassRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeTakeStageFirstPassRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveUpRoguelikeDungeonCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveUpRoguelikeDungeonCardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueCellInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterRoguelikeDungeonNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRogueEliteCellChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRogueEliteCellChallengeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRogueNormalCellChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRogueNormalCellChallengeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueCellUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDungeonPlayerCellChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueHealAvatarsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueHealAvatarsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueResumeDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueResumeDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearRoguelikeCurseNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeCardGachaNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueSwitchAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueSwitchAvatarRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableRoguelikeTrapNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeRuneRecordUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeMistClearNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeEffectDataNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeEffectViewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeEffectViewRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeResourceBonusPropUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeSettleCoinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeDungeonSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeRefreshCardCostUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigMarkPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigActivityMarkPointChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigActivityChangeGadgetStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigActivityChangeGadgetStateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HachiActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HachiStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampRaceStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampStageInfoChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampRaceScoreNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampGiveFriendItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampGiveFriendItemRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampSetWishListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampSetWishListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampFriendWishData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampGetFriendWishListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampGetFriendWishListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampRecvItemNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampAcceptItemResultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampAcceptGiveItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampAcceptGiveItemRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampAcceptAllGiveItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampAcceptAllGiveItemRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampGetCanGiveFriendItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampGetCanGiveFriendItemRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampRecvItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampGetRecvItemListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampGetRecvItemListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampEditSnowmanCombinationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampEditSnowmanCombinationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampTriathlonSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampTakeExploreRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampTakeExploreRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampTakeBattleRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampTakeBattleRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampTriathlonRestartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinterCampTriathlonRestartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialGetDungeonExhibitionDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialGetDungeonExhibitionDataRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionResetChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionResetChallengeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionEnterDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionEnterDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionDungeonAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionEnterDungeonNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionSaveDungeonResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionSaveDungeonResultRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionRestartDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionRestartDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionDungeonResultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TanukiTravelLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TanukiTravelActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TanukiTravelFinishGuideQuestNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternProjectionLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternProjectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvageBundleChallengeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvageScoreChallengeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvageChallengeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvageStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteFireworksChallengeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteFireworksStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteFireworksInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishLanternProjectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishLanternProjectionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewLanternProjectionTipsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewLanternProjectionTipsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewLanternProjectionLevelTipsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewLanternProjectionLevelTipsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvagePreventSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvagePreventSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvageEscortSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvageEscortSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteTakeSkinRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteTakeSkinRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvagePreventRestartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvagePreventRestartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvageEscortRestartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalvageEscortRestartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteStartFireworksReformReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteFireworksReformFactorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteFireworksReformSkillInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteStartFireworksReformRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteDoFireworksReformReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteDoFireworksReformRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteEndFireworksReformReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanternRiteEndFireworksReformRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSalvageBundleMarkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSalvageBundleMarkRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriChestPositionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriChallengePositionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriDarkPressureLevelUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriInteractStatueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriInteractStatueRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriUnlockCrystalSkillReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriUnlockCrystalSkillRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriStartBossChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriStartBossChallengeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriStartDarkChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriStartDarkChallengeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriRemoveChestMarkNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriRemoveChallengeMarkNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MichiaeMatsuriGainCrystalExpUpdateNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderCompleteOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderCompleteOrderRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderCancelOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderCancelOrderRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderGetFormulaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderGetFormulaRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderStartLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderStartLevelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderCancelLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderCancelLevelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderLevelProgressNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderFinishLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BartenderFinishLevelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialCustomDungeon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UgcActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkTeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkBuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkEnterDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkEnterDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkDungeonAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkDungeonInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkRestartDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrystalLinkRestartDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickOpenActivityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickOpenActivityRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessMapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[531].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriFlowerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[532].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriPoetryThemeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[533].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriPoetryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[534].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriMasterLevelDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[535].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriMasterLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[536].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[537].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriEditFlowerCombinationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[538].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriEditFlowerCombinationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[539].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriScanEntityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[540].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriScanEntityRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[541].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriFillPoetryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[542].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriFillPoetryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[543].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessEquipCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[544].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessEquipCardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[545].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessUnequipCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[546].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriChessUnequipCardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[547].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterIrodoriChessDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[548].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterIrodoriChessDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[549].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriMasterStartGalleryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[550].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriMasterStartGalleryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[551].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriMasterGalleryCgEndNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[552].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrodoriMasterGallerySettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[553].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoPosData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[554].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[555].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoActivityFinishReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[556].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoActivityFinishRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[557].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoActivityClientViewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[558].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoActivityClientViewRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[559].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpiceStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[560].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpiceActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[561].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpiceActivityFinishMakeSpiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[562].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpiceActivityFinishMakeSpiceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[563].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpiceActivityProcessFoodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[564].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpiceActivityProcessFoodRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[565].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpiceActivityGivingRecordNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[566].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[567].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[568].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaActivityPercentNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[569].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaActivityUpdateElemNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[570].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaActivityCreateRobotReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[571].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaActivityCreateRobotRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[572].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaActivityTakeRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[573].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaActivityTakeRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[574].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaActivityResetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[575].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaActivityResetRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[576].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaActivityNextStageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[577].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaActivityNextStageRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[578].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityGiveFriendGiftReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[579].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityGiveFriendGiftRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[580].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityRecvGiftData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[581].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityGetRecvGiftListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[582].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityGetRecvGiftListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[583].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityHaveRecvGiftNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[584].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityAcceptGiftResultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[585].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityAcceptGiveGiftReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[586].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityAcceptGiveGiftRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[587].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityAcceptAllGiveGiftReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[588].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityAcceptAllGiveGiftRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[589].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityGetCanGiveFriendGiftReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[590].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityGetCanGiveFriendGiftRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[591].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivitySetGiftWishReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[592].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivitySetGiftWishRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[593].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityFriendGiftWishData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[594].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityGetFriendGiftWishListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[595].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityGetFriendGiftWishListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[596].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuminanceStoneChallengeActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[597].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuminanceStoneChallengeSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[598].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuminanceStoneChallengeSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[599].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryDungeonRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[600].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[601].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[602].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[603].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[604].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[605].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRogueDiaryPlayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[606].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRogueDiaryPlayRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[607].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRogueDiaryPlayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[608].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRogueDiaryPlayRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[609].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterRogueDiaryDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[610].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterRogueDiaryDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[611].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeRogueDiaryDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[612].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeRogueDiaryDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[613].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryDungeonInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[614].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryDungeonSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[615].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRogueDiaryRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[616].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRogueDiaryRoomRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[617].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryTiredAvatarNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[618].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveRogueDiaryAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[619].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveRogueDiaryAvatarRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[620].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRogueDairyRepairInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[621].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRogueDairyRepairInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[622].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshRogueDiaryCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[623].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshRogueDiaryCardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[624].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueFinishRepairReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[625].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueFinishRepairRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[626].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryInterruptRogueDiaryDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[627].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryInterruptRogueDiaryDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[628].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryRepairInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[629].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryCurRogueDiaryDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[630].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryCurRogueDiaryDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[631].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryReviveAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[632].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryReviveAvatarRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[633].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryEnterNextRogueDiaryDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[634].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryEnterNextRogueDiaryDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[635].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueDiaryCoinAddNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[636].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2DetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[637].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2DungeonStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[638].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2BoatStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[639].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2BoatSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[640].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityPushTipsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[641].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityPushTipsInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[642].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityReadPushTipsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[643].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityReadPushTipsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[644].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2RestartBoatGalleryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[645].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2RestartBoatGalleryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[646].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2RestartDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[647].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummerTimeV2RestartDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[648].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IslandPartyStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[649].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IslandPartyDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[650].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IslandPartySettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[651].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[652].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JigsawPictureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[653].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[654].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearActivityStartPlayGearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[655].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearActivityStartPlayGearRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[656].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearColumnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[657].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearActivityFinishPlayGearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[658].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearActivityFinishPlayGearRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[659].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearActivityStartPlayPictureReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[660].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearActivityStartPlayPictureRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[661].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearActivityFinishPlayPictureReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[662].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearActivityFinishPlayPictureRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[663].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocencePhotoStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[664].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocencePhotoObjectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[665].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocencePhotoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[666].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceCampStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[667].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceCampInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[668].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceRaceLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[669].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceRaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[670].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceCarveStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[671].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceCarveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[672].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[673].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceRaceSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[674].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceRaceRestartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[675].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceRaceRestartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[676].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceEditCarveCombinationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[677].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocenceEditCarveCombinationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[678].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocencePhotoFinishReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[679].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocencePhotoFinishRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[680].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravenInnocencePhotoReminderNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[681].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayTeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[682].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[683].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[684].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[685].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayEnterDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[686].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayEnterDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[687].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSpraySwitchTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[688].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSpraySwitchTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[689].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayLevelFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[690].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayRestartDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[691].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstableSprayRestartDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[692].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuqadasPotionLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[693].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuqadasPotionActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[694].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuqadasPotionActivityEnterDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[695].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuqadasPotionActivityEnterDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[696].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuqadasPotionDungeonSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[697].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuqadasPotionRestartDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[698].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuqadasPotionRestartDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[699].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuqadasPotionCaptureWeaknessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[700].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuqadasPotionCaptureWeaknessRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[701].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureSeelieRegionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[702].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureSeelieActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[703].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureSeelieCollectOrbsNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[704].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RockBoardExploreStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[705].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RockBoardExploreDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[706].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageHuntingStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[707].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintagePresentLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[708].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintagePresentStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[709].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageBoothUsedItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[710].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageCampChallengeLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[711].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageCampChallengeStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[712].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketTraderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[713].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketDealInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[714].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketStoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[715].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketStoreOpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[716].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[717].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageActivityDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[718].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketDeliverItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[719].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketDeliverItemRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[720].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageHuntingFirstStageSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[721].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageHuntingSecondStageSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[722].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageHuntingThirdStageSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[723].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneGalleryVintageHuntingSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[724].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintagePresentFinishNoify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[725].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageDecorateBoothReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[726].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageDecorateBoothRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[727].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageHuntingStartGalleryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[728].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageHuntingStartGalleryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[729].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageCampGroupBundleRegisterNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[730].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageCampStageFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[731].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketStartStorePlayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[732].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketStartStorePlayRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[733].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketFinishStorePlayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[734].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketFinishStorePlayRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[735].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintagePresentFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[736].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketStoreUnlockSlotReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[737].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketStoreUnlockSlotRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[738].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketStoreChooseStrategyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[739].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketStoreChooseStrategyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[740].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketStoreViewStrategyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[741].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketStoreViewStrategyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[742].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketDividendFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[743].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VintageMarketNpcEventFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[744].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindFieldDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[745].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindFieldStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[746].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindFieldRestartDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[747].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindFieldRestartDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[748].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[749].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusPlotStageDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[750].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusTrainingDungeonDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[751].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterMonsterDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[752].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusTrainingMonsterPreviewDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[753].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusTrainingPoolPreviewDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[754].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusTrainingProgressDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[755].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[756].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterFungusFighterPlotDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[757].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterFungusFighterPlotDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[758].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterPlotInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[759].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusCultivateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[760].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusCultivateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[761].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusRenameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[762].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusRenameRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[763].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterFungusFighterTrainingDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[764].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterFungusFighterTrainingDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[765].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterRuntimeDataNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[766].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterTrainingSelectFungusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[767].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterTrainingSelectFungusRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[768].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterTrainingGallerySettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[769].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterClearTrainingRuntimeDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[770].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterClearTrainingRuntimeDataRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[771].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterUseBackupFungusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[772].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterUseBackupFungusRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[773].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterRestartTraningDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[774].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungusFighterRestartTraningDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[775].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharAmusementStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[776].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharAmusementDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[777].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharAmusementSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[778].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeV2LevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[779].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeV2DetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[780].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeV2EnterDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[781].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeV2EnterDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[782].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeV2RestartDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[783].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeV2RestartDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[784].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeV2ChooseSkillReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[785].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeV2ChooseSkillRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[786].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffigyChallengeV2DungeonInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[787].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectTeamInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[788].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[789].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[790].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectChooseSkillReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[791].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectChooseSkillRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[792].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartCoinCollectPlaySingleModeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[793].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartCoinCollectPlaySingleModeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[794].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndCoinCollectPlaySingleModeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[795].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndCoinCollectPlaySingleModeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[796].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectPrepareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[797].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectPrepareRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[798].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectInterruptPlayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[799].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectInterruptPlayRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[800].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectCheckDoubleStartPlayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[801].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinCollectCheckDoubleStartPlayRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[802].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[803].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerActivityStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[804].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[805].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleStartBrickBreakerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[806].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleStartBrickBreakerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[807].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleRestartBrickBreakerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[808].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleRestartBrickBreakerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[809].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[810].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerTwiceStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[811].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerTwiceStartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[812].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerQuitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[813].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrickBreakerQuitRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[814].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3RaceLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[815].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3RaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[816].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3ShadowLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[817].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3ShadowStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[818].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3ShadowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[819].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3CampStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[820].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3CampInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[821].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaLampV3DetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[822].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3BoatGameStartSingleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[823].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3BoatGameStartSingleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[824].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3BoatGameTransferFinishNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[825].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3RaceSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[826].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3RaceRestartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[827].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3RaceRestartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[828].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3BoatInterruptSettleStageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[829].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3BoatInterruptSettleStageRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[830].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3ShadowFinishLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[831].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanV3ShadowFinishLevelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[832].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartLevelDifficultyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[833].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[834].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[835].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartEnterDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[836].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartEnterDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[837].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartRestartDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[838].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartRestartDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[839].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartSelectDifficultyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[840].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartSelectDifficultyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[841].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[842].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuelHeartCgEndNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[843].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[844].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[845].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainChooseAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[846].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainChooseTeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[847].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainEnterDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[848].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainEnterDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[849].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainRestartDungeonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[850].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainRestartDungeonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[851].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainDungeonInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[852].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainTakeCostumeRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[853].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChainTakeCostumeRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[854].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectroherculesBattleLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[855].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectroherculesBattleStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[856].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectroherculesBattleDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[857].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectroherculesBattleSelectDifficultyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[858].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectroherculesBattleSelectDifficultyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[859].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectroherculesBattleSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd_cmd_activity_proto_msgTypes[877].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cmd_cmd_activity_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ActivityInfo_SamLampInfo)(nil),
		(*ActivityInfo_CrucibleInfo)(nil),
		(*ActivityInfo_SalesmanInfo)(nil),
		(*ActivityInfo_TrialAvatarInfo)(nil),
		(*ActivityInfo_DeliveryInfo)(nil),
		(*ActivityInfo_AsterInfo)(nil),
		(*ActivityInfo_FlightInfo)(nil),
		(*ActivityInfo_DragonSpineInfo)(nil),
		(*ActivityInfo_EffigyInfo)(nil),
		(*ActivityInfo_TreasureMapInfo)(nil),
		(*ActivityInfo_BlessingInfo)(nil),
		(*ActivityInfo_SeaLampInfo)(nil),
		(*ActivityInfo_ExpeditionInfo)(nil),
		(*ActivityInfo_ArenaChallengeInfo)(nil),
		(*ActivityInfo_FleurFairInfo)(nil),
		(*ActivityInfo_WaterSpiritInfo)(nil),
		(*ActivityInfo_ChallnelerSlabInfo)(nil),
		(*ActivityInfo_MistTrialActivityInfo)(nil),
		(*ActivityInfo_HideAndSeekInfo)(nil),
		(*ActivityInfo_FindHilichurlInfo)(nil),
		(*ActivityInfo_SummerTimeInfo)(nil),
		(*ActivityInfo_BuoyantCombatInfo)(nil),
		(*ActivityInfo_EchoShellInfo)(nil),
		(*ActivityInfo_BounceConjuringInfo)(nil),
		(*ActivityInfo_BlitzRushInfo)(nil),
		(*ActivityInfo_ChessInfo)(nil),
		(*ActivityInfo_SumoInfo)(nil),
		(*ActivityInfo_MoonfinTrialInfo)(nil),
		(*ActivityInfo_LunaRiteInfo)(nil),
		(*ActivityInfo_PlantFlowerInfo)(nil),
		(*ActivityInfo_MusicGameInfo)(nil),
		(*ActivityInfo_RoguelikeDungoenInfo)(nil),
		(*ActivityInfo_DigInfo)(nil),
		(*ActivityInfo_HachiInfo)(nil),
		(*ActivityInfo_WinterCampInfo)(nil),
		(*ActivityInfo_PotionInfo)(nil),
		(*ActivityInfo_TanukiTravelActivityInfo)(nil),
		(*ActivityInfo_LanternRiteActivityInfo)(nil),
		(*ActivityInfo_MichiaeMatsuriInfo)(nil),
		(*ActivityInfo_BartenderInfo)(nil),
		(*ActivityInfo_UgcInfo)(nil),
		(*ActivityInfo_CrystalLinkInfo)(nil),
		(*ActivityInfo_IrodoriInfo)(nil),
		(*ActivityInfo_PhotoInfo)(nil),
		(*ActivityInfo_SpiceInfo)(nil),
		(*ActivityInfo_GachaInfo)(nil),
		(*ActivityInfo_LuminanceStoneChallengeInfo)(nil),
		(*ActivityInfo_RogueDiaryInfo)(nil),
		(*ActivityInfo_SummerTimeV2Info)(nil),
		(*ActivityInfo_IslandPartyInfo)(nil),
		(*ActivityInfo_GearInfo)(nil),
		(*ActivityInfo_GravenInnocenceInfo)(nil),
		(*ActivityInfo_InstableSprayInfo)(nil),
		(*ActivityInfo_MuqadasPotionInfo)(nil),
		(*ActivityInfo_TreasureSeelieInfo)(nil),
		(*ActivityInfo_RockBoardExploreInfo)(nil),
		(*ActivityInfo_VintageInfo)(nil),
		(*ActivityInfo_WindFieldInfo)(nil),
		(*ActivityInfo_FungusFighterInfo)(nil),
		(*ActivityInfo_CharAmusementInfo)(nil),
		(*ActivityInfo_EffigyChallengeInfo)(nil),
		(*ActivityInfo_CoinCollectInfo)(nil),
		(*ActivityInfo_BrickBreakerInfo)(nil),
		(*ActivityInfo_DuelHeartInfo)(nil),
		(*ActivityInfo_SeaLampV3Info)(nil),
		(*ActivityInfo_TeamChainInfo)(nil),
		(*ActivityInfo_ElectroherculesBattleInfo)(nil),
	}
	file_cmd_cmd_activity_proto_msgTypes[154].OneofWrappers = []interface{}{
		(*FleurFairMinigameInfo_BalloonInfo)(nil),
		(*FleurFairMinigameInfo_FallInfo)(nil),
		(*FleurFairMinigameInfo_MusicInfo)(nil),
	}
	file_cmd_cmd_activity_proto_msgTypes[354].OneofWrappers = []interface{}{
		(*RoguelikeGiveUpRsp_SettleInfo)(nil),
	}
	file_cmd_cmd_activity_proto_msgTypes[449].OneofWrappers = []interface{}{
		(*SalvageChallengeInfo_BundleInfo)(nil),
		(*SalvageChallengeInfo_ScoreChallengeInfo)(nil),
		(*SalvageChallengeInfo_BossChallengeId)(nil),
	}
	file_cmd_cmd_activity_proto_msgTypes[723].OneofWrappers = []interface{}{
		(*SceneGalleryVintageHuntingSettleNotify_FirstStageInfo)(nil),
		(*SceneGalleryVintageHuntingSettleNotify_SecondStageInfo)(nil),
		(*SceneGalleryVintageHuntingSettleNotify_ThirdStageInfo)(nil),
	}
	file_cmd_cmd_activity_proto_msgTypes[877].OneofWrappers = []interface{}{
		(*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_MistTrialAvatarId)(nil),
		(*MistTrialSelectAvatarAndEnterDungeonReq_SelectAvatarIndex_FormalAvatarGuid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_cmd_activity_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   921,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd_cmd_activity_proto_goTypes,
		DependencyIndexes: file_cmd_cmd_activity_proto_depIdxs,
		EnumInfos:         file_cmd_cmd_activity_proto_enumTypes,
		MessageInfos:      file_cmd_cmd_activity_proto_msgTypes,
	}.Build()
	File_cmd_cmd_activity_proto = out.File
	file_cmd_cmd_activity_proto_rawDesc = nil
	file_cmd_cmd_activity_proto_goTypes = nil
	file_cmd_cmd_activity_proto_depIdxs = nil
}
